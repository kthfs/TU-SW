
Data_sequence_range_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800408c  0800408c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800408c  0800408c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800408c  0800408c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000074  08004108  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004108  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008477  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161a  00000000  00000000  00028513  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  00029b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b003  00000000  00000000  0002ab78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076a5  00000000  00000000  00045b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a298b  00000000  00000000  0004d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efbab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002008  00000000  00000000  000efc28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f68 	.word	0x08003f68

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08003f68 	.word	0x08003f68

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <CS_Select>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Select CS
void CS_Select()  {
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin,GPIO_PIN_RESET);
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <CS_Select+0x18>)
 8000222:	2200      	movs	r2, #0
 8000224:	2140      	movs	r1, #64	; 0x40
 8000226:	0018      	movs	r0, r3
 8000228:	f001 f8b7 	bl	800139a <HAL_GPIO_WritePin>
}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	48000400 	.word	0x48000400

08000238 <CS_Deselect>:


// Deselect CS
void CS_Deselect()  {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin,GPIO_PIN_SET);
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <CS_Deselect+0x18>)
 800023e:	2201      	movs	r2, #1
 8000240:	2140      	movs	r1, #64	; 0x40
 8000242:	0018      	movs	r0, r3
 8000244:	f001 f8a9 	bl	800139a <HAL_GPIO_WritePin>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	48000400 	.word	0x48000400

08000254 <wait_Miso>:

// Waits until MISO goes low
void wait_Miso() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)>0){
 8000258:	e000      	b.n	800025c <wait_Miso+0x8>
		__NOP();
 800025a:	46c0      	nop			; (mov r8, r8)
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)>0){
 800025c:	2390      	movs	r3, #144	; 0x90
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f87c 	bl	8001360 <HAL_GPIO_ReadPin>
 8000268:	1e03      	subs	r3, r0, #0
 800026a:	d1f6      	bne.n	800025a <wait_Miso+0x6>
	}
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <writeReg>:

//Write to register
void writeReg(uint8_t regAddr, uint8_t value)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	0002      	movs	r2, r0
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	1dbb      	adds	r3, r7, #6
 8000282:	1c0a      	adds	r2, r1, #0
 8000284:	701a      	strb	r2, [r3, #0]
  CS_Select();                     									   // Select CS
 8000286:	f7ff ffc9 	bl	800021c <CS_Select>
  wait_Miso();                          							   // Wait until MISO goes low
 800028a:	f7ff ffe3 	bl	8000254 <wait_Miso>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)&regAddr, 1, 100);                // Send register address
 800028e:	1df9      	adds	r1, r7, #7
 8000290:	4808      	ldr	r0, [pc, #32]	; (80002b4 <writeReg+0x40>)
 8000292:	2364      	movs	r3, #100	; 0x64
 8000294:	2201      	movs	r2, #1
 8000296:	f001 ff8d 	bl	80021b4 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)&value, 1, 100);                  // Send value
 800029a:	1db9      	adds	r1, r7, #6
 800029c:	4805      	ldr	r0, [pc, #20]	; (80002b4 <writeReg+0x40>)
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	2201      	movs	r2, #1
 80002a2:	f001 ff87 	bl	80021b4 <HAL_SPI_Transmit>
  CS_Deselect();                    	   							   // Deselect CC1101
 80002a6:	f7ff ffc7 	bl	8000238 <CS_Deselect>
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	200000a0 	.word	0x200000a0

080002b8 <halRfWriteReg>:

// Write to register (ONLY USED FOR SETTING THE INTIAL SETTINGS. The name is "halRfWriteReg" so it matches with SMARTRF Studio
void halRfWriteReg(uint8_t setting, uint8_t value)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	0002      	movs	r2, r0
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	1dbb      	adds	r3, r7, #6
 80002c6:	1c0a      	adds	r2, r1, #0
 80002c8:	701a      	strb	r2, [r3, #0]
	writeReg(setting, value);
 80002ca:	1dbb      	adds	r3, r7, #6
 80002cc:	781a      	ldrb	r2, [r3, #0]
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f7ff ffcd 	bl	8000274 <writeReg>
}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b002      	add	sp, #8
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <command_strobe1>:

// Send command strobe (FIFO_BYTES_AVAILABLE CASE 1)
void command_strobe1(uint8_t cmd){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	0002      	movs	r2, r0
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	701a      	strb	r2, [r3, #0]
    cmd = cmd | 0x00;                									// | 0x00 means that R/W=0(FIFO_BYTES_AVAILABLE means the TXFIFO when status byte has been sent)/ burst=0(strobe)
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781a      	ldrb	r2, [r3, #0]
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	701a      	strb	r2, [r3, #0]
    CS_Select();            		 									// set the CS pin to LOW
 80002f8:	f7ff ff90 	bl	800021c <CS_Select>
    wait_Miso();                          								// Wait until MISO goes low
 80002fc:	f7ff ffaa 	bl	8000254 <wait_Miso>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, 100);                   // Send register address
 8000300:	1df9      	adds	r1, r7, #7
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <command_strobe1+0x34>)
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	f001 ff54 	bl	80021b4 <HAL_SPI_Transmit>
    CS_Deselect();
 800030c:	f7ff ff94 	bl	8000238 <CS_Deselect>
  }
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b002      	add	sp, #8
 8000316:	bd80      	pop	{r7, pc}
 8000318:	200000a0 	.word	0x200000a0

0800031c <send_data_sequence>:
		  HAL_SPI_Transmit(&hspi1, (uint8_t*)&element, 1, 100);                  // Send data
        }
    CS_Deselect();
}
// Send data with sequence numbers
void send_data_sequence(char databuffer[],uint8_t length,uint16_t sequence ){
 800031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	0008      	movs	r0, r1
 8000326:	0011      	movs	r1, r2
 8000328:	1cfb      	adds	r3, r7, #3
 800032a:	1c02      	adds	r2, r0, #0
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	003b      	movs	r3, r7
 8000330:	1c0a      	adds	r2, r1, #0
 8000332:	801a      	strh	r2, [r3, #0]
	int i;
	uint8_t element;
	uint8_t LSB_seq;
	uint8_t MSB_seq;
	LSB_seq = sequence & 0xFF;
 8000334:	003b      	movs	r3, r7
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	250a      	movs	r5, #10
 800033c:	197b      	adds	r3, r7, r5
 800033e:	701a      	strb	r2, [r3, #0]
	MSB_seq = sequence >> 8;
 8000340:	003b      	movs	r3, r7
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	b29b      	uxth	r3, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	2609      	movs	r6, #9
 800034c:	19bb      	adds	r3, r7, r6
 800034e:	701a      	strb	r2, [r3, #0]
	CS_Select();                		 								// set the CS pin to LOW
 8000350:	f7ff ff64 	bl	800021c <CS_Select>
    wait_Miso();                         								// Wait until MISO goes low
 8000354:	f7ff ff7e 	bl	8000254 <wait_Miso>
    uint8_t TXfifo = TX_FIFO;
 8000358:	2408      	movs	r4, #8
 800035a:	193b      	adds	r3, r7, r4
 800035c:	223f      	movs	r2, #63	; 0x3f
 800035e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000360:	1939      	adds	r1, r7, r4
 8000362:	4824      	ldr	r0, [pc, #144]	; (80003f4 <send_data_sequence+0xd8>)
 8000364:	2364      	movs	r3, #100	; 0x64
 8000366:	2201      	movs	r2, #1
 8000368:	f001 ff24 	bl	80021b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&length, 1, 100);			   // Send length of data
 800036c:	1cf9      	adds	r1, r7, #3
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <send_data_sequence+0xd8>)
 8000370:	2364      	movs	r3, #100	; 0x64
 8000372:	2201      	movs	r2, #1
 8000374:	f001 ff1e 	bl	80021b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000378:	1939      	adds	r1, r7, r4
 800037a:	481e      	ldr	r0, [pc, #120]	; (80003f4 <send_data_sequence+0xd8>)
 800037c:	2364      	movs	r3, #100	; 0x64
 800037e:	2201      	movs	r2, #1
 8000380:	f001 ff18 	bl	80021b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&MSB_seq, 1, 100);			   // Send MSB of sequence number
 8000384:	19b9      	adds	r1, r7, r6
 8000386:	481b      	ldr	r0, [pc, #108]	; (80003f4 <send_data_sequence+0xd8>)
 8000388:	2364      	movs	r3, #100	; 0x64
 800038a:	2201      	movs	r2, #1
 800038c:	f001 ff12 	bl	80021b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000390:	1939      	adds	r1, r7, r4
 8000392:	4818      	ldr	r0, [pc, #96]	; (80003f4 <send_data_sequence+0xd8>)
 8000394:	2364      	movs	r3, #100	; 0x64
 8000396:	2201      	movs	r2, #1
 8000398:	f001 ff0c 	bl	80021b4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&LSB_seq, 1, 100);			   // Send LSB of sequence number
 800039c:	1979      	adds	r1, r7, r5
 800039e:	4815      	ldr	r0, [pc, #84]	; (80003f4 <send_data_sequence+0xd8>)
 80003a0:	2364      	movs	r3, #100	; 0x64
 80003a2:	2201      	movs	r2, #1
 80003a4:	f001 ff06 	bl	80021b4 <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e016      	b.n	80003dc <send_data_sequence+0xc0>
        {
          element = databuffer[i];
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	781a      	ldrb	r2, [r3, #0]
 80003b6:	240b      	movs	r4, #11
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Send the data
 80003bc:	2308      	movs	r3, #8
 80003be:	18f9      	adds	r1, r7, r3
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <send_data_sequence+0xd8>)
 80003c2:	2364      	movs	r3, #100	; 0x64
 80003c4:	2201      	movs	r2, #1
 80003c6:	f001 fef5 	bl	80021b4 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi1, (uint8_t*)&element, 1, 100);                  // Send data
 80003ca:	1939      	adds	r1, r7, r4
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <send_data_sequence+0xd8>)
 80003ce:	2364      	movs	r3, #100	; 0x64
 80003d0:	2201      	movs	r2, #1
 80003d2:	f001 feef 	bl	80021b4 <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	1cfb      	adds	r3, r7, #3
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	3b02      	subs	r3, #2
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	dbe2      	blt.n	80003ae <send_data_sequence+0x92>
        }
    CS_Deselect();
 80003e8:	f7ff ff26 	bl	8000238 <CS_Deselect>
}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b005      	add	sp, #20
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f4:	200000a0 	.word	0x200000a0

080003f8 <readReg>:
// Read register
void readReg(uint8_t regAddr, uint8_t regType) {
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	0002      	movs	r2, r0
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	1dbb      	adds	r3, r7, #6
 8000406:	1c0a      	adds	r2, r1, #0
 8000408:	701a      	strb	r2, [r3, #0]
    uint8_t addr;
    addr = regAddr | regType;			  								 // Bitwise and to get the right address
 800040a:	1dfa      	adds	r2, r7, #7
 800040c:	1dbb      	adds	r3, r7, #6
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	4313      	orrs	r3, r2
 8000414:	b2da      	uxtb	r2, r3
 8000416:	240f      	movs	r4, #15
 8000418:	193b      	adds	r3, r7, r4
 800041a:	701a      	strb	r2, [r3, #0]
    CS_Select();                										 // set the SS pin to LOW
 800041c:	f7ff fefe 	bl	800021c <CS_Select>
    wait_Miso();                          								 // Wait until MISO goes low
 8000420:	f7ff ff18 	bl	8000254 <wait_Miso>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 1, 100);                   // Send register address
 8000424:	1939      	adds	r1, r7, r4
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <readReg+0x50>)
 8000428:	2364      	movs	r3, #100	; 0x64
 800042a:	2201      	movs	r2, #1
 800042c:	f001 fec2 	bl	80021b4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result (need to send dummy message)
 8000430:	4906      	ldr	r1, [pc, #24]	; (800044c <readReg+0x54>)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <readReg+0x50>)
 8000434:	2364      	movs	r3, #100	; 0x64
 8000436:	2201      	movs	r2, #1
 8000438:	f002 f814 	bl	8002464 <HAL_SPI_Receive>
    CS_Deselect();                    							 		 // set the SS pin to HIGH
 800043c:	f7ff fefc 	bl	8000238 <CS_Deselect>

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b005      	add	sp, #20
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	200000a0 	.word	0x200000a0
 800044c:	20000188 	.word	0x20000188

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b0b9      	sub	sp, #228	; 0xe4
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char MSG[100];
	int datalen = 4;   // Set length of payload. Note that the first length byte is not inluded in this.
 8000456:	2004      	movs	r0, #4
 8000458:	22bc      	movs	r2, #188	; 0xbc
 800045a:	2118      	movs	r1, #24
 800045c:	1879      	adds	r1, r7, r1
 800045e:	1889      	adds	r1, r1, r2
 8000460:	6008      	str	r0, [r1, #0]
						// However the 2 sequence bytes are included. Max value is 63.
	char data[datalen];
 8000462:	2118      	movs	r1, #24
 8000464:	468c      	mov	ip, r1
 8000466:	44bc      	add	ip, r7
 8000468:	4462      	add	r2, ip
 800046a:	6810      	ldr	r0, [r2, #0]
 800046c:	0001      	movs	r1, r0
 800046e:	6079      	str	r1, [r7, #4]
 8000470:	0008      	movs	r0, r1
 8000472:	3801      	subs	r0, #1
 8000474:	22b8      	movs	r2, #184	; 0xb8
 8000476:	603a      	str	r2, [r7, #0]
 8000478:	2218      	movs	r2, #24
 800047a:	4694      	mov	ip, r2
 800047c:	44bc      	add	ip, r7
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	4462      	add	r2, ip
 8000482:	6010      	str	r0, [r2, #0]
 8000484:	0008      	movs	r0, r1
 8000486:	6138      	str	r0, [r7, #16]
 8000488:	2000      	movs	r0, #0
 800048a:	6178      	str	r0, [r7, #20]
 800048c:	693a      	ldr	r2, [r7, #16]
 800048e:	0f50      	lsrs	r0, r2, #29
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	00d2      	lsls	r2, r2, #3
 8000494:	60fa      	str	r2, [r7, #12]
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	4302      	orrs	r2, r0
 800049a:	60fa      	str	r2, [r7, #12]
 800049c:	693a      	ldr	r2, [r7, #16]
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	000a      	movs	r2, r1
 80004a4:	0015      	movs	r5, r2
 80004a6:	2200      	movs	r2, #0
 80004a8:	0016      	movs	r6, r2
 80004aa:	0f6a      	lsrs	r2, r5, #29
 80004ac:	00f4      	lsls	r4, r6, #3
 80004ae:	4314      	orrs	r4, r2
 80004b0:	00eb      	lsls	r3, r5, #3
 80004b2:	000b      	movs	r3, r1
 80004b4:	3307      	adds	r3, #7
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	466a      	mov	r2, sp
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	469d      	mov	sp, r3
 80004c0:	466b      	mov	r3, sp
 80004c2:	3300      	adds	r3, #0
 80004c4:	22b4      	movs	r2, #180	; 0xb4
 80004c6:	2118      	movs	r1, #24
 80004c8:	468c      	mov	ip, r1
 80004ca:	44bc      	add	ip, r7
 80004cc:	4462      	add	r2, ip
 80004ce:	6013      	str	r3, [r2, #0]
	int RX_BUFFER[20];
	uint16_t sequence_number = 1;
 80004d0:	23c2      	movs	r3, #194	; 0xc2
 80004d2:	2218      	movs	r2, #24
 80004d4:	4694      	mov	ip, r2
 80004d6:	44bc      	add	ip, r7
 80004d8:	4463      	add	r3, ip
 80004da:	2201      	movs	r2, #1
 80004dc:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fc63 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f99f 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fa6d 	bl	80009c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 fa3b 	bl	8000964 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004ee:	f000 f9fb 	bl	80008e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CS_Deselect();
 80004f2:	f7ff fea1 	bl	8000238 <CS_Deselect>
  sprintf(MSG, "Serial Monitor Engaged\r\n");
 80004f6:	2150      	movs	r1, #80	; 0x50
 80004f8:	2318      	movs	r3, #24
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	185b      	adds	r3, r3, r1
 80004fe:	4ac0      	ldr	r2, [pc, #768]	; (8000800 <main+0x3b0>)
 8000500:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000502:	c331      	stmia	r3!, {r0, r4, r5}
 8000504:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000506:	c331      	stmia	r3!, {r0, r4, r5}
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800050c:	000c      	movs	r4, r1
 800050e:	2318      	movs	r3, #24
 8000510:	469c      	mov	ip, r3
 8000512:	44bc      	add	ip, r7
 8000514:	4461      	add	r1, ip
 8000516:	48bb      	ldr	r0, [pc, #748]	; (8000804 <main+0x3b4>)
 8000518:	2364      	movs	r3, #100	; 0x64
 800051a:	2264      	movs	r2, #100	; 0x64
 800051c:	f002 fcde 	bl	8002edc <HAL_UART_Transmit>
  memset(MSG, 0, sizeof (MSG));
 8000520:	0021      	movs	r1, r4
 8000522:	2318      	movs	r3, #24
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	185b      	adds	r3, r3, r1
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	2100      	movs	r1, #0
 800052c:	0018      	movs	r0, r3
 800052e:	f003 f90b 	bl	8003748 <memset>

  //SETUP SETTINGS (Imported from SMART RF Studios)
  halRfWriteReg(IOCFG0,0x06);    //GDO0 Output Pin Configuration
 8000532:	2106      	movs	r1, #6
 8000534:	2002      	movs	r0, #2
 8000536:	f7ff febf 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FIFOTHR,0x47);   //RX FIFO and TX FIFO Thresholds
 800053a:	2147      	movs	r1, #71	; 0x47
 800053c:	2003      	movs	r0, #3
 800053e:	f7ff febb 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(PKTCTRL0,0x45);  //Packet Automation Control
 8000542:	2145      	movs	r1, #69	; 0x45
 8000544:	2008      	movs	r0, #8
 8000546:	f7ff feb7 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCTRL1,0x08);   //Frequency Synthesizer Control
 800054a:	2108      	movs	r1, #8
 800054c:	200b      	movs	r0, #11
 800054e:	f7ff feb3 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREQ2,0x10);     //Frequency Control Word, High Byte
 8000552:	2110      	movs	r1, #16
 8000554:	200d      	movs	r0, #13
 8000556:	f7ff feaf 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREQ1,0xEA);     //Frequency Control Word, Middle Byte
 800055a:	21ea      	movs	r1, #234	; 0xea
 800055c:	200e      	movs	r0, #14
 800055e:	f7ff feab 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREQ0,0x56);     //Frequency Control Word, Low Byte
 8000562:	2156      	movs	r1, #86	; 0x56
 8000564:	200f      	movs	r0, #15
 8000566:	f7ff fea7 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MDMCFG4,0x7B);   //Modem Configuration
 800056a:	217b      	movs	r1, #123	; 0x7b
 800056c:	2010      	movs	r0, #16
 800056e:	f7ff fea3 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MDMCFG3,0x83);   //Modem Configuration
 8000572:	2183      	movs	r1, #131	; 0x83
 8000574:	2011      	movs	r0, #17
 8000576:	f7ff fe9f 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MDMCFG2,0x13);   //Modem Configuration
 800057a:	2113      	movs	r1, #19
 800057c:	2012      	movs	r0, #18
 800057e:	f7ff fe9b 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(DEVIATN,0x42);   //Modem Deviation Setting
 8000582:	2142      	movs	r1, #66	; 0x42
 8000584:	2015      	movs	r0, #21
 8000586:	f7ff fe97 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MCSM0,0x18);     //Main Radio Control State Machine Configuration
 800058a:	2118      	movs	r1, #24
 800058c:	2018      	movs	r0, #24
 800058e:	f7ff fe93 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FOCCFG,0x1D);    //Frequency Offset Compensation Configuration
 8000592:	211d      	movs	r1, #29
 8000594:	2019      	movs	r0, #25
 8000596:	f7ff fe8f 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(BSCFG,0x1C);     //Bit Synchronization Configuration
 800059a:	211c      	movs	r1, #28
 800059c:	201a      	movs	r0, #26
 800059e:	f7ff fe8b 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(AGCCTRL2,0xC7);  //AGC Control
 80005a2:	21c7      	movs	r1, #199	; 0xc7
 80005a4:	201b      	movs	r0, #27
 80005a6:	f7ff fe87 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(AGCCTRL1,0x00);  //AGC Control
 80005aa:	2100      	movs	r1, #0
 80005ac:	201c      	movs	r0, #28
 80005ae:	f7ff fe83 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(AGCCTRL0,0xB2);  //AGC Control
 80005b2:	21b2      	movs	r1, #178	; 0xb2
 80005b4:	201d      	movs	r0, #29
 80005b6:	f7ff fe7f 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(WORCTRL,0xFB);   //Wake On Radio Control
 80005ba:	21fb      	movs	r1, #251	; 0xfb
 80005bc:	2020      	movs	r0, #32
 80005be:	f7ff fe7b 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREND1,0xB6);    //Front End RX Configuration
 80005c2:	21b6      	movs	r1, #182	; 0xb6
 80005c4:	2021      	movs	r0, #33	; 0x21
 80005c6:	f7ff fe77 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL3,0xEA);    //Frequency Synthesizer Calibration
 80005ca:	21ea      	movs	r1, #234	; 0xea
 80005cc:	2023      	movs	r0, #35	; 0x23
 80005ce:	f7ff fe73 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL2,0x2A);    //Frequency Synthesizer Calibration
 80005d2:	212a      	movs	r1, #42	; 0x2a
 80005d4:	2024      	movs	r0, #36	; 0x24
 80005d6:	f7ff fe6f 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL1,0x00);    //Frequency Synthesizer Calibration
 80005da:	2100      	movs	r1, #0
 80005dc:	2025      	movs	r0, #37	; 0x25
 80005de:	f7ff fe6b 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL0,0x1F);    //Frequency Synthesizer Calibration
 80005e2:	211f      	movs	r1, #31
 80005e4:	2026      	movs	r0, #38	; 0x26
 80005e6:	f7ff fe67 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(TEST2,0x81);     //Various Test Settings
 80005ea:	2181      	movs	r1, #129	; 0x81
 80005ec:	202c      	movs	r0, #44	; 0x2c
 80005ee:	f7ff fe63 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(TEST1,0x35);     //Various Test Settings
 80005f2:	2135      	movs	r1, #53	; 0x35
 80005f4:	202d      	movs	r0, #45	; 0x2d
 80005f6:	f7ff fe5f 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(TEST0,0x09);     //Various Test Settings
 80005fa:	2109      	movs	r1, #9
 80005fc:	202e      	movs	r0, #46	; 0x2e
 80005fe:	f7ff fe5b 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(VERSION,0x14);   //Chip ID
 8000602:	2114      	movs	r1, #20
 8000604:	2031      	movs	r0, #49	; 0x31
 8000606:	f7ff fe57 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(LQI,0x5C);       //Demodulator Estimate for Link Quality
 800060a:	215c      	movs	r1, #92	; 0x5c
 800060c:	2033      	movs	r0, #51	; 0x33
 800060e:	f7ff fe53 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(RSSI,0x80);      //Received Signal Strength Indication
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	2034      	movs	r0, #52	; 0x34
 8000616:	f7ff fe4f 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MARCSTATE,0x01); //Main Radio Control State Machine State
 800061a:	2101      	movs	r1, #1
 800061c:	2035      	movs	r0, #53	; 0x35
 800061e:	f7ff fe4b 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(VCO_VC_DAC,0x94);//Current Setting from PLL Calibration Module
 8000622:	2194      	movs	r1, #148	; 0x94
 8000624:	2039      	movs	r0, #57	; 0x39
 8000626:	f7ff fe47 	bl	80002b8 <halRfWriteReg>

  // POWER SETTING (has to be done manually without register export)
  halRfWriteReg(0x3E,0xC0); // PATABLE 0 to 10dbm
 800062a:	21c0      	movs	r1, #192	; 0xc0
 800062c:	203e      	movs	r0, #62	; 0x3e
 800062e:	f7ff fe43 	bl	80002b8 <halRfWriteReg>

// Create data array
  int i;
  for (i = 0; i < sizeof(data); ++i)
 8000632:	2300      	movs	r3, #0
 8000634:	22c4      	movs	r2, #196	; 0xc4
 8000636:	2118      	movs	r1, #24
 8000638:	468c      	mov	ip, r1
 800063a:	44bc      	add	ip, r7
 800063c:	4462      	add	r2, ip
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	e01d      	b.n	800067e <main+0x22e>
    {
      data[i] = 2 * i;
 8000642:	20c4      	movs	r0, #196	; 0xc4
 8000644:	2318      	movs	r3, #24
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	181b      	adds	r3, r3, r0
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	18db      	adds	r3, r3, r3
 8000650:	b2d9      	uxtb	r1, r3
 8000652:	23b4      	movs	r3, #180	; 0xb4
 8000654:	2218      	movs	r2, #24
 8000656:	4694      	mov	ip, r2
 8000658:	44bc      	add	ip, r7
 800065a:	4463      	add	r3, ip
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	2318      	movs	r3, #24
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	181b      	adds	r3, r3, r0
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	18d3      	adds	r3, r2, r3
 8000668:	1c0a      	adds	r2, r1, #0
 800066a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(data); ++i)
 800066c:	2318      	movs	r3, #24
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	181b      	adds	r3, r3, r0
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3301      	adds	r3, #1
 8000676:	2218      	movs	r2, #24
 8000678:	18ba      	adds	r2, r7, r2
 800067a:	1812      	adds	r2, r2, r0
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	23c4      	movs	r3, #196	; 0xc4
 8000682:	2118      	movs	r1, #24
 8000684:	468c      	mov	ip, r1
 8000686:	44bc      	add	ip, r7
 8000688:	4463      	add	r3, ip
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8d8      	bhi.n	8000642 <main+0x1f2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (state == 1){
 8000690:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <main+0x3b8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d12e      	bne.n	80006f6 <main+0x2a6>
		  if (prev_state != 1){
 8000698:	4b5c      	ldr	r3, [pc, #368]	; (800080c <main+0x3bc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d02a      	beq.n	80006f6 <main+0x2a6>
		  readReg(MARCSTATE, STATUS_REGISTER);
 80006a0:	21c0      	movs	r1, #192	; 0xc0
 80006a2:	2035      	movs	r0, #53	; 0x35
 80006a4:	f7ff fea8 	bl	80003f8 <readReg>
		  sprintf(MSG, "MCU_state: 1    Tranceiver_state: %i 	Sent packets: %i\r\n",
				  (unsigned int)SPI_BUFFER[0],(unsigned int)sequence_number);
 80006a8:	4b59      	ldr	r3, [pc, #356]	; (8000810 <main+0x3c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
		  sprintf(MSG, "MCU_state: 1    Tranceiver_state: %i 	Sent packets: %i\r\n",
 80006ac:	001a      	movs	r2, r3
 80006ae:	25c2      	movs	r5, #194	; 0xc2
 80006b0:	2318      	movs	r3, #24
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	195b      	adds	r3, r3, r5
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	4956      	ldr	r1, [pc, #344]	; (8000814 <main+0x3c4>)
 80006ba:	2450      	movs	r4, #80	; 0x50
 80006bc:	2018      	movs	r0, #24
 80006be:	1838      	adds	r0, r7, r0
 80006c0:	1900      	adds	r0, r0, r4
 80006c2:	f003 f849 	bl	8003758 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80006c6:	2318      	movs	r3, #24
 80006c8:	18fb      	adds	r3, r7, r3
 80006ca:	1919      	adds	r1, r3, r4
 80006cc:	484d      	ldr	r0, [pc, #308]	; (8000804 <main+0x3b4>)
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	2264      	movs	r2, #100	; 0x64
 80006d2:	f002 fc03 	bl	8002edc <HAL_UART_Transmit>
		  memset(MSG, 0, sizeof MSG);
 80006d6:	2318      	movs	r3, #24
 80006d8:	18fb      	adds	r3, r7, r3
 80006da:	191b      	adds	r3, r3, r4
 80006dc:	2264      	movs	r2, #100	; 0x64
 80006de:	2100      	movs	r1, #0
 80006e0:	0018      	movs	r0, r3
 80006e2:	f003 f831 	bl	8003748 <memset>
		  sequence_number = 1;
 80006e6:	2318      	movs	r3, #24
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	195b      	adds	r3, r3, r5
 80006ec:	2201      	movs	r2, #1
 80006ee:	801a      	strh	r2, [r3, #0]
		  prev_state = 1;
 80006f0:	4b46      	ldr	r3, [pc, #280]	; (800080c <main+0x3bc>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]

	  	  }


	  }
	  if (state == 2){
 80006f6:	4b44      	ldr	r3, [pc, #272]	; (8000808 <main+0x3b8>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b02      	cmp	r3, #2
 80006fc:	d000      	beq.n	8000700 <main+0x2b0>
 80006fe:	e07b      	b.n	80007f8 <main+0x3a8>


		  if (prev_state != 2){
 8000700:	4b42      	ldr	r3, [pc, #264]	; (800080c <main+0x3bc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b02      	cmp	r3, #2
 8000706:	d03f      	beq.n	8000788 <main+0x338>

		  readReg(MARCSTATE, STATUS_REGISTER);
 8000708:	21c0      	movs	r1, #192	; 0xc0
 800070a:	2035      	movs	r0, #53	; 0x35
 800070c:	f7ff fe74 	bl	80003f8 <readReg>
		  sprintf(MSG, "MCU_state: 2    Tranceiver_state: %i\r\n", (unsigned int)SPI_BUFFER[0]);
 8000710:	4b3f      	ldr	r3, [pc, #252]	; (8000810 <main+0x3c0>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	4940      	ldr	r1, [pc, #256]	; (8000818 <main+0x3c8>)
 8000718:	2450      	movs	r4, #80	; 0x50
 800071a:	2318      	movs	r3, #24
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	191b      	adds	r3, r3, r4
 8000720:	0018      	movs	r0, r3
 8000722:	f003 f819 	bl	8003758 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000726:	2318      	movs	r3, #24
 8000728:	18fb      	adds	r3, r7, r3
 800072a:	1919      	adds	r1, r3, r4
 800072c:	4835      	ldr	r0, [pc, #212]	; (8000804 <main+0x3b4>)
 800072e:	2364      	movs	r3, #100	; 0x64
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	f002 fbd3 	bl	8002edc <HAL_UART_Transmit>
		  memset(MSG, 0, sizeof MSG);
 8000736:	2318      	movs	r3, #24
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	191b      	adds	r3, r3, r4
 800073c:	2264      	movs	r2, #100	; 0x64
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f003 f801 	bl	8003748 <memset>

		  readReg(TXBYTES, STATUS_REGISTER);
 8000746:	21c0      	movs	r1, #192	; 0xc0
 8000748:	203a      	movs	r0, #58	; 0x3a
 800074a:	f7ff fe55 	bl	80003f8 <readReg>
		  sprintf(MSG, "Amount of bytes in FIFOTX: %i\r\n", (unsigned int)SPI_BUFFER[0]);
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <main+0x3c0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	001a      	movs	r2, r3
 8000754:	4931      	ldr	r1, [pc, #196]	; (800081c <main+0x3cc>)
 8000756:	2318      	movs	r3, #24
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	191b      	adds	r3, r3, r4
 800075c:	0018      	movs	r0, r3
 800075e:	f002 fffb 	bl	8003758 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000762:	2318      	movs	r3, #24
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	1919      	adds	r1, r3, r4
 8000768:	4826      	ldr	r0, [pc, #152]	; (8000804 <main+0x3b4>)
 800076a:	2364      	movs	r3, #100	; 0x64
 800076c:	2264      	movs	r2, #100	; 0x64
 800076e:	f002 fbb5 	bl	8002edc <HAL_UART_Transmit>
		  memset(MSG, 0, sizeof MSG);
 8000772:	2318      	movs	r3, #24
 8000774:	18fb      	adds	r3, r7, r3
 8000776:	191b      	adds	r3, r3, r4
 8000778:	2264      	movs	r2, #100	; 0x64
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f002 ffe3 	bl	8003748 <memset>
		  prev_state = 2;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <main+0x3bc>)
 8000784:	2202      	movs	r2, #2
 8000786:	601a      	str	r2, [r3, #0]
		  }

		  readReg(TXBYTES, STATUS_REGISTER);
 8000788:	21c0      	movs	r1, #192	; 0xc0
 800078a:	203a      	movs	r0, #58	; 0x3a
 800078c:	f7ff fe34 	bl	80003f8 <readReg>
		  if (SPI_BUFFER[0] == 0){
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <main+0x3c0>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d12c      	bne.n	80007f2 <main+0x3a2>

		  send_data_sequence(data, datalen,sequence_number);
 8000798:	23b4      	movs	r3, #180	; 0xb4
 800079a:	2218      	movs	r2, #24
 800079c:	4694      	mov	ip, r2
 800079e:	44bc      	add	ip, r7
 80007a0:	4463      	add	r3, ip
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	23bc      	movs	r3, #188	; 0xbc
 80007a6:	2218      	movs	r2, #24
 80007a8:	4694      	mov	ip, r2
 80007aa:	44bc      	add	ip, r7
 80007ac:	4463      	add	r3, ip
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	b2d9      	uxtb	r1, r3
 80007b2:	24c2      	movs	r4, #194	; 0xc2
 80007b4:	2318      	movs	r3, #24
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	191b      	adds	r3, r3, r4
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	f7ff fdad 	bl	800031c <send_data_sequence>

		  sequence_number += 1;
 80007c2:	0021      	movs	r1, r4
 80007c4:	2318      	movs	r3, #24
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	185b      	adds	r3, r3, r1
 80007ca:	2218      	movs	r2, #24
 80007cc:	18ba      	adds	r2, r7, r2
 80007ce:	1852      	adds	r2, r2, r1
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	3201      	adds	r2, #1
 80007d4:	801a      	strh	r2, [r3, #0]
		  if (sequence_number > 10000){
 80007d6:	2318      	movs	r3, #24
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	185b      	adds	r3, r3, r1
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <main+0x3d0>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d906      	bls.n	80007f2 <main+0x3a2>
			  sequence_number = 1;
 80007e4:	23c2      	movs	r3, #194	; 0xc2
 80007e6:	2218      	movs	r2, #24
 80007e8:	4694      	mov	ip, r2
 80007ea:	44bc      	add	ip, r7
 80007ec:	4463      	add	r3, ip
 80007ee:	2201      	movs	r2, #1
 80007f0:	801a      	strh	r2, [r3, #0]
//		  readReg(TXBYTES, STATUS_REGISTER);
//		  sprintf(MSG, "Amoun of bytes in FIFOTX: %i\r\n", (unsigned int)SPI_BUFFER[0]);
//		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
//		  memset(MSG, 0, sizeof MSG);

		  command_strobe1(STX);
 80007f2:	2035      	movs	r0, #53	; 0x35
 80007f4:	f7ff fd76 	bl	80002e4 <command_strobe1>
		  //command_strobe1(SFTX); VAR FÖRSIKTIG!!!!!!!



	  }
	  HAL_Delay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f000 fb39 	bl	8000e70 <HAL_Delay>
	  if (state == 1){
 80007fe:	e747      	b.n	8000690 <main+0x240>
 8000800:	08003f80 	.word	0x08003f80
 8000804:	20000104 	.word	0x20000104
 8000808:	20000000 	.word	0x20000000
 800080c:	20000090 	.word	0x20000090
 8000810:	20000188 	.word	0x20000188
 8000814:	08003f9c 	.word	0x08003f9c
 8000818:	08003fd8 	.word	0x08003fd8
 800081c:	08004000 	.word	0x08004000
 8000820:	00002710 	.word	0x00002710

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b099      	sub	sp, #100	; 0x64
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	242c      	movs	r4, #44	; 0x2c
 800082c:	193b      	adds	r3, r7, r4
 800082e:	0018      	movs	r0, r3
 8000830:	2334      	movs	r3, #52	; 0x34
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f002 ff87 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083a:	231c      	movs	r3, #28
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	0018      	movs	r0, r3
 8000840:	2310      	movs	r3, #16
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f002 ff7f 	bl	8003748 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084a:	003b      	movs	r3, r7
 800084c:	0018      	movs	r0, r3
 800084e:	231c      	movs	r3, #28
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f002 ff78 	bl	8003748 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	0021      	movs	r1, r4
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2202      	movs	r2, #2
 800085e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	187b      	adds	r3, r7, r1
 8000862:	2201      	movs	r2, #1
 8000864:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2210      	movs	r2, #16
 800086a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2202      	movs	r2, #2
 8000870:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2280      	movs	r2, #128	; 0x80
 8000876:	0212      	lsls	r2, r2, #8
 8000878:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	22a0      	movs	r2, #160	; 0xa0
 800087e:	0392      	lsls	r2, r2, #14
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2201      	movs	r2, #1
 8000886:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000888:	187b      	adds	r3, r7, r1
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fdda 	bl	8001444 <HAL_RCC_OscConfig>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000894:	f000 f946 	bl	8000b24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	211c      	movs	r1, #28
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2207      	movs	r2, #7
 800089e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2202      	movs	r2, #2
 80008a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2101      	movs	r1, #1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 f94a 	bl	8001b50 <HAL_RCC_ClockConfig>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008c0:	f000 f930 	bl	8000b24 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008c4:	003b      	movs	r3, r7
 80008c6:	2202      	movs	r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	003b      	movs	r3, r7
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 fab4 	bl	8001e40 <HAL_RCCEx_PeriphCLKConfig>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008dc:	f000 f922 	bl	8000b24 <Error_Handler>
  }
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b019      	add	sp, #100	; 0x64
 80008e6:	bd90      	pop	{r4, r7, pc}

080008e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_SPI1_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MX_SPI1_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_SPI1_Init+0x74>)
 80008f4:	2282      	movs	r2, #130	; 0x82
 80008f6:	0052      	lsls	r2, r2, #1
 80008f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SPI1_Init+0x74>)
 8000902:	22e0      	movs	r2, #224	; 0xe0
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_SPI1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_SPI1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI1_Init+0x74>)
 8000916:	2280      	movs	r2, #128	; 0x80
 8000918:	0092      	lsls	r2, r2, #2
 800091a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SPI1_Init+0x74>)
 800091e:	2228      	movs	r2, #40	; 0x28
 8000920:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI1_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI1_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI1_Init+0x74>)
 8000936:	2207      	movs	r2, #7
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <MX_SPI1_Init+0x74>)
 8000948:	0018      	movs	r0, r3
 800094a:	f001 fb7b 	bl	8002044 <HAL_SPI_Init>
 800094e:	1e03      	subs	r3, r0, #0
 8000950:	d001      	beq.n	8000956 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 f8e7 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000a0 	.word	0x200000a0
 8000960:	40013000 	.word	0x40013000

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_USART2_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000970:	22e1      	movs	r2, #225	; 0xe1
 8000972:	0252      	lsls	r2, r2, #9
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x58>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 fa43 	bl	8002e34 <HAL_UART_Init>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f8b7 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000104 	.word	0x20000104
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b08b      	sub	sp, #44	; 0x2c
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	2414      	movs	r4, #20
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	0018      	movs	r0, r3
 80009d0:	2314      	movs	r3, #20
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f002 feb7 	bl	8003748 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <MX_GPIO_Init+0x100>)
 80009dc:	695a      	ldr	r2, [r3, #20]
 80009de:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <MX_GPIO_Init+0x100>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0309      	lsls	r1, r1, #12
 80009e4:	430a      	orrs	r2, r1
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <MX_GPIO_Init+0x100>)
 80009ea:	695a      	ldr	r2, [r3, #20]
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	031b      	lsls	r3, r3, #12
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f6:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <MX_GPIO_Init+0x100>)
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0x100>)
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	03c9      	lsls	r1, r1, #15
 8000a00:	430a      	orrs	r2, r1
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a06:	695a      	ldr	r2, [r3, #20]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	03db      	lsls	r3, r3, #15
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a14:	695a      	ldr	r2, [r3, #20]
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0289      	lsls	r1, r1, #10
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a22:	695a      	ldr	r2, [r3, #20]
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	029b      	lsls	r3, r3, #10
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a30:	695a      	ldr	r2, [r3, #20]
 8000a32:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	02c9      	lsls	r1, r1, #11
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	615a      	str	r2, [r3, #20]
 8000a3c:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_GPIO_Init+0x100>)
 8000a3e:	695a      	ldr	r2, [r3, #20]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	02db      	lsls	r3, r3, #11
 8000a44:	4013      	ands	r3, r2
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fca2 	bl	800139a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	0019      	movs	r1, r3
 8000a60:	f000 fc9b 	bl	800139a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	0192      	lsls	r2, r2, #6
 8000a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	4a17      	ldr	r2, [pc, #92]	; (8000acc <MX_GPIO_Init+0x108>)
 8000a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	4a15      	ldr	r2, [pc, #84]	; (8000ad0 <MX_GPIO_Init+0x10c>)
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	0010      	movs	r0, r2
 8000a80:	f000 faf6 	bl	8001070 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2290      	movs	r2, #144	; 0x90
 8000a8a:	0092      	lsls	r2, r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <MX_GPIO_Init+0x104>)
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	0010      	movs	r0, r2
 8000aa8:	f000 fae2 	bl	8001070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2007      	movs	r0, #7
 8000ab2:	f000 faab 	bl	800100c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ab6:	2007      	movs	r0, #7
 8000ab8:	f000 fabd 	bl	8001036 <HAL_NVIC_EnableIRQ>

}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b00b      	add	sp, #44	; 0x2c
 8000ac2:	bd90      	pop	{r4, r7, pc}
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	48000400 	.word	0x48000400
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	48000800 	.word	0x48000800

08000ad4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void  HAL_GPIO_EXTI_Callback(u_int16_t GPIO_Pin){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	0002      	movs	r2, r0
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	801a      	strh	r2, [r3, #0]

	if (GPIO_Pin == B1_Pin) {
 8000ae0:	1dbb      	adds	r3, r7, #6
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	019b      	lsls	r3, r3, #6
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d112      	bne.n	8000b12 <HAL_GPIO_EXTI_Callback+0x3e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x48>)
 8000af2:	0019      	movs	r1, r3
 8000af4:	0010      	movs	r0, r2
 8000af6:	f000 fc6d 	bl	80013d4 <HAL_GPIO_TogglePin>
		if (state == 1){
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d103      	bne.n	8000b0a <HAL_GPIO_EXTI_Callback+0x36>
			state =2;
 8000b02:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b04:	2202      	movs	r2, #2
 8000b06:	601a      	str	r2, [r3, #0]
		__NOP();
	}



}
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x40>
			state = 1;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x40>
		__NOP();
 8000b12:	46c0      	nop			; (mov r8, r8)
}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b002      	add	sp, #8
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	20000000 	.word	0x20000000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_MspInit+0x44>)
 8000b38:	699a      	ldr	r2, [r3, #24]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	619a      	str	r2, [r3, #24]
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_MspInit+0x44>)
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x44>)
 8000b50:	69da      	ldr	r2, [r3, #28]
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_MspInit+0x44>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0549      	lsls	r1, r1, #21
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	61da      	str	r2, [r3, #28]
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_MspInit+0x44>)
 8000b5e:	69da      	ldr	r2, [r3, #28]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	055b      	lsls	r3, r3, #21
 8000b64:	4013      	ands	r3, r2
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2314      	movs	r3, #20
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f002 fddc 	bl	8003748 <memset>
  if(hspi->Instance==SPI1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <HAL_SPI_MspInit+0x90>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d132      	bne.n	8000c00 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_SPI_MspInit+0x94>)
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_SPI_MspInit+0x94>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0149      	lsls	r1, r1, #5
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	619a      	str	r2, [r3, #24]
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_SPI_MspInit+0x94>)
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	015b      	lsls	r3, r3, #5
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_SPI_MspInit+0x94>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_SPI_MspInit+0x94>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0289      	lsls	r1, r1, #10
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_SPI_MspInit+0x94>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bd2:	2114      	movs	r1, #20
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	22e0      	movs	r2, #224	; 0xe0
 8000bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2202      	movs	r2, #2
 8000bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2203      	movs	r2, #3
 8000bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	187a      	adds	r2, r7, r1
 8000bf4:	2390      	movs	r3, #144	; 0x90
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fa38 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b00a      	add	sp, #40	; 0x28
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40013000 	.word	0x40013000
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	2314      	movs	r3, #20
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2314      	movs	r3, #20
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f002 fd90 	bl	8003748 <memset>
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ca0 <HAL_UART_MspInit+0x90>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d132      	bne.n	8000c98 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c34:	69da      	ldr	r2, [r3, #28]
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0289      	lsls	r1, r1, #10
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	61da      	str	r2, [r3, #28]
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c42:	69da      	ldr	r2, [r3, #28]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	029b      	lsls	r3, r3, #10
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c50:	695a      	ldr	r2, [r3, #20]
 8000c52:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	0289      	lsls	r1, r1, #10
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c5e:	695a      	ldr	r2, [r3, #20]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	029b      	lsls	r3, r3, #10
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c6a:	2114      	movs	r1, #20
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2202      	movs	r2, #2
 8000c76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2201      	movs	r2, #1
 8000c88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	187a      	adds	r2, r7, r1
 8000c8c:	2390      	movs	r3, #144	; 0x90
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 f9ec 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b00a      	add	sp, #40	; 0x28
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40004400 	.word	0x40004400
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f8b2 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	019b      	lsls	r3, r3, #6
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fb92 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <_sbrk+0x50>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d102      	bne.n	8000d06 <_sbrk+0x16>
		heap_end = &end;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <_sbrk+0x50>)
 8000d02:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <_sbrk+0x54>)
 8000d04:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <_sbrk+0x50>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <_sbrk+0x50>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	466a      	mov	r2, sp
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d907      	bls.n	8000d2a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d1a:	f002 fceb 	bl	80036f4 <__errno>
 8000d1e:	0003      	movs	r3, r0
 8000d20:	220c      	movs	r2, #12
 8000d22:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	425b      	negs	r3, r3
 8000d28:	e006      	b.n	8000d38 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <_sbrk+0x50>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	18d2      	adds	r2, r2, r3
 8000d32:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <_sbrk+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	0018      	movs	r0, r3
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b004      	add	sp, #16
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000094 	.word	0x20000094
 8000d44:	20000198 	.word	0x20000198

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopForever+0xe>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopForever+0x16>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d7e:	f7ff ffe3 	bl	8000d48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d82:	f002 fcbd 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d86:	f7ff fb63 	bl	8000450 <main>

08000d8a <LoopForever>:

LoopForever:
    b LoopForever
 8000d8a:	e7fe      	b.n	8000d8a <LoopForever>
  ldr   r0, =_estack
 8000d8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d98:	08004094 	.word	0x08004094
  ldr r2, =_sbss
 8000d9c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000da0:	20000198 	.word	0x20000198

08000da4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_COMP_IRQHandler>
	...

08000da8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_Init+0x24>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_Init+0x24>)
 8000db2:	2110      	movs	r1, #16
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 f809 	bl	8000dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff feb7 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40022000 	.word	0x40022000

08000dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_InitTick+0x5c>)
 8000dda:	681c      	ldr	r4, [r3, #0]
 8000ddc:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <HAL_InitTick+0x60>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	0019      	movs	r1, r3
 8000de2:	23fa      	movs	r3, #250	; 0xfa
 8000de4:	0098      	lsls	r0, r3, #2
 8000de6:	f7ff f98d 	bl	8000104 <__udivsi3>
 8000dea:	0003      	movs	r3, r0
 8000dec:	0019      	movs	r1, r3
 8000dee:	0020      	movs	r0, r4
 8000df0:	f7ff f988 	bl	8000104 <__udivsi3>
 8000df4:	0003      	movs	r3, r0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f92d 	bl	8001056 <HAL_SYSTICK_Config>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e00f      	b.n	8000e24 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d80b      	bhi.n	8000e22 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	425b      	negs	r3, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f8fa 	bl	800100c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_InitTick+0x64>)
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	20000004 	.word	0x20000004
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	20000008 	.word	0x20000008

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000190 	.word	0x20000190

08000e5c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000190 	.word	0x20000190

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff fff0 	bl	8000e5c <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_Delay+0x40>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	001a      	movs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	189b      	adds	r3, r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	f7ff ffe0 	bl	8000e5c <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b004      	add	sp, #16
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000000c 	.word	0x2000000c

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ec6:	d809      	bhi.n	8000edc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	001a      	movs	r2, r3
 8000ece:	231f      	movs	r3, #31
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_EnableIRQ+0x30>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4091      	lsls	r1, r2
 8000ed8:	000a      	movs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
  }
}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b7f      	cmp	r3, #127	; 0x7f
 8000efc:	d828      	bhi.n	8000f50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efe:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <__NVIC_SetPriority+0xd4>)
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	33c0      	adds	r3, #192	; 0xc0
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	589b      	ldr	r3, [r3, r2]
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	0011      	movs	r1, r2
 8000f14:	2203      	movs	r2, #3
 8000f16:	400a      	ands	r2, r1
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	21ff      	movs	r1, #255	; 0xff
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	43d2      	mvns	r2, r2
 8000f22:	401a      	ands	r2, r3
 8000f24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	22ff      	movs	r2, #255	; 0xff
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	0018      	movs	r0, r3
 8000f34:	2303      	movs	r3, #3
 8000f36:	4003      	ands	r3, r0
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3c:	481f      	ldr	r0, [pc, #124]	; (8000fbc <__NVIC_SetPriority+0xd4>)
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	33c0      	adds	r3, #192	; 0xc0
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f4e:	e031      	b.n	8000fb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <__NVIC_SetPriority+0xd8>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0019      	movs	r1, r3
 8000f58:	230f      	movs	r3, #15
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3306      	adds	r3, #6
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1dfa      	adds	r2, r7, #7
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	0011      	movs	r1, r2
 8000f70:	2203      	movs	r2, #3
 8000f72:	400a      	ands	r2, r1
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	21ff      	movs	r1, #255	; 0xff
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	43d2      	mvns	r2, r2
 8000f7e:	401a      	ands	r2, r3
 8000f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	22ff      	movs	r2, #255	; 0xff
 8000f88:	401a      	ands	r2, r3
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	2303      	movs	r3, #3
 8000f92:	4003      	ands	r3, r0
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <__NVIC_SetPriority+0xd8>)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	001c      	movs	r4, r3
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	4023      	ands	r3, r4
 8000fa4:	3b08      	subs	r3, #8
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	3306      	adds	r3, #6
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	18c3      	adds	r3, r0, r3
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	46c0      	nop			; (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b003      	add	sp, #12
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	4a0c      	ldr	r2, [pc, #48]	; (8001004 <SysTick_Config+0x40>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d901      	bls.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e010      	b.n	8000ffc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <SysTick_Config+0x44>)
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	3a01      	subs	r2, #1
 8000fe0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	425b      	negs	r3, r3
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff ff7d 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SysTick_Config+0x44>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff4:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x44>)
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b002      	add	sp, #8
 8001002:	bd80      	pop	{r7, pc}
 8001004:	00ffffff 	.word	0x00ffffff
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	210f      	movs	r1, #15
 8001018:	187b      	adds	r3, r7, r1
 800101a:	1c02      	adds	r2, r0, #0
 800101c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	187b      	adds	r3, r7, r1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	0002      	movs	r2, r0
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff33 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ffaf 	bl	8000fc4 <SysTick_Config>
 8001066:	0003      	movs	r3, r0
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107e:	e155      	b.n	800132c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2101      	movs	r1, #1
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4091      	lsls	r1, r2
 800108a:	000a      	movs	r2, r1
 800108c:	4013      	ands	r3, r2
 800108e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d100      	bne.n	8001098 <HAL_GPIO_Init+0x28>
 8001096:	e146      	b.n	8001326 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d00b      	beq.n	80010b8 <HAL_GPIO_Init+0x48>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d007      	beq.n	80010b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ac:	2b11      	cmp	r3, #17
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b12      	cmp	r3, #18
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	2201      	movs	r2, #1
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	409a      	lsls	r2, r3
 8001128:	0013      	movs	r3, r2
 800112a:	43da      	mvns	r2, r3
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	409a      	lsls	r2, r3
 800113c:	0013      	movs	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0xea>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b12      	cmp	r3, #18
 8001158:	d123      	bne.n	80011a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	0092      	lsls	r2, r2, #2
 8001164:	58d3      	ldr	r3, [r2, r3]
 8001166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2207      	movs	r2, #7
 800116c:	4013      	ands	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	409a      	lsls	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	43da      	mvns	r2, r3
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	691a      	ldr	r2, [r3, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2107      	movs	r1, #7
 8001186:	400b      	ands	r3, r1
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	08da      	lsrs	r2, r3, #3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3208      	adds	r2, #8
 800119c:	0092      	lsls	r2, r2, #2
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2203      	movs	r2, #3
 80011c0:	401a      	ands	r2, r3
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	055b      	lsls	r3, r3, #21
 80011de:	4013      	ands	r3, r2
 80011e0:	d100      	bne.n	80011e4 <HAL_GPIO_Init+0x174>
 80011e2:	e0a0      	b.n	8001326 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e4:	4b57      	ldr	r3, [pc, #348]	; (8001344 <HAL_GPIO_Init+0x2d4>)
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_GPIO_Init+0x2d4>)
 80011ea:	2101      	movs	r1, #1
 80011ec:	430a      	orrs	r2, r1
 80011ee:	619a      	str	r2, [r3, #24]
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <HAL_GPIO_Init+0x2d4>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	2201      	movs	r2, #1
 80011f6:	4013      	ands	r3, r2
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011fc:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	589b      	ldr	r3, [r3, r2]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	2203      	movs	r2, #3
 800120e:	4013      	ands	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	409a      	lsls	r2, r3
 8001216:	0013      	movs	r3, r2
 8001218:	43da      	mvns	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	2390      	movs	r3, #144	; 0x90
 8001224:	05db      	lsls	r3, r3, #23
 8001226:	429a      	cmp	r2, r3
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x1ee>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a47      	ldr	r2, [pc, #284]	; (800134c <HAL_GPIO_Init+0x2dc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x1ea>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a46      	ldr	r2, [pc, #280]	; (8001350 <HAL_GPIO_Init+0x2e0>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x1e6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a45      	ldr	r2, [pc, #276]	; (8001354 <HAL_GPIO_Init+0x2e4>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x1e2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a44      	ldr	r2, [pc, #272]	; (8001358 <HAL_GPIO_Init+0x2e8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x1de>
 800124a:	2304      	movs	r3, #4
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x1f0>
 800124e:	2305      	movs	r3, #5
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x1f0>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x1f0>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x1f0>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x1f0>
 800125e:	2300      	movs	r3, #0
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	2103      	movs	r1, #3
 8001264:	400a      	ands	r2, r1
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_GPIO_Init+0x2d8>)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <HAL_GPIO_Init+0x2ec>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43da      	mvns	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	4013      	ands	r3, r2
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a2:	4b2e      	ldr	r3, [pc, #184]	; (800135c <HAL_GPIO_Init+0x2ec>)
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <HAL_GPIO_Init+0x2ec>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43da      	mvns	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	029b      	lsls	r3, r3, #10
 80012c0:	4013      	ands	r3, r2
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_GPIO_Init+0x2ec>)
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_GPIO_Init+0x2ec>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43da      	mvns	r2, r3
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	035b      	lsls	r3, r3, #13
 80012ea:	4013      	ands	r3, r2
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_GPIO_Init+0x2ec>)
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <HAL_GPIO_Init+0x2ec>)
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43da      	mvns	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	039b      	lsls	r3, r3, #14
 8001314:	4013      	ands	r3, r2
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <HAL_GPIO_Init+0x2ec>)
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	40da      	lsrs	r2, r3
 8001334:	1e13      	subs	r3, r2, #0
 8001336:	d000      	beq.n	800133a <HAL_GPIO_Init+0x2ca>
 8001338:	e6a2      	b.n	8001080 <HAL_GPIO_Init+0x10>
  } 
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b006      	add	sp, #24
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000
 8001348:	40010000 	.word	0x40010000
 800134c:	48000400 	.word	0x48000400
 8001350:	48000800 	.word	0x48000800
 8001354:	48000c00 	.word	0x48000c00
 8001358:	48001000 	.word	0x48001000
 800135c:	40010400 	.word	0x40010400

08001360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	000a      	movs	r2, r1
 800136a:	1cbb      	adds	r3, r7, #2
 800136c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	1cba      	adds	r2, r7, #2
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	4013      	ands	r3, r2
 8001378:	d004      	beq.n	8001384 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800137a:	230f      	movs	r3, #15
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e003      	b.n	800138c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001384:	230f      	movs	r3, #15
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800138c:	230f      	movs	r3, #15
 800138e:	18fb      	adds	r3, r7, r3
 8001390:	781b      	ldrb	r3, [r3, #0]
  }
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	0008      	movs	r0, r1
 80013a4:	0011      	movs	r1, r2
 80013a6:	1cbb      	adds	r3, r7, #2
 80013a8:	1c02      	adds	r2, r0, #0
 80013aa:	801a      	strh	r2, [r3, #0]
 80013ac:	1c7b      	adds	r3, r7, #1
 80013ae:	1c0a      	adds	r2, r1, #0
 80013b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b2:	1c7b      	adds	r3, r7, #1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d004      	beq.n	80013c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ba:	1cbb      	adds	r3, r7, #2
 80013bc:	881a      	ldrh	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013c2:	e003      	b.n	80013cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013c4:	1cbb      	adds	r3, r7, #2
 80013c6:	881a      	ldrh	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	000a      	movs	r2, r1
 80013de:	1cbb      	adds	r3, r7, #2
 80013e0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	1cbb      	adds	r3, r7, #2
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	4013      	ands	r3, r2
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	1cb9      	adds	r1, r7, #2
 80013f8:	8809      	ldrh	r1, [r1, #0]
 80013fa:	400b      	ands	r3, r1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	46bd      	mov	sp, r7
 8001406:	b004      	add	sp, #16
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	0002      	movs	r2, r0
 8001414:	1dbb      	adds	r3, r7, #6
 8001416:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	1dba      	adds	r2, r7, #6
 800141e:	8812      	ldrh	r2, [r2, #0]
 8001420:	4013      	ands	r3, r2
 8001422:	d008      	beq.n	8001436 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001426:	1dba      	adds	r2, r7, #6
 8001428:	8812      	ldrh	r2, [r2, #0]
 800142a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff fb4f 	bl	8000ad4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	f000 fb76 	bl	8001b44 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	d100      	bne.n	8001464 <HAL_RCC_OscConfig+0x20>
 8001462:	e08e      	b.n	8001582 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001464:	4bc5      	ldr	r3, [pc, #788]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	220c      	movs	r2, #12
 800146a:	4013      	ands	r3, r2
 800146c:	2b04      	cmp	r3, #4
 800146e:	d00e      	beq.n	800148e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001470:	4bc2      	ldr	r3, [pc, #776]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	220c      	movs	r2, #12
 8001476:	4013      	ands	r3, r2
 8001478:	2b08      	cmp	r3, #8
 800147a:	d117      	bne.n	80014ac <HAL_RCC_OscConfig+0x68>
 800147c:	4bbf      	ldr	r3, [pc, #764]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	23c0      	movs	r3, #192	; 0xc0
 8001482:	025b      	lsls	r3, r3, #9
 8001484:	401a      	ands	r2, r3
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	429a      	cmp	r2, r3
 800148c:	d10e      	bne.n	80014ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148e:	4bbb      	ldr	r3, [pc, #748]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	029b      	lsls	r3, r3, #10
 8001496:	4013      	ands	r3, r2
 8001498:	d100      	bne.n	800149c <HAL_RCC_OscConfig+0x58>
 800149a:	e071      	b.n	8001580 <HAL_RCC_OscConfig+0x13c>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d000      	beq.n	80014a6 <HAL_RCC_OscConfig+0x62>
 80014a4:	e06c      	b.n	8001580 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f000 fb4c 	bl	8001b44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d107      	bne.n	80014c4 <HAL_RCC_OscConfig+0x80>
 80014b4:	4bb1      	ldr	r3, [pc, #708]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4bb0      	ldr	r3, [pc, #704]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014ba:	2180      	movs	r1, #128	; 0x80
 80014bc:	0249      	lsls	r1, r1, #9
 80014be:	430a      	orrs	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e02f      	b.n	8001524 <HAL_RCC_OscConfig+0xe0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10c      	bne.n	80014e6 <HAL_RCC_OscConfig+0xa2>
 80014cc:	4bab      	ldr	r3, [pc, #684]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4baa      	ldr	r3, [pc, #680]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014d2:	49ab      	ldr	r1, [pc, #684]	; (8001780 <HAL_RCC_OscConfig+0x33c>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	4ba8      	ldr	r3, [pc, #672]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4ba7      	ldr	r3, [pc, #668]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014de:	49a9      	ldr	r1, [pc, #676]	; (8001784 <HAL_RCC_OscConfig+0x340>)
 80014e0:	400a      	ands	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e01e      	b.n	8001524 <HAL_RCC_OscConfig+0xe0>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b05      	cmp	r3, #5
 80014ec:	d10e      	bne.n	800150c <HAL_RCC_OscConfig+0xc8>
 80014ee:	4ba3      	ldr	r3, [pc, #652]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4ba2      	ldr	r3, [pc, #648]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	02c9      	lsls	r1, r1, #11
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	4b9f      	ldr	r3, [pc, #636]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b9e      	ldr	r3, [pc, #632]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	0249      	lsls	r1, r1, #9
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xe0>
 800150c:	4b9b      	ldr	r3, [pc, #620]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b9a      	ldr	r3, [pc, #616]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001512:	499b      	ldr	r1, [pc, #620]	; (8001780 <HAL_RCC_OscConfig+0x33c>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	4b98      	ldr	r3, [pc, #608]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b97      	ldr	r3, [pc, #604]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800151e:	4999      	ldr	r1, [pc, #612]	; (8001784 <HAL_RCC_OscConfig+0x340>)
 8001520:	400a      	ands	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d014      	beq.n	8001556 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc96 	bl	8000e5c <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001536:	f7ff fc91 	bl	8000e5c <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b64      	cmp	r3, #100	; 0x64
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e2fd      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001548:	4b8c      	ldr	r3, [pc, #560]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	029b      	lsls	r3, r3, #10
 8001550:	4013      	ands	r3, r2
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0xf2>
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001556:	f7ff fc81 	bl	8000e5c <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fc7c 	bl	8000e5c <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e2e8      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001572:	4b82      	ldr	r3, [pc, #520]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	029b      	lsls	r3, r3, #10
 800157a:	4013      	ands	r3, r2
 800157c:	d1f0      	bne.n	8001560 <HAL_RCC_OscConfig+0x11c>
 800157e:	e000      	b.n	8001582 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001580:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2202      	movs	r2, #2
 8001588:	4013      	ands	r3, r2
 800158a:	d100      	bne.n	800158e <HAL_RCC_OscConfig+0x14a>
 800158c:	e06c      	b.n	8001668 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800158e:	4b7b      	ldr	r3, [pc, #492]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	220c      	movs	r2, #12
 8001594:	4013      	ands	r3, r2
 8001596:	d00e      	beq.n	80015b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001598:	4b78      	ldr	r3, [pc, #480]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	220c      	movs	r2, #12
 800159e:	4013      	ands	r3, r2
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d11f      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1a0>
 80015a4:	4b75      	ldr	r3, [pc, #468]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	23c0      	movs	r3, #192	; 0xc0
 80015aa:	025b      	lsls	r3, r3, #9
 80015ac:	401a      	ands	r2, r3
 80015ae:	2380      	movs	r3, #128	; 0x80
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d116      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b6:	4b71      	ldr	r3, [pc, #452]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2202      	movs	r2, #2
 80015bc:	4013      	ands	r3, r2
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x188>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2bb      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b6b      	ldr	r3, [pc, #428]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	22f8      	movs	r2, #248	; 0xf8
 80015d2:	4393      	bics	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	00da      	lsls	r2, r3, #3
 80015dc:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80015de:	430a      	orrs	r2, r1
 80015e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	e041      	b.n	8001668 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d024      	beq.n	8001636 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b62      	ldr	r3, [pc, #392]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fc30 	bl	8000e5c <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fc2b 	bl	8000e5c <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e297      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d0f1      	beq.n	8001602 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b57      	ldr	r3, [pc, #348]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	22f8      	movs	r2, #248	; 0xf8
 8001624:	4393      	bics	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	00da      	lsls	r2, r3, #3
 800162e:	4b53      	ldr	r3, [pc, #332]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e018      	b.n	8001668 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b50      	ldr	r3, [pc, #320]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800163c:	2101      	movs	r1, #1
 800163e:	438a      	bics	r2, r1
 8001640:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fc0b 	bl	8000e5c <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fc06 	bl	8000e5c <HAL_GetTick>
 8001650:	0002      	movs	r2, r0
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e272      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	4b47      	ldr	r3, [pc, #284]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2202      	movs	r2, #2
 8001664:	4013      	ands	r3, r2
 8001666:	d1f1      	bne.n	800164c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2208      	movs	r2, #8
 800166e:	4013      	ands	r3, r2
 8001670:	d036      	beq.n	80016e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d019      	beq.n	80016ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <HAL_RCC_OscConfig+0x338>)
 800167c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167e:	4b3f      	ldr	r3, [pc, #252]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001680:	2101      	movs	r1, #1
 8001682:	430a      	orrs	r2, r1
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001686:	f7ff fbe9 	bl	8000e5c <HAL_GetTick>
 800168a:	0003      	movs	r3, r0
 800168c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fbe4 	bl	8000e5c <HAL_GetTick>
 8001694:	0002      	movs	r2, r0
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e250      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	2202      	movs	r2, #2
 80016a8:	4013      	ands	r3, r2
 80016aa:	d0f1      	beq.n	8001690 <HAL_RCC_OscConfig+0x24c>
 80016ac:	e018      	b.n	80016e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80016b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016b2:	4b32      	ldr	r3, [pc, #200]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80016b4:	2101      	movs	r1, #1
 80016b6:	438a      	bics	r2, r1
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fbcf 	bl	8000e5c <HAL_GetTick>
 80016be:	0003      	movs	r3, r0
 80016c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c4:	f7ff fbca 	bl	8000e5c <HAL_GetTick>
 80016c8:	0002      	movs	r2, r0
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e236      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016da:	2202      	movs	r2, #2
 80016dc:	4013      	ands	r3, r2
 80016de:	d1f1      	bne.n	80016c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2204      	movs	r2, #4
 80016e6:	4013      	ands	r3, r2
 80016e8:	d100      	bne.n	80016ec <HAL_RCC_OscConfig+0x2a8>
 80016ea:	e0b5      	b.n	8001858 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ec:	231f      	movs	r3, #31
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_RCC_OscConfig+0x338>)
 80016f6:	69da      	ldr	r2, [r3, #28]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	055b      	lsls	r3, r3, #21
 80016fc:	4013      	ands	r3, r2
 80016fe:	d111      	bne.n	8001724 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001702:	69da      	ldr	r2, [r3, #28]
 8001704:	4b1d      	ldr	r3, [pc, #116]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0549      	lsls	r1, r1, #21
 800170a:	430a      	orrs	r2, r1
 800170c:	61da      	str	r2, [r3, #28]
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001710:	69da      	ldr	r2, [r3, #28]
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	055b      	lsls	r3, r3, #21
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800171c:	231f      	movs	r3, #31
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_RCC_OscConfig+0x344>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d11a      	bne.n	8001766 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_RCC_OscConfig+0x344>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_RCC_OscConfig+0x344>)
 8001736:	2180      	movs	r1, #128	; 0x80
 8001738:	0049      	lsls	r1, r1, #1
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173e:	f7ff fb8d 	bl	8000e5c <HAL_GetTick>
 8001742:	0003      	movs	r3, r0
 8001744:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001748:	f7ff fb88 	bl	8000e5c <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1f4      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175a:	4b0b      	ldr	r3, [pc, #44]	; (8001788 <HAL_RCC_OscConfig+0x344>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4013      	ands	r3, r2
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d10e      	bne.n	800178c <HAL_RCC_OscConfig+0x348>
 800176e:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001770:	6a1a      	ldr	r2, [r3, #32]
 8001772:	4b02      	ldr	r3, [pc, #8]	; (800177c <HAL_RCC_OscConfig+0x338>)
 8001774:	2101      	movs	r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	621a      	str	r2, [r3, #32]
 800177a:	e035      	b.n	80017e8 <HAL_RCC_OscConfig+0x3a4>
 800177c:	40021000 	.word	0x40021000
 8001780:	fffeffff 	.word	0xfffeffff
 8001784:	fffbffff 	.word	0xfffbffff
 8001788:	40007000 	.word	0x40007000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10c      	bne.n	80017ae <HAL_RCC_OscConfig+0x36a>
 8001794:	4bca      	ldr	r3, [pc, #808]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	4bc9      	ldr	r3, [pc, #804]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 800179a:	2101      	movs	r1, #1
 800179c:	438a      	bics	r2, r1
 800179e:	621a      	str	r2, [r3, #32]
 80017a0:	4bc7      	ldr	r3, [pc, #796]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	4bc6      	ldr	r3, [pc, #792]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017a6:	2104      	movs	r1, #4
 80017a8:	438a      	bics	r2, r1
 80017aa:	621a      	str	r2, [r3, #32]
 80017ac:	e01c      	b.n	80017e8 <HAL_RCC_OscConfig+0x3a4>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b05      	cmp	r3, #5
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x38c>
 80017b6:	4bc2      	ldr	r3, [pc, #776]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	4bc1      	ldr	r3, [pc, #772]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017bc:	2104      	movs	r1, #4
 80017be:	430a      	orrs	r2, r1
 80017c0:	621a      	str	r2, [r3, #32]
 80017c2:	4bbf      	ldr	r3, [pc, #764]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017c4:	6a1a      	ldr	r2, [r3, #32]
 80017c6:	4bbe      	ldr	r3, [pc, #760]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	621a      	str	r2, [r3, #32]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0x3a4>
 80017d0:	4bbb      	ldr	r3, [pc, #748]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	4bba      	ldr	r3, [pc, #744]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	438a      	bics	r2, r1
 80017da:	621a      	str	r2, [r3, #32]
 80017dc:	4bb8      	ldr	r3, [pc, #736]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017de:	6a1a      	ldr	r2, [r3, #32]
 80017e0:	4bb7      	ldr	r3, [pc, #732]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80017e2:	2104      	movs	r1, #4
 80017e4:	438a      	bics	r2, r1
 80017e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d014      	beq.n	800181a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb34 	bl	8000e5c <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	e009      	b.n	800180e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fb2f 	bl	8000e5c <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	4aaf      	ldr	r2, [pc, #700]	; (8001ac4 <HAL_RCC_OscConfig+0x680>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e19a      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180e:	4bac      	ldr	r3, [pc, #688]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	2202      	movs	r2, #2
 8001814:	4013      	ands	r3, r2
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x3b6>
 8001818:	e013      	b.n	8001842 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff fb1f 	bl	8000e5c <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001822:	e009      	b.n	8001838 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001824:	f7ff fb1a 	bl	8000e5c <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	4aa5      	ldr	r2, [pc, #660]	; (8001ac4 <HAL_RCC_OscConfig+0x680>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e185      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	4ba1      	ldr	r3, [pc, #644]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	2202      	movs	r2, #2
 800183e:	4013      	ands	r3, r2
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001842:	231f      	movs	r3, #31
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b9c      	ldr	r3, [pc, #624]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 800184e:	69da      	ldr	r2, [r3, #28]
 8001850:	4b9b      	ldr	r3, [pc, #620]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001852:	499d      	ldr	r1, [pc, #628]	; (8001ac8 <HAL_RCC_OscConfig+0x684>)
 8001854:	400a      	ands	r2, r1
 8001856:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2210      	movs	r2, #16
 800185e:	4013      	ands	r3, r2
 8001860:	d063      	beq.n	800192a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695b      	ldr	r3, [r3, #20]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d12a      	bne.n	80018c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800186a:	4b95      	ldr	r3, [pc, #596]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 800186c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186e:	4b94      	ldr	r3, [pc, #592]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001870:	2104      	movs	r1, #4
 8001872:	430a      	orrs	r2, r1
 8001874:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001876:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800187a:	4b91      	ldr	r3, [pc, #580]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 800187c:	2101      	movs	r1, #1
 800187e:	430a      	orrs	r2, r1
 8001880:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff faeb 	bl	8000e5c <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800188c:	f7ff fae6 	bl	8000e5c <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e152      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	2202      	movs	r2, #2
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0f1      	beq.n	800188c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018a8:	4b85      	ldr	r3, [pc, #532]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ac:	22f8      	movs	r2, #248	; 0xf8
 80018ae:	4393      	bics	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	00da      	lsls	r2, r3, #3
 80018b8:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	635a      	str	r2, [r3, #52]	; 0x34
 80018be:	e034      	b.n	800192a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	3305      	adds	r3, #5
 80018c6:	d111      	bne.n	80018ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018c8:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018ce:	2104      	movs	r1, #4
 80018d0:	438a      	bics	r2, r1
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d4:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	22f8      	movs	r2, #248	; 0xf8
 80018da:	4393      	bics	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	00da      	lsls	r2, r3, #3
 80018e4:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ea:	e01e      	b.n	800192a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018ec:	4b74      	ldr	r3, [pc, #464]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f0:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	2104      	movs	r1, #4
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018f8:	4b71      	ldr	r3, [pc, #452]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80018fe:	2101      	movs	r1, #1
 8001900:	438a      	bics	r2, r1
 8001902:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff faaa 	bl	8000e5c <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800190e:	f7ff faa5 	bl	8000e5c <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e111      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001920:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d1f1      	bne.n	800190e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2220      	movs	r2, #32
 8001930:	4013      	ands	r3, r2
 8001932:	d05c      	beq.n	80019ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001934:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	220c      	movs	r2, #12
 800193a:	4013      	ands	r3, r2
 800193c:	2b0c      	cmp	r3, #12
 800193e:	d00e      	beq.n	800195e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001940:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	220c      	movs	r2, #12
 8001946:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001948:	2b08      	cmp	r3, #8
 800194a:	d114      	bne.n	8001976 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800194c:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	23c0      	movs	r3, #192	; 0xc0
 8001952:	025b      	lsls	r3, r3, #9
 8001954:	401a      	ands	r2, r3
 8001956:	23c0      	movs	r3, #192	; 0xc0
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	429a      	cmp	r2, r3
 800195c:	d10b      	bne.n	8001976 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800195e:	4b58      	ldr	r3, [pc, #352]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	025b      	lsls	r3, r3, #9
 8001966:	4013      	ands	r3, r2
 8001968:	d040      	beq.n	80019ec <HAL_RCC_OscConfig+0x5a8>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d03c      	beq.n	80019ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0e6      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d01b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001982:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	0249      	lsls	r1, r1, #9
 8001988:	430a      	orrs	r2, r1
 800198a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff fa66 	bl	8000e5c <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001996:	f7ff fa61 	bl	8000e5c <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0cd      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80019aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	025b      	lsls	r3, r3, #9
 80019b0:	4013      	ands	r3, r2
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x552>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019b6:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80019b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80019bc:	4943      	ldr	r1, [pc, #268]	; (8001acc <HAL_RCC_OscConfig+0x688>)
 80019be:	400a      	ands	r2, r1
 80019c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c2:	f7ff fa4b 	bl	8000e5c <HAL_GetTick>
 80019c6:	0003      	movs	r3, r0
 80019c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019cc:	f7ff fa46 	bl	8000e5c <HAL_GetTick>
 80019d0:	0002      	movs	r2, r0
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e0b2      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019de:	4b38      	ldr	r3, [pc, #224]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80019e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	025b      	lsls	r3, r3, #9
 80019e6:	4013      	ands	r3, r2
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x588>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d100      	bne.n	80019f8 <HAL_RCC_OscConfig+0x5b4>
 80019f6:	e0a4      	b.n	8001b42 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f8:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	220c      	movs	r2, #12
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d100      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5c2>
 8001a04:	e078      	b.n	8001af8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d14c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	492e      	ldr	r1, [pc, #184]	; (8001ad0 <HAL_RCC_OscConfig+0x68c>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fa1f 	bl	8000e5c <HAL_GetTick>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff fa1a 	bl	8000e5c <HAL_GetTick>
 8001a28:	0002      	movs	r2, r0
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e086      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a36:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	049b      	lsls	r3, r3, #18
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	220f      	movs	r2, #15
 8001a48:	4393      	bics	r3, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a52:	430a      	orrs	r2, r1
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a56:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_RCC_OscConfig+0x690>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	0019      	movs	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	0449      	lsls	r1, r1, #17
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f9ed 	bl	8000e5c <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a88:	f7ff f9e8 	bl	8000e5c <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e054      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	2380      	movs	r3, #128	; 0x80
 8001aa0:	049b      	lsls	r3, r3, #18
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x644>
 8001aa6:	e04c      	b.n	8001b42 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_OscConfig+0x67c>)
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <HAL_RCC_OscConfig+0x68c>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f9d2 	bl	8000e5c <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abc:	e015      	b.n	8001aea <HAL_RCC_OscConfig+0x6a6>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	00001388 	.word	0x00001388
 8001ac8:	efffffff 	.word	0xefffffff
 8001acc:	fffeffff 	.word	0xfffeffff
 8001ad0:	feffffff 	.word	0xfeffffff
 8001ad4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff f9c0 	bl	8000e5c <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e02c      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <HAL_RCC_OscConfig+0x708>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	049b      	lsls	r3, r3, #18
 8001af2:	4013      	ands	r3, r2
 8001af4:	d1f0      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x694>
 8001af6:	e024      	b.n	8001b42 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e01f      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_RCC_OscConfig+0x708>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_OscConfig+0x708>)
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	23c0      	movs	r3, #192	; 0xc0
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	401a      	ands	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d10e      	bne.n	8001b3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	220f      	movs	r2, #15
 8001b24:	401a      	ands	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	23f0      	movs	r3, #240	; 0xf0
 8001b32:	039b      	lsls	r3, r3, #14
 8001b34:	401a      	ands	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	0018      	movs	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b008      	add	sp, #32
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0bf      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d911      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4393      	bics	r3, r2
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b84:	4b59      	ldr	r3, [pc, #356]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0a6      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d015      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d006      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001baa:	4b51      	ldr	r3, [pc, #324]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb0:	21e0      	movs	r1, #224	; 0xe0
 8001bb2:	00c9      	lsls	r1, r1, #3
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b4d      	ldr	r3, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	22f0      	movs	r2, #240	; 0xf0
 8001bbe:	4393      	bics	r3, r2
 8001bc0:	0019      	movs	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	4b4a      	ldr	r3, [pc, #296]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d04c      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	029b      	lsls	r3, r3, #10
 8001be6:	4013      	ands	r3, r2
 8001be8:	d120      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e07a      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	049b      	lsls	r3, r3, #18
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d114      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e06e      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c0e:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	025b      	lsls	r3, r3, #9
 8001c16:	4013      	ands	r3, r2
 8001c18:	d108      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e062      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e05b      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2c:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2203      	movs	r2, #3
 8001c32:	4393      	bics	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7ff f90c 	bl	8000e5c <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c48:	e009      	b.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7ff f907 	bl	8000e5c <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <HAL_RCC_ClockConfig+0x1a4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e042      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	220c      	movs	r2, #12
 8001c64:	401a      	ands	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1ec      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2201      	movs	r2, #1
 8001c76:	4013      	ands	r3, r2
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d211      	bcs.n	8001ca2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c90:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_RCC_ClockConfig+0x19c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2201      	movs	r2, #1
 8001c96:	4013      	ands	r3, r2
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e020      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d009      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a11      	ldr	r2, [pc, #68]	; (8001cf8 <HAL_RCC_ClockConfig+0x1a8>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	0019      	movs	r1, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cc0:	f000 f820 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cc4:	0001      	movs	r1, r0
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	220f      	movs	r2, #15
 8001cce:	4013      	ands	r3, r2
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x1ac>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	40da      	lsrs	r2, r3
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_RCC_ClockConfig+0x1b0>)
 8001cda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff f877 	bl	8000dd0 <HAL_InitTick>
  
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	00001388 	.word	0x00001388
 8001cf8:	fffff8ff 	.word	0xfffff8ff
 8001cfc:	08004040 	.word	0x08004040
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b08f      	sub	sp, #60	; 0x3c
 8001d08:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d0a:	2314      	movs	r3, #20
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	4a37      	ldr	r2, [pc, #220]	; (8001dec <HAL_RCC_GetSysClockFreq+0xe8>)
 8001d10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d12:	c313      	stmia	r3!, {r0, r1, r4}
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4a35      	ldr	r2, [pc, #212]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001d1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d1e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d20:	6812      	ldr	r2, [r2, #0]
 8001d22:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d40:	220c      	movs	r2, #12
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d006      	beq.n	8001d56 <HAL_RCC_GetSysClockFreq+0x52>
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d043      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xd0>
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d144      	bne.n	8001dda <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d50:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d54:	e044      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d58:	0c9b      	lsrs	r3, r3, #18
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2214      	movs	r2, #20
 8001d60:	18ba      	adds	r2, r7, r2
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	1d3a      	adds	r2, r7, #4
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d76:	23c0      	movs	r3, #192	; 0xc0
 8001d78:	025b      	lsls	r3, r3, #9
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d109      	bne.n	8001d98 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d86:	481c      	ldr	r0, [pc, #112]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d88:	f7fe f9bc 	bl	8000104 <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	001a      	movs	r2, r3
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	4353      	muls	r3, r2
 8001d94:	637b      	str	r3, [r7, #52]	; 0x34
 8001d96:	e01a      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d9a:	23c0      	movs	r3, #192	; 0xc0
 8001d9c:	025b      	lsls	r3, r3, #9
 8001d9e:	401a      	ands	r2, r3
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d109      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dac:	f7fe f9aa 	bl	8000104 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	001a      	movs	r2, r3
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	4353      	muls	r3, r2
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dba:	e008      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dbe:	480e      	ldr	r0, [pc, #56]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dc0:	f7fe f9a0 	bl	8000104 <__udivsi3>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	4353      	muls	r3, r2
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dd2:	e005      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dd8:	e002      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dde:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b00f      	add	sp, #60	; 0x3c
 8001de8:	bd90      	pop	{r4, r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	08004020 	.word	0x08004020
 8001df0:	08004030 	.word	0x08004030
 8001df4:	40021000 	.word	0x40021000
 8001df8:	007a1200 	.word	0x007a1200
 8001dfc:	02dc6c00 	.word	0x02dc6c00

08001e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	20000004 	.word	0x20000004

08001e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e18:	f7ff fff2 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e1c:	0001      	movs	r1, r0
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	2207      	movs	r2, #7
 8001e26:	4013      	ands	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	40d9      	lsrs	r1, r3
 8001e2e:	000b      	movs	r3, r1
}    
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	08004050 	.word	0x08004050

08001e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	025b      	lsls	r3, r3, #9
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d100      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e5c:	e08f      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e5e:	2317      	movs	r3, #23
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	055b      	lsls	r3, r3, #21
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d111      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	4b6c      	ldr	r3, [pc, #432]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e74:	69da      	ldr	r2, [r3, #28]
 8001e76:	4b6b      	ldr	r3, [pc, #428]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e78:	2180      	movs	r1, #128	; 0x80
 8001e7a:	0549      	lsls	r1, r1, #21
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	61da      	str	r2, [r3, #28]
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	055b      	lsls	r3, r3, #21
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2317      	movs	r3, #23
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b64      	ldr	r3, [pc, #400]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	; 0x80
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d11a      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b61      	ldr	r3, [pc, #388]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0049      	lsls	r1, r1, #1
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb0:	f7fe ffd4 	bl	8000e5c <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	e008      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7fe ffcf 	bl	8000e5c <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b64      	cmp	r3, #100	; 0x64
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e0a6      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	4b56      	ldr	r3, [pc, #344]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ed8:	4b52      	ldr	r3, [pc, #328]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d034      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	23c0      	movs	r3, #192	; 0xc0
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d02c      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001efa:	4b4a      	ldr	r3, [pc, #296]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0249      	lsls	r1, r1, #9
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f12:	4b44      	ldr	r3, [pc, #272]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	4b43      	ldr	r3, [pc, #268]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f18:	4945      	ldr	r1, [pc, #276]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff96 	bl	8000e5c <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	e009      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe ff91 	bl	8000e5c <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a3c      	ldr	r2, [pc, #240]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e067      	b.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f54:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f68:	2317      	movs	r3, #23
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d105      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f78:	492f      	ldr	r1, [pc, #188]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2201      	movs	r2, #1
 8001f84:	4013      	ands	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	4393      	bics	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d009      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fa6:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a24      	ldr	r2, [pc, #144]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	02db      	lsls	r3, r3, #11
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d009      	beq.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	2210      	movs	r2, #16
 8001fea:	4393      	bics	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4013      	ands	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	2240      	movs	r2, #64	; 0x40
 800200a:	4393      	bics	r3, r2
 800200c:	0019      	movs	r1, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002014:	430a      	orrs	r2, r1
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	b006      	add	sp, #24
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
 800202c:	fffffcff 	.word	0xfffffcff
 8002030:	fffeffff 	.word	0xfffeffff
 8002034:	00001388 	.word	0x00001388
 8002038:	efffffff 	.word	0xefffffff
 800203c:	fffcffff 	.word	0xfffcffff
 8002040:	fff3ffff 	.word	0xfff3ffff

08002044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0a8      	b.n	80021a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b00      	cmp	r3, #0
 800205c:	d109      	bne.n	8002072 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	2382      	movs	r3, #130	; 0x82
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	429a      	cmp	r2, r3
 8002068:	d009      	beq.n	800207e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
 8002070:	e005      	b.n	800207e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	225d      	movs	r2, #93	; 0x5d
 8002088:	5c9b      	ldrb	r3, [r3, r2]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	225c      	movs	r2, #92	; 0x5c
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f7fe fd6c 	bl	8000b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	225d      	movs	r2, #93	; 0x5d
 80020a4:	2102      	movs	r1, #2
 80020a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	23e0      	movs	r3, #224	; 0xe0
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d902      	bls.n	80020ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	e002      	b.n	80020d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	015b      	lsls	r3, r3, #5
 80020ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	23f0      	movs	r3, #240	; 0xf0
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	429a      	cmp	r2, r3
 80020da:	d008      	beq.n	80020ee <HAL_SPI_Init+0xaa>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	23e0      	movs	r3, #224	; 0xe0
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d002      	beq.n	80020ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	2382      	movs	r3, #130	; 0x82
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	401a      	ands	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6899      	ldr	r1, [r3, #8]
 80020fc:	2384      	movs	r3, #132	; 0x84
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	400b      	ands	r3, r1
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2102      	movs	r1, #2
 800210a:	400b      	ands	r3, r1
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	2101      	movs	r1, #1
 8002114:	400b      	ands	r3, r1
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6999      	ldr	r1, [r3, #24]
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	400b      	ands	r3, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2138      	movs	r1, #56	; 0x38
 800212a:	400b      	ands	r3, r1
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	400b      	ands	r3, r1
 8002136:	431a      	orrs	r2, r3
 8002138:	0011      	movs	r1, r2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800213e:	2380      	movs	r3, #128	; 0x80
 8002140:	019b      	lsls	r3, r3, #6
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	2204      	movs	r2, #4
 8002154:	401a      	ands	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2110      	movs	r1, #16
 800215c:	400b      	ands	r3, r1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002164:	2108      	movs	r1, #8
 8002166:	400b      	ands	r3, r1
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	23f0      	movs	r3, #240	; 0xf0
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	400b      	ands	r3, r1
 8002174:	431a      	orrs	r2, r3
 8002176:	0011      	movs	r1, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	401a      	ands	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4907      	ldr	r1, [pc, #28]	; (80021b0 <HAL_SPI_Init+0x16c>)
 8002194:	400a      	ands	r2, r1
 8002196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	225d      	movs	r2, #93	; 0x5d
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b004      	add	sp, #16
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	fffff7ff 	.word	0xfffff7ff

080021b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	1dbb      	adds	r3, r7, #6
 80021c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021c4:	231f      	movs	r3, #31
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	225c      	movs	r2, #92	; 0x5c
 80021d0:	5c9b      	ldrb	r3, [r3, r2]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_SPI_Transmit+0x26>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e140      	b.n	800245c <HAL_SPI_Transmit+0x2a8>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	225c      	movs	r2, #92	; 0x5c
 80021de:	2101      	movs	r1, #1
 80021e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021e2:	f7fe fe3b 	bl	8000e5c <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80021ea:	2316      	movs	r3, #22
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	1dba      	adds	r2, r7, #6
 80021f0:	8812      	ldrh	r2, [r2, #0]
 80021f2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	225d      	movs	r2, #93	; 0x5d
 80021f8:	5c9b      	ldrb	r3, [r3, r2]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d004      	beq.n	800220a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002200:	231f      	movs	r3, #31
 8002202:	18fb      	adds	r3, r7, r3
 8002204:	2202      	movs	r2, #2
 8002206:	701a      	strb	r2, [r3, #0]
    goto error;
 8002208:	e11d      	b.n	8002446 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <HAL_SPI_Transmit+0x64>
 8002210:	1dbb      	adds	r3, r7, #6
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d104      	bne.n	8002222 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002218:	231f      	movs	r3, #31
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002220:	e111      	b.n	8002446 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	225d      	movs	r2, #93	; 0x5d
 8002226:	2103      	movs	r1, #3
 8002228:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1dba      	adds	r2, r7, #6
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1dba      	adds	r2, r7, #6
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2244      	movs	r2, #68	; 0x44
 8002250:	2100      	movs	r1, #0
 8002252:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2246      	movs	r2, #70	; 0x46
 8002258:	2100      	movs	r1, #0
 800225a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	429a      	cmp	r2, r3
 8002272:	d110      	bne.n	8002296 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	438a      	bics	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	01c9      	lsls	r1, r1, #7
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	4013      	ands	r3, r2
 80022a0:	2b40      	cmp	r3, #64	; 0x40
 80022a2:	d007      	beq.n	80022b4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2140      	movs	r1, #64	; 0x40
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	23e0      	movs	r3, #224	; 0xe0
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	429a      	cmp	r2, r3
 80022be:	d94e      	bls.n	800235e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_SPI_Transmit+0x11e>
 80022c8:	2316      	movs	r3, #22
 80022ca:	18fb      	adds	r3, r7, r3
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d13f      	bne.n	8002352 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	1c9a      	adds	r2, r3, #2
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022f6:	e02c      	b.n	8002352 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d112      	bne.n	800232c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	1c9a      	adds	r2, r3, #2
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800232a:	e012      	b.n	8002352 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800232c:	f7fe fd96 	bl	8000e5c <HAL_GetTick>
 8002330:	0002      	movs	r2, r0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d802      	bhi.n	8002342 <HAL_SPI_Transmit+0x18e>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_SPI_Transmit+0x194>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d104      	bne.n	8002352 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002348:	231f      	movs	r3, #31
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	2203      	movs	r2, #3
 800234e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002350:	e079      	b.n	8002446 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1cd      	bne.n	80022f8 <HAL_SPI_Transmit+0x144>
 800235c:	e04f      	b.n	80023fe <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d004      	beq.n	8002370 <HAL_SPI_Transmit+0x1bc>
 8002366:	2316      	movs	r3, #22
 8002368:	18fb      	adds	r3, r7, r3
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d141      	bne.n	80023f4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	330c      	adds	r3, #12
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238c:	b29b      	uxth	r3, r3
 800238e:	3b01      	subs	r3, #1
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002396:	e02d      	b.n	80023f4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2202      	movs	r2, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d113      	bne.n	80023ce <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	330c      	adds	r3, #12
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023cc:	e012      	b.n	80023f4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ce:	f7fe fd45 	bl	8000e5c <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d802      	bhi.n	80023e4 <HAL_SPI_Transmit+0x230>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	d102      	bne.n	80023ea <HAL_SPI_Transmit+0x236>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80023ea:	231f      	movs	r3, #31
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
          goto error;
 80023f2:	e028      	b.n	8002446 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1cc      	bne.n	8002398 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 fccf 	bl	8002da8 <SPI_EndRxTxTransaction>
 800240a:	1e03      	subs	r3, r0, #0
 800240c:	d002      	beq.n	8002414 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800243a:	231f      	movs	r3, #31
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e000      	b.n	8002446 <HAL_SPI_Transmit+0x292>
  }

error:
 8002444:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	225d      	movs	r2, #93	; 0x5d
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	225c      	movs	r2, #92	; 0x5c
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002456:	231f      	movs	r3, #31
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	781b      	ldrb	r3, [r3, #0]
}
 800245c:	0018      	movs	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	b008      	add	sp, #32
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b590      	push	{r4, r7, lr}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002474:	2317      	movs	r3, #23
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	2382      	movs	r3, #130	; 0x82
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	429a      	cmp	r2, r3
 8002486:	d113      	bne.n	80024b0 <HAL_SPI_Receive+0x4c>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	225d      	movs	r2, #93	; 0x5d
 8002494:	2104      	movs	r1, #4
 8002496:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002498:	1dbb      	adds	r3, r7, #6
 800249a:	881c      	ldrh	r4, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	0023      	movs	r3, r4
 80024a8:	f000 f928 	bl	80026fc <HAL_SPI_TransmitReceive>
 80024ac:	0003      	movs	r3, r0
 80024ae:	e11c      	b.n	80026ea <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	225c      	movs	r2, #92	; 0x5c
 80024b4:	5c9b      	ldrb	r3, [r3, r2]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_SPI_Receive+0x5a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e115      	b.n	80026ea <HAL_SPI_Receive+0x286>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	225c      	movs	r2, #92	; 0x5c
 80024c2:	2101      	movs	r1, #1
 80024c4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024c6:	f7fe fcc9 	bl	8000e5c <HAL_GetTick>
 80024ca:	0003      	movs	r3, r0
 80024cc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	225d      	movs	r2, #93	; 0x5d
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d004      	beq.n	80024e4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80024da:	2317      	movs	r3, #23
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
    goto error;
 80024e2:	e0f7      	b.n	80026d4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_SPI_Receive+0x8e>
 80024ea:	1dbb      	adds	r3, r7, #6
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80024f2:	2317      	movs	r3, #23
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80024fa:	e0eb      	b.n	80026d4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	225d      	movs	r2, #93	; 0x5d
 8002500:	2104      	movs	r1, #4
 8002502:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1dba      	adds	r2, r7, #6
 8002514:	2144      	movs	r1, #68	; 0x44
 8002516:	8812      	ldrh	r2, [r2, #0]
 8002518:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1dba      	adds	r2, r7, #6
 800251e:	2146      	movs	r1, #70	; 0x46
 8002520:	8812      	ldrh	r2, [r2, #0]
 8002522:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	23e0      	movs	r3, #224	; 0xe0
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	429a      	cmp	r2, r3
 800254c:	d908      	bls.n	8002560 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4966      	ldr	r1, [pc, #408]	; (80026f4 <HAL_SPI_Receive+0x290>)
 800255a:	400a      	ands	r2, r1
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	e008      	b.n	8002572 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0149      	lsls	r1, r1, #5
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	2380      	movs	r3, #128	; 0x80
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	429a      	cmp	r2, r3
 800257c:	d10f      	bne.n	800259e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2140      	movs	r1, #64	; 0x40
 800258a:	438a      	bics	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4957      	ldr	r1, [pc, #348]	; (80026f8 <HAL_SPI_Receive+0x294>)
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2240      	movs	r2, #64	; 0x40
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d007      	beq.n	80025bc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2140      	movs	r1, #64	; 0x40
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	23e0      	movs	r3, #224	; 0xe0
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d900      	bls.n	80025ca <HAL_SPI_Receive+0x166>
 80025c8:	e069      	b.n	800269e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025ca:	e031      	b.n	8002630 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d117      	bne.n	800260a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	001a      	movs	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2246      	movs	r2, #70	; 0x46
 80025fa:	5a9b      	ldrh	r3, [r3, r2]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b299      	uxth	r1, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2246      	movs	r2, #70	; 0x46
 8002606:	5299      	strh	r1, [r3, r2]
 8002608:	e012      	b.n	8002630 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800260a:	f7fe fc27 	bl	8000e5c <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d802      	bhi.n	8002620 <HAL_SPI_Receive+0x1bc>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	d102      	bne.n	8002626 <HAL_SPI_Receive+0x1c2>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d104      	bne.n	8002630 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002626:	2317      	movs	r3, #23
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
          goto error;
 800262e:	e051      	b.n	80026d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2246      	movs	r2, #70	; 0x46
 8002634:	5a9b      	ldrh	r3, [r3, r2]
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1c7      	bne.n	80025cc <HAL_SPI_Receive+0x168>
 800263c:	e035      	b.n	80026aa <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	2b01      	cmp	r3, #1
 800264a:	d115      	bne.n	8002678 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	b292      	uxth	r2, r2
 8002658:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	1c9a      	adds	r2, r3, #2
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2246      	movs	r2, #70	; 0x46
 8002668:	5a9b      	ldrh	r3, [r3, r2]
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b299      	uxth	r1, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2246      	movs	r2, #70	; 0x46
 8002674:	5299      	strh	r1, [r3, r2]
 8002676:	e012      	b.n	800269e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002678:	f7fe fbf0 	bl	8000e5c <HAL_GetTick>
 800267c:	0002      	movs	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d802      	bhi.n	800268e <HAL_SPI_Receive+0x22a>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	d102      	bne.n	8002694 <HAL_SPI_Receive+0x230>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002694:	2317      	movs	r3, #23
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2203      	movs	r2, #3
 800269a:	701a      	strb	r2, [r3, #0]
          goto error;
 800269c:	e01a      	b.n	80026d4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2246      	movs	r2, #70	; 0x46
 80026a2:	5a9b      	ldrh	r3, [r3, r2]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1c9      	bne.n	800263e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	6839      	ldr	r1, [r7, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fb1b 	bl	8002cec <SPI_EndRxTransaction>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d002      	beq.n	80026c0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80026c8:	2317      	movs	r3, #23
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e000      	b.n	80026d4 <HAL_SPI_Receive+0x270>
  }

error :
 80026d2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	225d      	movs	r2, #93	; 0x5d
 80026d8:	2101      	movs	r1, #1
 80026da:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	225c      	movs	r2, #92	; 0x5c
 80026e0:	2100      	movs	r1, #0
 80026e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026e4:	2317      	movs	r3, #23
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	781b      	ldrb	r3, [r3, #0]
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b007      	add	sp, #28
 80026f0:	bd90      	pop	{r4, r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	ffffefff 	.word	0xffffefff
 80026f8:	ffffbfff 	.word	0xffffbfff

080026fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	001a      	movs	r2, r3
 800270a:	1cbb      	adds	r3, r7, #2
 800270c:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800270e:	2301      	movs	r3, #1
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002712:	2323      	movs	r3, #35	; 0x23
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	225c      	movs	r2, #92	; 0x5c
 800271e:	5c9b      	ldrb	r3, [r3, r2]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_SPI_TransmitReceive+0x2c>
 8002724:	2302      	movs	r3, #2
 8002726:	e1b6      	b.n	8002a96 <HAL_SPI_TransmitReceive+0x39a>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	225c      	movs	r2, #92	; 0x5c
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002730:	f7fe fb94 	bl	8000e5c <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002738:	201b      	movs	r0, #27
 800273a:	183b      	adds	r3, r7, r0
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	215d      	movs	r1, #93	; 0x5d
 8002740:	5c52      	ldrb	r2, [r2, r1]
 8002742:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800274a:	2312      	movs	r3, #18
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	1cba      	adds	r2, r7, #2
 8002750:	8812      	ldrh	r2, [r2, #0]
 8002752:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002754:	183b      	adds	r3, r7, r0
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d012      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x86>
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	2382      	movs	r3, #130	; 0x82
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	429a      	cmp	r2, r3
 8002764:	d108      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d104      	bne.n	8002778 <HAL_SPI_TransmitReceive+0x7c>
 800276e:	231b      	movs	r3, #27
 8002770:	18fb      	adds	r3, r7, r3
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d004      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8002778:	2323      	movs	r3, #35	; 0x23
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002780:	e17e      	b.n	8002a80 <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_SPI_TransmitReceive+0x9a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_SPI_TransmitReceive+0x9a>
 800278e:	1cbb      	adds	r3, r7, #2
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 8002796:	2323      	movs	r3, #35	; 0x23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
    goto error;
 800279e:	e16f      	b.n	8002a80 <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	225d      	movs	r2, #93	; 0x5d
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b04      	cmp	r3, #4
 80027aa:	d003      	beq.n	80027b4 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	225d      	movs	r2, #93	; 0x5d
 80027b0:	2105      	movs	r1, #5
 80027b2:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1cba      	adds	r2, r7, #2
 80027c4:	2146      	movs	r1, #70	; 0x46
 80027c6:	8812      	ldrh	r2, [r2, #0]
 80027c8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1cba      	adds	r2, r7, #2
 80027ce:	2144      	movs	r1, #68	; 0x44
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1cba      	adds	r2, r7, #2
 80027de:	8812      	ldrh	r2, [r2, #0]
 80027e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1cba      	adds	r2, r7, #2
 80027e6:	8812      	ldrh	r2, [r2, #0]
 80027e8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	23e0      	movs	r3, #224	; 0xe0
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	429a      	cmp	r2, r3
 8002800:	d908      	bls.n	8002814 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	49a4      	ldr	r1, [pc, #656]	; (8002aa0 <HAL_SPI_TransmitReceive+0x3a4>)
 800280e:	400a      	ands	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	e008      	b.n	8002826 <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0149      	lsls	r1, r1, #5
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2240      	movs	r2, #64	; 0x40
 800282e:	4013      	ands	r3, r2
 8002830:	2b40      	cmp	r3, #64	; 0x40
 8002832:	d007      	beq.n	8002844 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2140      	movs	r1, #64	; 0x40
 8002840:	430a      	orrs	r2, r1
 8002842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	23e0      	movs	r3, #224	; 0xe0
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	429a      	cmp	r2, r3
 800284e:	d800      	bhi.n	8002852 <HAL_SPI_TransmitReceive+0x156>
 8002850:	e07f      	b.n	8002952 <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x16a>
 800285a:	2312      	movs	r3, #18
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d000      	beq.n	8002866 <HAL_SPI_TransmitReceive+0x16a>
 8002864:	e069      	b.n	800293a <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	1c9a      	adds	r2, r3, #2
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800288a:	e056      	b.n	800293a <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2202      	movs	r2, #2
 8002894:	4013      	ands	r3, r2
 8002896:	2b02      	cmp	r3, #2
 8002898:	d11b      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x1d6>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d016      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0x1d6>
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d113      	bne.n	80028d2 <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	881a      	ldrh	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	1c9a      	adds	r2, r3, #2
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2201      	movs	r2, #1
 80028da:	4013      	ands	r3, r2
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d11c      	bne.n	800291a <HAL_SPI_TransmitReceive+0x21e>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2246      	movs	r2, #70	; 0x46
 80028e4:	5a9b      	ldrh	r3, [r3, r2]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d016      	beq.n	800291a <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	b292      	uxth	r2, r2
 80028f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2246      	movs	r2, #70	; 0x46
 8002908:	5a9b      	ldrh	r3, [r3, r2]
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b299      	uxth	r1, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2246      	movs	r2, #70	; 0x46
 8002914:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002916:	2301      	movs	r3, #1
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800291a:	f7fe fa9f 	bl	8000e5c <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002926:	429a      	cmp	r2, r3
 8002928:	d807      	bhi.n	800293a <HAL_SPI_TransmitReceive+0x23e>
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	3301      	adds	r3, #1
 800292e:	d004      	beq.n	800293a <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 8002930:	2323      	movs	r3, #35	; 0x23
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	2203      	movs	r2, #3
 8002936:	701a      	strb	r2, [r3, #0]
        goto error;
 8002938:	e0a2      	b.n	8002a80 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1a3      	bne.n	800288c <HAL_SPI_TransmitReceive+0x190>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2246      	movs	r2, #70	; 0x46
 8002948:	5a9b      	ldrh	r3, [r3, r2]
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d19d      	bne.n	800288c <HAL_SPI_TransmitReceive+0x190>
 8002950:	e085      	b.n	8002a5e <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x26a>
 800295a:	2312      	movs	r3, #18
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d000      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x26a>
 8002964:	e070      	b.n	8002a48 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800298c:	e05c      	b.n	8002a48 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2202      	movs	r2, #2
 8002996:	4013      	ands	r3, r2
 8002998:	2b02      	cmp	r3, #2
 800299a:	d11c      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x2da>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d017      	beq.n	80029d6 <HAL_SPI_TransmitReceive+0x2da>
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d114      	bne.n	80029d6 <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	330c      	adds	r3, #12
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2201      	movs	r2, #1
 80029de:	4013      	ands	r3, r2
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d11e      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x326>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2246      	movs	r2, #70	; 0x46
 80029e8:	5a9b      	ldrh	r3, [r3, r2]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d018      	beq.n	8002a22 <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	001a      	movs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2246      	movs	r2, #70	; 0x46
 8002a10:	5a9b      	ldrh	r3, [r3, r2]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b299      	uxth	r1, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2246      	movs	r2, #70	; 0x46
 8002a1c:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a22:	f7fe fa1b 	bl	8000e5c <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d802      	bhi.n	8002a38 <HAL_SPI_TransmitReceive+0x33c>
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	3301      	adds	r3, #1
 8002a36:	d102      	bne.n	8002a3e <HAL_SPI_TransmitReceive+0x342>
 8002a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d104      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002a3e:	2323      	movs	r3, #35	; 0x23
 8002a40:	18fb      	adds	r3, r7, r3
 8002a42:	2203      	movs	r2, #3
 8002a44:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a46:	e01b      	b.n	8002a80 <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d19d      	bne.n	800298e <HAL_SPI_TransmitReceive+0x292>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2246      	movs	r2, #70	; 0x46
 8002a56:	5a9b      	ldrh	r3, [r3, r2]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d197      	bne.n	800298e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a5e:	69fa      	ldr	r2, [r7, #28]
 8002a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0018      	movs	r0, r3
 8002a66:	f000 f99f 	bl	8002da8 <SPI_EndRxTxTransaction>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8002a6e:	2323      	movs	r3, #35	; 0x23
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	661a      	str	r2, [r3, #96]	; 0x60
 8002a7c:	e000      	b.n	8002a80 <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8002a7e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	225d      	movs	r2, #93	; 0x5d
 8002a84:	2101      	movs	r1, #1
 8002a86:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	225c      	movs	r2, #92	; 0x5c
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a90:	2323      	movs	r3, #35	; 0x23
 8002a92:	18fb      	adds	r3, r7, r3
 8002a94:	781b      	ldrb	r3, [r3, #0]
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b00a      	add	sp, #40	; 0x28
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	ffffefff 	.word	0xffffefff

08002aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	1dfb      	adds	r3, r7, #7
 8002ab2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ab4:	f7fe f9d2 	bl	8000e5c <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	18d3      	adds	r3, r2, r3
 8002ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ac4:	f7fe f9ca 	bl	8000e5c <HAL_GetTick>
 8002ac8:	0003      	movs	r3, r0
 8002aca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002acc:	4b3a      	ldr	r3, [pc, #232]	; (8002bb8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	015b      	lsls	r3, r3, #5
 8002ad2:	0d1b      	lsrs	r3, r3, #20
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	4353      	muls	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ada:	e058      	b.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	d055      	beq.n	8002b8e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ae2:	f7fe f9bb 	bl	8000e5c <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d902      	bls.n	8002af8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d142      	bne.n	8002b7e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	21e0      	movs	r1, #224	; 0xe0
 8002b04:	438a      	bics	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	2382      	movs	r3, #130	; 0x82
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d113      	bne.n	8002b3c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d005      	beq.n	8002b2c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d107      	bne.n	8002b3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2140      	movs	r1, #64	; 0x40
 8002b38:	438a      	bics	r2, r1
 8002b3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	019b      	lsls	r3, r3, #6
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d110      	bne.n	8002b6a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	491a      	ldr	r1, [pc, #104]	; (8002bbc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002b54:	400a      	ands	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2180      	movs	r1, #128	; 0x80
 8002b64:	0189      	lsls	r1, r1, #6
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	225d      	movs	r2, #93	; 0x5d
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	225c      	movs	r2, #92	; 0x5c
 8002b76:	2100      	movs	r1, #0
 8002b78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e017      	b.n	8002bae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	425a      	negs	r2, r3
 8002b9e:	4153      	adcs	r3, r2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	1dfb      	adds	r3, r7, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d197      	bne.n	8002adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b008      	add	sp, #32
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	20000004 	.word	0x20000004
 8002bbc:	ffffdfff 	.word	0xffffdfff

08002bc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bce:	f7fe f945 	bl	8000e5c <HAL_GetTick>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	18d3      	adds	r3, r2, r3
 8002bdc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bde:	f7fe f93d 	bl	8000e5c <HAL_GetTick>
 8002be2:	0003      	movs	r3, r0
 8002be4:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002be6:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	0013      	movs	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	00da      	lsls	r2, r3, #3
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	0d1b      	lsrs	r3, r3, #20
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	4353      	muls	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002bfc:	e064      	b.n	8002cc8 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	23c0      	movs	r3, #192	; 0xc0
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d106      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0x56>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	330c      	adds	r3, #12
 8002c14:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d055      	beq.n	8002cc8 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c1c:	f7fe f91e 	bl	8000e5c <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d902      	bls.n	8002c32 <SPI_WaitFifoStateUntilTimeout+0x72>
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d142      	bne.n	8002cb8 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	21e0      	movs	r1, #224	; 0xe0
 8002c3e:	438a      	bics	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	2382      	movs	r3, #130	; 0x82
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d113      	bne.n	8002c76 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d005      	beq.n	8002c66 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d107      	bne.n	8002c76 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	438a      	bics	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d110      	bne.n	8002ca4 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2180      	movs	r1, #128	; 0x80
 8002c9e:	0189      	lsls	r1, r1, #6
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	225d      	movs	r2, #93	; 0x5d
 8002ca8:	2101      	movs	r1, #1
 8002caa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	225c      	movs	r2, #92	; 0x5c
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e010      	b.n	8002cda <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d192      	bne.n	8002bfe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b008      	add	sp, #32
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	20000004 	.word	0x20000004
 8002ce8:	ffffdfff 	.word	0xffffdfff

08002cec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af02      	add	r7, sp, #8
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	2382      	movs	r3, #130	; 0x82
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d113      	bne.n	8002d2c <SPI_EndRxTransaction+0x40>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d005      	beq.n	8002d1c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d107      	bne.n	8002d2c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2140      	movs	r1, #64	; 0x40
 8002d28:	438a      	bics	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	0013      	movs	r3, r2
 8002d36:	2200      	movs	r2, #0
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	f7ff feb3 	bl	8002aa4 <SPI_WaitFlagStateUntilTimeout>
 8002d3e:	1e03      	subs	r3, r0, #0
 8002d40:	d007      	beq.n	8002d52 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	2220      	movs	r2, #32
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e026      	b.n	8002da0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	2382      	movs	r3, #130	; 0x82
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d11f      	bne.n	8002d9e <SPI_EndRxTransaction+0xb2>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d005      	beq.n	8002d76 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689a      	ldr	r2, [r3, #8]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d113      	bne.n	8002d9e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	23c0      	movs	r3, #192	; 0xc0
 8002d7a:	00d9      	lsls	r1, r3, #3
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	0013      	movs	r3, r2
 8002d84:	2200      	movs	r2, #0
 8002d86:	f7ff ff1b 	bl	8002bc0 <SPI_WaitFifoStateUntilTimeout>
 8002d8a:	1e03      	subs	r3, r0, #0
 8002d8c:	d007      	beq.n	8002d9e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	2220      	movs	r2, #32
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e000      	b.n	8002da0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b004      	add	sp, #16
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	23c0      	movs	r3, #192	; 0xc0
 8002db8:	0159      	lsls	r1, r3, #5
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	0013      	movs	r3, r2
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f7ff fefc 	bl	8002bc0 <SPI_WaitFifoStateUntilTimeout>
 8002dc8:	1e03      	subs	r3, r0, #0
 8002dca:	d007      	beq.n	8002ddc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e027      	b.n	8002e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	0013      	movs	r3, r2
 8002de6:	2200      	movs	r2, #0
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	f7ff fe5b 	bl	8002aa4 <SPI_WaitFlagStateUntilTimeout>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d007      	beq.n	8002e02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002df6:	2220      	movs	r2, #32
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e014      	b.n	8002e2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	23c0      	movs	r3, #192	; 0xc0
 8002e06:	00d9      	lsls	r1, r3, #3
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	0013      	movs	r3, r2
 8002e10:	2200      	movs	r2, #0
 8002e12:	f7ff fed5 	bl	8002bc0 <SPI_WaitFifoStateUntilTimeout>
 8002e16:	1e03      	subs	r3, r0, #0
 8002e18:	d007      	beq.n	8002e2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1e:	2220      	movs	r2, #32
 8002e20:	431a      	orrs	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e000      	b.n	8002e2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e044      	b.n	8002ed0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d107      	bne.n	8002e5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2274      	movs	r2, #116	; 0x74
 8002e52:	2100      	movs	r1, #0
 8002e54:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7fd fed9 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2224      	movs	r2, #36	; 0x24
 8002e62:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2101      	movs	r1, #1
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	0018      	movs	r0, r3
 8002e78:	f000 f8da 	bl	8003030 <UART_SetConfig>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e024      	b.n	8002ed0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f000 fab3 	bl	80033fc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	490d      	ldr	r1, [pc, #52]	; (8002ed8 <HAL_UART_Init+0xa4>)
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	212a      	movs	r1, #42	; 0x2a
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 fb4b 	bl	8003564 <UART_CheckIdleState>
 8002ece:	0003      	movs	r3, r0
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	ffffb7ff 	.word	0xffffb7ff

08002edc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af02      	add	r7, sp, #8
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	603b      	str	r3, [r7, #0]
 8002ee8:	1dbb      	adds	r3, r7, #6
 8002eea:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d000      	beq.n	8002ef6 <HAL_UART_Transmit+0x1a>
 8002ef4:	e096      	b.n	8003024 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_UART_Transmit+0x28>
 8002efc:	1dbb      	adds	r3, r7, #6
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e08e      	b.n	8003026 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	015b      	lsls	r3, r3, #5
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d109      	bne.n	8002f28 <HAL_UART_Transmit+0x4c>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4013      	ands	r3, r2
 8002f22:	d001      	beq.n	8002f28 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e07e      	b.n	8003026 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2274      	movs	r2, #116	; 0x74
 8002f2c:	5c9b      	ldrb	r3, [r3, r2]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d101      	bne.n	8002f36 <HAL_UART_Transmit+0x5a>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e077      	b.n	8003026 <HAL_UART_Transmit+0x14a>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2274      	movs	r2, #116	; 0x74
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	2100      	movs	r1, #0
 8002f44:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f4c:	f7fd ff86 	bl	8000e5c <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1dba      	adds	r2, r7, #6
 8002f58:	2150      	movs	r1, #80	; 0x50
 8002f5a:	8812      	ldrh	r2, [r2, #0]
 8002f5c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1dba      	adds	r2, r7, #6
 8002f62:	2152      	movs	r1, #82	; 0x52
 8002f64:	8812      	ldrh	r2, [r2, #0]
 8002f66:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	2380      	movs	r3, #128	; 0x80
 8002f6e:	015b      	lsls	r3, r3, #5
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d108      	bne.n	8002f86 <HAL_UART_Transmit+0xaa>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	e003      	b.n	8002f8e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2274      	movs	r2, #116	; 0x74
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002f96:	e02d      	b.n	8002ff4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	0013      	movs	r3, r2
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2180      	movs	r1, #128	; 0x80
 8002fa6:	f000 fb27 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8002faa:	1e03      	subs	r3, r0, #0
 8002fac:	d001      	beq.n	8002fb2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e039      	b.n	8003026 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	05d2      	lsls	r2, r2, #23
 8002fc2:	0dd2      	lsrs	r2, r2, #23
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	3302      	adds	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
 8002fce:	e008      	b.n	8002fe2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b292      	uxth	r2, r2
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2252      	movs	r2, #82	; 0x52
 8002fe6:	5a9b      	ldrh	r3, [r3, r2]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b299      	uxth	r1, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2252      	movs	r2, #82	; 0x52
 8002ff2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2252      	movs	r2, #82	; 0x52
 8002ff8:	5a9b      	ldrh	r3, [r3, r2]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1cb      	bne.n	8002f98 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	0013      	movs	r3, r2
 800300a:	2200      	movs	r2, #0
 800300c:	2140      	movs	r1, #64	; 0x40
 800300e:	f000 faf3 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8003012:	1e03      	subs	r3, r0, #0
 8003014:	d001      	beq.n	800301a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e005      	b.n	8003026 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	e000      	b.n	8003026 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003024:	2302      	movs	r3, #2
  }
}
 8003026:	0018      	movs	r0, r3
 8003028:	46bd      	mov	sp, r7
 800302a:	b008      	add	sp, #32
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003038:	231e      	movs	r3, #30
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4abd      	ldr	r2, [pc, #756]	; (8003354 <UART_SetConfig+0x324>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	4ab8      	ldr	r2, [pc, #736]	; (8003358 <UART_SetConfig+0x328>)
 8003076:	4013      	ands	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4aaf      	ldr	r2, [pc, #700]	; (800335c <UART_SetConfig+0x32c>)
 800309e:	4013      	ands	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4aab      	ldr	r2, [pc, #684]	; (8003360 <UART_SetConfig+0x330>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d125      	bne.n	8003102 <UART_SetConfig+0xd2>
 80030b6:	4bab      	ldr	r3, [pc, #684]	; (8003364 <UART_SetConfig+0x334>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	2203      	movs	r2, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d00f      	beq.n	80030e2 <UART_SetConfig+0xb2>
 80030c2:	d304      	bcc.n	80030ce <UART_SetConfig+0x9e>
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d011      	beq.n	80030ec <UART_SetConfig+0xbc>
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d005      	beq.n	80030d8 <UART_SetConfig+0xa8>
 80030cc:	e013      	b.n	80030f6 <UART_SetConfig+0xc6>
 80030ce:	231f      	movs	r3, #31
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2200      	movs	r2, #0
 80030d4:	701a      	strb	r2, [r3, #0]
 80030d6:	e0ba      	b.n	800324e <UART_SetConfig+0x21e>
 80030d8:	231f      	movs	r3, #31
 80030da:	18fb      	adds	r3, r7, r3
 80030dc:	2202      	movs	r2, #2
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e0b5      	b.n	800324e <UART_SetConfig+0x21e>
 80030e2:	231f      	movs	r3, #31
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	2204      	movs	r2, #4
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e0b0      	b.n	800324e <UART_SetConfig+0x21e>
 80030ec:	231f      	movs	r3, #31
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2208      	movs	r2, #8
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	e0ab      	b.n	800324e <UART_SetConfig+0x21e>
 80030f6:	231f      	movs	r3, #31
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	2210      	movs	r2, #16
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	46c0      	nop			; (mov r8, r8)
 8003100:	e0a5      	b.n	800324e <UART_SetConfig+0x21e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a98      	ldr	r2, [pc, #608]	; (8003368 <UART_SetConfig+0x338>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d132      	bne.n	8003172 <UART_SetConfig+0x142>
 800310c:	4b95      	ldr	r3, [pc, #596]	; (8003364 <UART_SetConfig+0x334>)
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	23c0      	movs	r3, #192	; 0xc0
 8003112:	029b      	lsls	r3, r3, #10
 8003114:	4013      	ands	r3, r2
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	0252      	lsls	r2, r2, #9
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <UART_SetConfig+0x122>
 800311e:	2280      	movs	r2, #128	; 0x80
 8003120:	0252      	lsls	r2, r2, #9
 8003122:	4293      	cmp	r3, r2
 8003124:	d802      	bhi.n	800312c <UART_SetConfig+0xfc>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <UART_SetConfig+0x10e>
 800312a:	e01c      	b.n	8003166 <UART_SetConfig+0x136>
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	0292      	lsls	r2, r2, #10
 8003130:	4293      	cmp	r3, r2
 8003132:	d013      	beq.n	800315c <UART_SetConfig+0x12c>
 8003134:	22c0      	movs	r2, #192	; 0xc0
 8003136:	0292      	lsls	r2, r2, #10
 8003138:	4293      	cmp	r3, r2
 800313a:	d005      	beq.n	8003148 <UART_SetConfig+0x118>
 800313c:	e013      	b.n	8003166 <UART_SetConfig+0x136>
 800313e:	231f      	movs	r3, #31
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	e082      	b.n	800324e <UART_SetConfig+0x21e>
 8003148:	231f      	movs	r3, #31
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e07d      	b.n	800324e <UART_SetConfig+0x21e>
 8003152:	231f      	movs	r3, #31
 8003154:	18fb      	adds	r3, r7, r3
 8003156:	2204      	movs	r2, #4
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e078      	b.n	800324e <UART_SetConfig+0x21e>
 800315c:	231f      	movs	r3, #31
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2208      	movs	r2, #8
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e073      	b.n	800324e <UART_SetConfig+0x21e>
 8003166:	231f      	movs	r3, #31
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	2210      	movs	r2, #16
 800316c:	701a      	strb	r2, [r3, #0]
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	e06d      	b.n	800324e <UART_SetConfig+0x21e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7d      	ldr	r2, [pc, #500]	; (800336c <UART_SetConfig+0x33c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d132      	bne.n	80031e2 <UART_SetConfig+0x1b2>
 800317c:	4b79      	ldr	r3, [pc, #484]	; (8003364 <UART_SetConfig+0x334>)
 800317e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003180:	23c0      	movs	r3, #192	; 0xc0
 8003182:	031b      	lsls	r3, r3, #12
 8003184:	4013      	ands	r3, r2
 8003186:	2280      	movs	r2, #128	; 0x80
 8003188:	02d2      	lsls	r2, r2, #11
 800318a:	4293      	cmp	r3, r2
 800318c:	d019      	beq.n	80031c2 <UART_SetConfig+0x192>
 800318e:	2280      	movs	r2, #128	; 0x80
 8003190:	02d2      	lsls	r2, r2, #11
 8003192:	4293      	cmp	r3, r2
 8003194:	d802      	bhi.n	800319c <UART_SetConfig+0x16c>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <UART_SetConfig+0x17e>
 800319a:	e01c      	b.n	80031d6 <UART_SetConfig+0x1a6>
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	0312      	lsls	r2, r2, #12
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d013      	beq.n	80031cc <UART_SetConfig+0x19c>
 80031a4:	22c0      	movs	r2, #192	; 0xc0
 80031a6:	0312      	lsls	r2, r2, #12
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d005      	beq.n	80031b8 <UART_SetConfig+0x188>
 80031ac:	e013      	b.n	80031d6 <UART_SetConfig+0x1a6>
 80031ae:	231f      	movs	r3, #31
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e04a      	b.n	800324e <UART_SetConfig+0x21e>
 80031b8:	231f      	movs	r3, #31
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2202      	movs	r2, #2
 80031be:	701a      	strb	r2, [r3, #0]
 80031c0:	e045      	b.n	800324e <UART_SetConfig+0x21e>
 80031c2:	231f      	movs	r3, #31
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2204      	movs	r2, #4
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e040      	b.n	800324e <UART_SetConfig+0x21e>
 80031cc:	231f      	movs	r3, #31
 80031ce:	18fb      	adds	r3, r7, r3
 80031d0:	2208      	movs	r2, #8
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e03b      	b.n	800324e <UART_SetConfig+0x21e>
 80031d6:	231f      	movs	r3, #31
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2210      	movs	r2, #16
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	e035      	b.n	800324e <UART_SetConfig+0x21e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a62      	ldr	r2, [pc, #392]	; (8003370 <UART_SetConfig+0x340>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d104      	bne.n	80031f6 <UART_SetConfig+0x1c6>
 80031ec:	231f      	movs	r3, #31
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
 80031f4:	e02b      	b.n	800324e <UART_SetConfig+0x21e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5e      	ldr	r2, [pc, #376]	; (8003374 <UART_SetConfig+0x344>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d104      	bne.n	800320a <UART_SetConfig+0x1da>
 8003200:	231f      	movs	r3, #31
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	e021      	b.n	800324e <UART_SetConfig+0x21e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a5a      	ldr	r2, [pc, #360]	; (8003378 <UART_SetConfig+0x348>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d104      	bne.n	800321e <UART_SetConfig+0x1ee>
 8003214:	231f      	movs	r3, #31
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e017      	b.n	800324e <UART_SetConfig+0x21e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a56      	ldr	r2, [pc, #344]	; (800337c <UART_SetConfig+0x34c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d104      	bne.n	8003232 <UART_SetConfig+0x202>
 8003228:	231f      	movs	r3, #31
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
 8003230:	e00d      	b.n	800324e <UART_SetConfig+0x21e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a52      	ldr	r2, [pc, #328]	; (8003380 <UART_SetConfig+0x350>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d104      	bne.n	8003246 <UART_SetConfig+0x216>
 800323c:	231f      	movs	r3, #31
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	e003      	b.n	800324e <UART_SetConfig+0x21e>
 8003246:	231f      	movs	r3, #31
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	2210      	movs	r2, #16
 800324c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	021b      	lsls	r3, r3, #8
 8003256:	429a      	cmp	r2, r3
 8003258:	d15c      	bne.n	8003314 <UART_SetConfig+0x2e4>
  {
    switch (clocksource)
 800325a:	231f      	movs	r3, #31
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d00d      	beq.n	8003280 <UART_SetConfig+0x250>
 8003264:	dc02      	bgt.n	800326c <UART_SetConfig+0x23c>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <UART_SetConfig+0x246>
 800326a:	e015      	b.n	8003298 <UART_SetConfig+0x268>
 800326c:	2b04      	cmp	r3, #4
 800326e:	d00a      	beq.n	8003286 <UART_SetConfig+0x256>
 8003270:	2b08      	cmp	r3, #8
 8003272:	d00d      	beq.n	8003290 <UART_SetConfig+0x260>
 8003274:	e010      	b.n	8003298 <UART_SetConfig+0x268>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003276:	f7fe fdcd 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 800327a:	0003      	movs	r3, r0
 800327c:	61bb      	str	r3, [r7, #24]
        break;
 800327e:	e012      	b.n	80032a6 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003280:	4b40      	ldr	r3, [pc, #256]	; (8003384 <UART_SetConfig+0x354>)
 8003282:	61bb      	str	r3, [r7, #24]
        break;
 8003284:	e00f      	b.n	80032a6 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003286:	f7fe fd3d 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 800328a:	0003      	movs	r3, r0
 800328c:	61bb      	str	r3, [r7, #24]
        break;
 800328e:	e00a      	b.n	80032a6 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	021b      	lsls	r3, r3, #8
 8003294:	61bb      	str	r3, [r7, #24]
        break;
 8003296:	e006      	b.n	80032a6 <UART_SetConfig+0x276>
      default:
        pclk = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800329c:	231e      	movs	r3, #30
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2201      	movs	r2, #1
 80032a2:	701a      	strb	r2, [r3, #0]
        break;
 80032a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d100      	bne.n	80032ae <UART_SetConfig+0x27e>
 80032ac:	e096      	b.n	80033dc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	005a      	lsls	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	18d2      	adds	r2, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	0019      	movs	r1, r3
 80032c0:	0010      	movs	r0, r2
 80032c2:	f7fc ff1f 	bl	8000104 <__udivsi3>
 80032c6:	0003      	movs	r3, r0
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	d91b      	bls.n	800330a <UART_SetConfig+0x2da>
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	4a2c      	ldr	r2, [pc, #176]	; (8003388 <UART_SetConfig+0x358>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d817      	bhi.n	800330a <UART_SetConfig+0x2da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	b29a      	uxth	r2, r3
 80032de:	200e      	movs	r0, #14
 80032e0:	183b      	adds	r3, r7, r0
 80032e2:	210f      	movs	r1, #15
 80032e4:	438a      	bics	r2, r1
 80032e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2207      	movs	r2, #7
 80032f0:	4013      	ands	r3, r2
 80032f2:	b299      	uxth	r1, r3
 80032f4:	183b      	adds	r3, r7, r0
 80032f6:	183a      	adds	r2, r7, r0
 80032f8:	8812      	ldrh	r2, [r2, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	183a      	adds	r2, r7, r0
 8003304:	8812      	ldrh	r2, [r2, #0]
 8003306:	60da      	str	r2, [r3, #12]
 8003308:	e068      	b.n	80033dc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800330a:	231e      	movs	r3, #30
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e063      	b.n	80033dc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003314:	231f      	movs	r3, #31
 8003316:	18fb      	adds	r3, r7, r3
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d00d      	beq.n	800333a <UART_SetConfig+0x30a>
 800331e:	dc02      	bgt.n	8003326 <UART_SetConfig+0x2f6>
 8003320:	2b00      	cmp	r3, #0
 8003322:	d005      	beq.n	8003330 <UART_SetConfig+0x300>
 8003324:	e032      	b.n	800338c <UART_SetConfig+0x35c>
 8003326:	2b04      	cmp	r3, #4
 8003328:	d00a      	beq.n	8003340 <UART_SetConfig+0x310>
 800332a:	2b08      	cmp	r3, #8
 800332c:	d00d      	beq.n	800334a <UART_SetConfig+0x31a>
 800332e:	e02d      	b.n	800338c <UART_SetConfig+0x35c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003330:	f7fe fd70 	bl	8001e14 <HAL_RCC_GetPCLK1Freq>
 8003334:	0003      	movs	r3, r0
 8003336:	61bb      	str	r3, [r7, #24]
        break;
 8003338:	e02f      	b.n	800339a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800333a:	4b12      	ldr	r3, [pc, #72]	; (8003384 <UART_SetConfig+0x354>)
 800333c:	61bb      	str	r3, [r7, #24]
        break;
 800333e:	e02c      	b.n	800339a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003340:	f7fe fce0 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8003344:	0003      	movs	r3, r0
 8003346:	61bb      	str	r3, [r7, #24]
        break;
 8003348:	e027      	b.n	800339a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	021b      	lsls	r3, r3, #8
 800334e:	61bb      	str	r3, [r7, #24]
        break;
 8003350:	e023      	b.n	800339a <UART_SetConfig+0x36a>
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	efff69f3 	.word	0xefff69f3
 8003358:	ffffcfff 	.word	0xffffcfff
 800335c:	fffff4ff 	.word	0xfffff4ff
 8003360:	40013800 	.word	0x40013800
 8003364:	40021000 	.word	0x40021000
 8003368:	40004400 	.word	0x40004400
 800336c:	40004800 	.word	0x40004800
 8003370:	40004c00 	.word	0x40004c00
 8003374:	40005000 	.word	0x40005000
 8003378:	40011400 	.word	0x40011400
 800337c:	40011800 	.word	0x40011800
 8003380:	40011c00 	.word	0x40011c00
 8003384:	007a1200 	.word	0x007a1200
 8003388:	0000ffff 	.word	0x0000ffff
      default:
        pclk = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003390:	231e      	movs	r3, #30
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2201      	movs	r2, #1
 8003396:	701a      	strb	r2, [r3, #0]
        break;
 8003398:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01d      	beq.n	80033dc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085a      	lsrs	r2, r3, #1
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	18d2      	adds	r2, r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	0019      	movs	r1, r3
 80033b0:	0010      	movs	r0, r2
 80033b2:	f7fc fea7 	bl	8000104 <__udivsi3>
 80033b6:	0003      	movs	r3, r0
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	d908      	bls.n	80033d4 <UART_SetConfig+0x3a4>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4a0c      	ldr	r2, [pc, #48]	; (80033f8 <UART_SetConfig+0x3c8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d804      	bhi.n	80033d4 <UART_SetConfig+0x3a4>
      {
        huart->Instance->BRR = usartdiv;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	e003      	b.n	80033dc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80033d4:	231e      	movs	r3, #30
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033e8:	231e      	movs	r3, #30
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	781b      	ldrb	r3, [r3, #0]
}
 80033ee:	0018      	movs	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	b008      	add	sp, #32
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	0000ffff 	.word	0x0000ffff

080033fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2201      	movs	r2, #1
 800340a:	4013      	ands	r3, r2
 800340c:	d00b      	beq.n	8003426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a4a      	ldr	r2, [pc, #296]	; (8003540 <UART_AdvFeatureConfig+0x144>)
 8003416:	4013      	ands	r3, r2
 8003418:	0019      	movs	r1, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2202      	movs	r2, #2
 800342c:	4013      	ands	r3, r2
 800342e:	d00b      	beq.n	8003448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4a43      	ldr	r2, [pc, #268]	; (8003544 <UART_AdvFeatureConfig+0x148>)
 8003438:	4013      	ands	r3, r2
 800343a:	0019      	movs	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	2204      	movs	r2, #4
 800344e:	4013      	ands	r3, r2
 8003450:	d00b      	beq.n	800346a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	4a3b      	ldr	r2, [pc, #236]	; (8003548 <UART_AdvFeatureConfig+0x14c>)
 800345a:	4013      	ands	r3, r2
 800345c:	0019      	movs	r1, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346e:	2208      	movs	r2, #8
 8003470:	4013      	ands	r3, r2
 8003472:	d00b      	beq.n	800348c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a34      	ldr	r2, [pc, #208]	; (800354c <UART_AdvFeatureConfig+0x150>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2210      	movs	r2, #16
 8003492:	4013      	ands	r3, r2
 8003494:	d00b      	beq.n	80034ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a2c      	ldr	r2, [pc, #176]	; (8003550 <UART_AdvFeatureConfig+0x154>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2220      	movs	r2, #32
 80034b4:	4013      	ands	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <UART_AdvFeatureConfig+0x158>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	0019      	movs	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	4013      	ands	r3, r2
 80034d8:	d01d      	beq.n	8003516 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	4a1d      	ldr	r2, [pc, #116]	; (8003558 <UART_AdvFeatureConfig+0x15c>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	035b      	lsls	r3, r3, #13
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d10b      	bne.n	8003516 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <UART_AdvFeatureConfig+0x160>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2280      	movs	r2, #128	; 0x80
 800351c:	4013      	ands	r3, r2
 800351e:	d00b      	beq.n	8003538 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <UART_AdvFeatureConfig+0x164>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	46bd      	mov	sp, r7
 800353c:	b002      	add	sp, #8
 800353e:	bd80      	pop	{r7, pc}
 8003540:	fffdffff 	.word	0xfffdffff
 8003544:	fffeffff 	.word	0xfffeffff
 8003548:	fffbffff 	.word	0xfffbffff
 800354c:	ffff7fff 	.word	0xffff7fff
 8003550:	ffffefff 	.word	0xffffefff
 8003554:	ffffdfff 	.word	0xffffdfff
 8003558:	ffefffff 	.word	0xffefffff
 800355c:	ff9fffff 	.word	0xff9fffff
 8003560:	fff7ffff 	.word	0xfff7ffff

08003564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af02      	add	r7, sp, #8
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2280      	movs	r2, #128	; 0x80
 8003570:	2100      	movs	r1, #0
 8003572:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003574:	f7fd fc72 	bl	8000e5c <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2208      	movs	r2, #8
 8003584:	4013      	ands	r3, r2
 8003586:	2b08      	cmp	r3, #8
 8003588:	d10d      	bne.n	80035a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	2380      	movs	r3, #128	; 0x80
 800358e:	0399      	lsls	r1, r3, #14
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <UART_CheckIdleState+0x90>)
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	0013      	movs	r3, r2
 8003598:	2200      	movs	r2, #0
 800359a:	f000 f82d 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 800359e:	1e03      	subs	r3, r0, #0
 80035a0:	d001      	beq.n	80035a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e022      	b.n	80035ec <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2204      	movs	r2, #4
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d10d      	bne.n	80035d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	03d9      	lsls	r1, r3, #15
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <UART_CheckIdleState+0x90>)
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	0013      	movs	r3, r2
 80035c2:	2200      	movs	r2, #0
 80035c4:	f000 f818 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d001      	beq.n	80035d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e00d      	b.n	80035ec <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2274      	movs	r2, #116	; 0x74
 80035e6:	2100      	movs	r1, #0
 80035e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b004      	add	sp, #16
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	01ffffff 	.word	0x01ffffff

080035f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003608:	e05e      	b.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3301      	adds	r3, #1
 800360e:	d05b      	beq.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fd fc24 	bl	8000e5c <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11b      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	492f      	ldr	r1, [pc, #188]	; (80036f0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2101      	movs	r1, #1
 8003642:	438a      	bics	r2, r1
 8003644:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2220      	movs	r2, #32
 800364a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2274      	movs	r2, #116	; 0x74
 8003656:	2100      	movs	r1, #0
 8003658:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e044      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2204      	movs	r2, #4
 8003666:	4013      	ands	r3, r2
 8003668:	d02e      	beq.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	401a      	ands	r2, r3
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	429a      	cmp	r2, r3
 800367c:	d124      	bne.n	80036c8 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2280      	movs	r2, #128	; 0x80
 8003684:	0112      	lsls	r2, r2, #4
 8003686:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4917      	ldr	r1, [pc, #92]	; (80036f0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003694:	400a      	ands	r2, r1
 8003696:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	438a      	bics	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	2120      	movs	r1, #32
 80036ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2274      	movs	r2, #116	; 0x74
 80036c0:	2100      	movs	r1, #0
 80036c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e00f      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4013      	ands	r3, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	425a      	negs	r2, r3
 80036d8:	4153      	adcs	r3, r2
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	001a      	movs	r2, r3
 80036de:	1dfb      	adds	r3, r7, #7
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d091      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	0018      	movs	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	fffffe5f 	.word	0xfffffe5f

080036f4 <__errno>:
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <__errno+0x8>)
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	4770      	bx	lr
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	20000010 	.word	0x20000010

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	2600      	movs	r6, #0
 8003704:	4d0c      	ldr	r5, [pc, #48]	; (8003738 <__libc_init_array+0x38>)
 8003706:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	2600      	movs	r6, #0
 8003712:	f000 fc29 	bl	8003f68 <_init>
 8003716:	4d0a      	ldr	r5, [pc, #40]	; (8003740 <__libc_init_array+0x40>)
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <__libc_init_array+0x44>)
 800371a:	1b64      	subs	r4, r4, r5
 800371c:	10a4      	asrs	r4, r4, #2
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	00b3      	lsls	r3, r6, #2
 8003726:	58eb      	ldr	r3, [r5, r3]
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	00b3      	lsls	r3, r6, #2
 8003730:	58eb      	ldr	r3, [r5, r3]
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	0800408c 	.word	0x0800408c
 800373c:	0800408c 	.word	0x0800408c
 8003740:	0800408c 	.word	0x0800408c
 8003744:	08004090 	.word	0x08004090

08003748 <memset>:
 8003748:	0003      	movs	r3, r0
 800374a:	1812      	adds	r2, r2, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	7019      	strb	r1, [r3, #0]
 8003754:	3301      	adds	r3, #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <siprintf>:
 8003758:	b40e      	push	{r1, r2, r3}
 800375a:	b500      	push	{lr}
 800375c:	490b      	ldr	r1, [pc, #44]	; (800378c <siprintf+0x34>)
 800375e:	b09c      	sub	sp, #112	; 0x70
 8003760:	ab1d      	add	r3, sp, #116	; 0x74
 8003762:	9002      	str	r0, [sp, #8]
 8003764:	9006      	str	r0, [sp, #24]
 8003766:	9107      	str	r1, [sp, #28]
 8003768:	9104      	str	r1, [sp, #16]
 800376a:	4809      	ldr	r0, [pc, #36]	; (8003790 <siprintf+0x38>)
 800376c:	4909      	ldr	r1, [pc, #36]	; (8003794 <siprintf+0x3c>)
 800376e:	cb04      	ldmia	r3!, {r2}
 8003770:	9105      	str	r1, [sp, #20]
 8003772:	6800      	ldr	r0, [r0, #0]
 8003774:	a902      	add	r1, sp, #8
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	f000 f870 	bl	800385c <_svfiprintf_r>
 800377c:	2300      	movs	r3, #0
 800377e:	9a02      	ldr	r2, [sp, #8]
 8003780:	7013      	strb	r3, [r2, #0]
 8003782:	b01c      	add	sp, #112	; 0x70
 8003784:	bc08      	pop	{r3}
 8003786:	b003      	add	sp, #12
 8003788:	4718      	bx	r3
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	7fffffff 	.word	0x7fffffff
 8003790:	20000010 	.word	0x20000010
 8003794:	ffff0208 	.word	0xffff0208

08003798 <__ssputs_r>:
 8003798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379a:	688e      	ldr	r6, [r1, #8]
 800379c:	b085      	sub	sp, #20
 800379e:	0007      	movs	r7, r0
 80037a0:	000c      	movs	r4, r1
 80037a2:	9203      	str	r2, [sp, #12]
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	429e      	cmp	r6, r3
 80037a8:	d83c      	bhi.n	8003824 <__ssputs_r+0x8c>
 80037aa:	2390      	movs	r3, #144	; 0x90
 80037ac:	898a      	ldrh	r2, [r1, #12]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	421a      	tst	r2, r3
 80037b2:	d034      	beq.n	800381e <__ssputs_r+0x86>
 80037b4:	2503      	movs	r5, #3
 80037b6:	6909      	ldr	r1, [r1, #16]
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	1a5b      	subs	r3, r3, r1
 80037bc:	9302      	str	r3, [sp, #8]
 80037be:	6963      	ldr	r3, [r4, #20]
 80037c0:	9802      	ldr	r0, [sp, #8]
 80037c2:	435d      	muls	r5, r3
 80037c4:	0feb      	lsrs	r3, r5, #31
 80037c6:	195d      	adds	r5, r3, r5
 80037c8:	9b01      	ldr	r3, [sp, #4]
 80037ca:	106d      	asrs	r5, r5, #1
 80037cc:	3301      	adds	r3, #1
 80037ce:	181b      	adds	r3, r3, r0
 80037d0:	42ab      	cmp	r3, r5
 80037d2:	d900      	bls.n	80037d6 <__ssputs_r+0x3e>
 80037d4:	001d      	movs	r5, r3
 80037d6:	0553      	lsls	r3, r2, #21
 80037d8:	d532      	bpl.n	8003840 <__ssputs_r+0xa8>
 80037da:	0029      	movs	r1, r5
 80037dc:	0038      	movs	r0, r7
 80037de:	f000 fb23 	bl	8003e28 <_malloc_r>
 80037e2:	1e06      	subs	r6, r0, #0
 80037e4:	d109      	bne.n	80037fa <__ssputs_r+0x62>
 80037e6:	230c      	movs	r3, #12
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	2001      	movs	r0, #1
 80037ee:	89a2      	ldrh	r2, [r4, #12]
 80037f0:	4240      	negs	r0, r0
 80037f2:	4313      	orrs	r3, r2
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	b005      	add	sp, #20
 80037f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fa:	9a02      	ldr	r2, [sp, #8]
 80037fc:	6921      	ldr	r1, [r4, #16]
 80037fe:	f000 faac 	bl	8003d5a <memcpy>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	4a14      	ldr	r2, [pc, #80]	; (8003858 <__ssputs_r+0xc0>)
 8003806:	401a      	ands	r2, r3
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	4313      	orrs	r3, r2
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	9b02      	ldr	r3, [sp, #8]
 8003810:	6126      	str	r6, [r4, #16]
 8003812:	18f6      	adds	r6, r6, r3
 8003814:	6026      	str	r6, [r4, #0]
 8003816:	6165      	str	r5, [r4, #20]
 8003818:	9e01      	ldr	r6, [sp, #4]
 800381a:	1aed      	subs	r5, r5, r3
 800381c:	60a5      	str	r5, [r4, #8]
 800381e:	9b01      	ldr	r3, [sp, #4]
 8003820:	429e      	cmp	r6, r3
 8003822:	d900      	bls.n	8003826 <__ssputs_r+0x8e>
 8003824:	9e01      	ldr	r6, [sp, #4]
 8003826:	0032      	movs	r2, r6
 8003828:	9903      	ldr	r1, [sp, #12]
 800382a:	6820      	ldr	r0, [r4, #0]
 800382c:	f000 fa9e 	bl	8003d6c <memmove>
 8003830:	68a3      	ldr	r3, [r4, #8]
 8003832:	2000      	movs	r0, #0
 8003834:	1b9b      	subs	r3, r3, r6
 8003836:	60a3      	str	r3, [r4, #8]
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	199e      	adds	r6, r3, r6
 800383c:	6026      	str	r6, [r4, #0]
 800383e:	e7da      	b.n	80037f6 <__ssputs_r+0x5e>
 8003840:	002a      	movs	r2, r5
 8003842:	0038      	movs	r0, r7
 8003844:	f000 fb4e 	bl	8003ee4 <_realloc_r>
 8003848:	1e06      	subs	r6, r0, #0
 800384a:	d1e0      	bne.n	800380e <__ssputs_r+0x76>
 800384c:	6921      	ldr	r1, [r4, #16]
 800384e:	0038      	movs	r0, r7
 8003850:	f000 faa0 	bl	8003d94 <_free_r>
 8003854:	e7c7      	b.n	80037e6 <__ssputs_r+0x4e>
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	fffffb7f 	.word	0xfffffb7f

0800385c <_svfiprintf_r>:
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b0a1      	sub	sp, #132	; 0x84
 8003860:	9003      	str	r0, [sp, #12]
 8003862:	001d      	movs	r5, r3
 8003864:	898b      	ldrh	r3, [r1, #12]
 8003866:	000f      	movs	r7, r1
 8003868:	0016      	movs	r6, r2
 800386a:	061b      	lsls	r3, r3, #24
 800386c:	d511      	bpl.n	8003892 <_svfiprintf_r+0x36>
 800386e:	690b      	ldr	r3, [r1, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10e      	bne.n	8003892 <_svfiprintf_r+0x36>
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	f000 fad7 	bl	8003e28 <_malloc_r>
 800387a:	6038      	str	r0, [r7, #0]
 800387c:	6138      	str	r0, [r7, #16]
 800387e:	2800      	cmp	r0, #0
 8003880:	d105      	bne.n	800388e <_svfiprintf_r+0x32>
 8003882:	230c      	movs	r3, #12
 8003884:	9a03      	ldr	r2, [sp, #12]
 8003886:	3801      	subs	r0, #1
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	b021      	add	sp, #132	; 0x84
 800388c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388e:	2340      	movs	r3, #64	; 0x40
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	2300      	movs	r3, #0
 8003894:	ac08      	add	r4, sp, #32
 8003896:	6163      	str	r3, [r4, #20]
 8003898:	3320      	adds	r3, #32
 800389a:	7663      	strb	r3, [r4, #25]
 800389c:	3310      	adds	r3, #16
 800389e:	76a3      	strb	r3, [r4, #26]
 80038a0:	9507      	str	r5, [sp, #28]
 80038a2:	0035      	movs	r5, r6
 80038a4:	782b      	ldrb	r3, [r5, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <_svfiprintf_r+0x52>
 80038aa:	2b25      	cmp	r3, #37	; 0x25
 80038ac:	d146      	bne.n	800393c <_svfiprintf_r+0xe0>
 80038ae:	1bab      	subs	r3, r5, r6
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	d00c      	beq.n	80038ce <_svfiprintf_r+0x72>
 80038b4:	0032      	movs	r2, r6
 80038b6:	0039      	movs	r1, r7
 80038b8:	9803      	ldr	r0, [sp, #12]
 80038ba:	f7ff ff6d 	bl	8003798 <__ssputs_r>
 80038be:	1c43      	adds	r3, r0, #1
 80038c0:	d100      	bne.n	80038c4 <_svfiprintf_r+0x68>
 80038c2:	e0ae      	b.n	8003a22 <_svfiprintf_r+0x1c6>
 80038c4:	6962      	ldr	r2, [r4, #20]
 80038c6:	9b05      	ldr	r3, [sp, #20]
 80038c8:	4694      	mov	ip, r2
 80038ca:	4463      	add	r3, ip
 80038cc:	6163      	str	r3, [r4, #20]
 80038ce:	782b      	ldrb	r3, [r5, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d100      	bne.n	80038d6 <_svfiprintf_r+0x7a>
 80038d4:	e0a5      	b.n	8003a22 <_svfiprintf_r+0x1c6>
 80038d6:	2201      	movs	r2, #1
 80038d8:	2300      	movs	r3, #0
 80038da:	4252      	negs	r2, r2
 80038dc:	6062      	str	r2, [r4, #4]
 80038de:	a904      	add	r1, sp, #16
 80038e0:	3254      	adds	r2, #84	; 0x54
 80038e2:	1852      	adds	r2, r2, r1
 80038e4:	1c6e      	adds	r6, r5, #1
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	60e3      	str	r3, [r4, #12]
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	7013      	strb	r3, [r2, #0]
 80038ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80038f0:	7831      	ldrb	r1, [r6, #0]
 80038f2:	2205      	movs	r2, #5
 80038f4:	4853      	ldr	r0, [pc, #332]	; (8003a44 <_svfiprintf_r+0x1e8>)
 80038f6:	f000 fa25 	bl	8003d44 <memchr>
 80038fa:	1c75      	adds	r5, r6, #1
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d11f      	bne.n	8003940 <_svfiprintf_r+0xe4>
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	06d3      	lsls	r3, r2, #27
 8003904:	d504      	bpl.n	8003910 <_svfiprintf_r+0xb4>
 8003906:	2353      	movs	r3, #83	; 0x53
 8003908:	a904      	add	r1, sp, #16
 800390a:	185b      	adds	r3, r3, r1
 800390c:	2120      	movs	r1, #32
 800390e:	7019      	strb	r1, [r3, #0]
 8003910:	0713      	lsls	r3, r2, #28
 8003912:	d504      	bpl.n	800391e <_svfiprintf_r+0xc2>
 8003914:	2353      	movs	r3, #83	; 0x53
 8003916:	a904      	add	r1, sp, #16
 8003918:	185b      	adds	r3, r3, r1
 800391a:	212b      	movs	r1, #43	; 0x2b
 800391c:	7019      	strb	r1, [r3, #0]
 800391e:	7833      	ldrb	r3, [r6, #0]
 8003920:	2b2a      	cmp	r3, #42	; 0x2a
 8003922:	d016      	beq.n	8003952 <_svfiprintf_r+0xf6>
 8003924:	0035      	movs	r5, r6
 8003926:	2100      	movs	r1, #0
 8003928:	200a      	movs	r0, #10
 800392a:	68e3      	ldr	r3, [r4, #12]
 800392c:	782a      	ldrb	r2, [r5, #0]
 800392e:	1c6e      	adds	r6, r5, #1
 8003930:	3a30      	subs	r2, #48	; 0x30
 8003932:	2a09      	cmp	r2, #9
 8003934:	d94e      	bls.n	80039d4 <_svfiprintf_r+0x178>
 8003936:	2900      	cmp	r1, #0
 8003938:	d018      	beq.n	800396c <_svfiprintf_r+0x110>
 800393a:	e010      	b.n	800395e <_svfiprintf_r+0x102>
 800393c:	3501      	adds	r5, #1
 800393e:	e7b1      	b.n	80038a4 <_svfiprintf_r+0x48>
 8003940:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <_svfiprintf_r+0x1e8>)
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	1ac0      	subs	r0, r0, r3
 8003946:	2301      	movs	r3, #1
 8003948:	4083      	lsls	r3, r0
 800394a:	4313      	orrs	r3, r2
 800394c:	6023      	str	r3, [r4, #0]
 800394e:	002e      	movs	r6, r5
 8003950:	e7ce      	b.n	80038f0 <_svfiprintf_r+0x94>
 8003952:	9b07      	ldr	r3, [sp, #28]
 8003954:	1d19      	adds	r1, r3, #4
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	9107      	str	r1, [sp, #28]
 800395a:	2b00      	cmp	r3, #0
 800395c:	db01      	blt.n	8003962 <_svfiprintf_r+0x106>
 800395e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003960:	e004      	b.n	800396c <_svfiprintf_r+0x110>
 8003962:	425b      	negs	r3, r3
 8003964:	60e3      	str	r3, [r4, #12]
 8003966:	2302      	movs	r3, #2
 8003968:	4313      	orrs	r3, r2
 800396a:	6023      	str	r3, [r4, #0]
 800396c:	782b      	ldrb	r3, [r5, #0]
 800396e:	2b2e      	cmp	r3, #46	; 0x2e
 8003970:	d10a      	bne.n	8003988 <_svfiprintf_r+0x12c>
 8003972:	786b      	ldrb	r3, [r5, #1]
 8003974:	2b2a      	cmp	r3, #42	; 0x2a
 8003976:	d135      	bne.n	80039e4 <_svfiprintf_r+0x188>
 8003978:	9b07      	ldr	r3, [sp, #28]
 800397a:	3502      	adds	r5, #2
 800397c:	1d1a      	adds	r2, r3, #4
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	9207      	str	r2, [sp, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	db2b      	blt.n	80039de <_svfiprintf_r+0x182>
 8003986:	9309      	str	r3, [sp, #36]	; 0x24
 8003988:	4e2f      	ldr	r6, [pc, #188]	; (8003a48 <_svfiprintf_r+0x1ec>)
 800398a:	7829      	ldrb	r1, [r5, #0]
 800398c:	2203      	movs	r2, #3
 800398e:	0030      	movs	r0, r6
 8003990:	f000 f9d8 	bl	8003d44 <memchr>
 8003994:	2800      	cmp	r0, #0
 8003996:	d006      	beq.n	80039a6 <_svfiprintf_r+0x14a>
 8003998:	2340      	movs	r3, #64	; 0x40
 800399a:	1b80      	subs	r0, r0, r6
 800399c:	4083      	lsls	r3, r0
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	3501      	adds	r5, #1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	7829      	ldrb	r1, [r5, #0]
 80039a8:	2206      	movs	r2, #6
 80039aa:	4828      	ldr	r0, [pc, #160]	; (8003a4c <_svfiprintf_r+0x1f0>)
 80039ac:	1c6e      	adds	r6, r5, #1
 80039ae:	7621      	strb	r1, [r4, #24]
 80039b0:	f000 f9c8 	bl	8003d44 <memchr>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d03c      	beq.n	8003a32 <_svfiprintf_r+0x1d6>
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <_svfiprintf_r+0x1f4>)
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d125      	bne.n	8003a0a <_svfiprintf_r+0x1ae>
 80039be:	2207      	movs	r2, #7
 80039c0:	9b07      	ldr	r3, [sp, #28]
 80039c2:	3307      	adds	r3, #7
 80039c4:	4393      	bics	r3, r2
 80039c6:	3308      	adds	r3, #8
 80039c8:	9307      	str	r3, [sp, #28]
 80039ca:	6963      	ldr	r3, [r4, #20]
 80039cc:	9a04      	ldr	r2, [sp, #16]
 80039ce:	189b      	adds	r3, r3, r2
 80039d0:	6163      	str	r3, [r4, #20]
 80039d2:	e766      	b.n	80038a2 <_svfiprintf_r+0x46>
 80039d4:	4343      	muls	r3, r0
 80039d6:	2101      	movs	r1, #1
 80039d8:	189b      	adds	r3, r3, r2
 80039da:	0035      	movs	r5, r6
 80039dc:	e7a6      	b.n	800392c <_svfiprintf_r+0xd0>
 80039de:	2301      	movs	r3, #1
 80039e0:	425b      	negs	r3, r3
 80039e2:	e7d0      	b.n	8003986 <_svfiprintf_r+0x12a>
 80039e4:	2300      	movs	r3, #0
 80039e6:	200a      	movs	r0, #10
 80039e8:	001a      	movs	r2, r3
 80039ea:	3501      	adds	r5, #1
 80039ec:	6063      	str	r3, [r4, #4]
 80039ee:	7829      	ldrb	r1, [r5, #0]
 80039f0:	1c6e      	adds	r6, r5, #1
 80039f2:	3930      	subs	r1, #48	; 0x30
 80039f4:	2909      	cmp	r1, #9
 80039f6:	d903      	bls.n	8003a00 <_svfiprintf_r+0x1a4>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0c5      	beq.n	8003988 <_svfiprintf_r+0x12c>
 80039fc:	9209      	str	r2, [sp, #36]	; 0x24
 80039fe:	e7c3      	b.n	8003988 <_svfiprintf_r+0x12c>
 8003a00:	4342      	muls	r2, r0
 8003a02:	2301      	movs	r3, #1
 8003a04:	1852      	adds	r2, r2, r1
 8003a06:	0035      	movs	r5, r6
 8003a08:	e7f1      	b.n	80039ee <_svfiprintf_r+0x192>
 8003a0a:	ab07      	add	r3, sp, #28
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	003a      	movs	r2, r7
 8003a10:	4b10      	ldr	r3, [pc, #64]	; (8003a54 <_svfiprintf_r+0x1f8>)
 8003a12:	0021      	movs	r1, r4
 8003a14:	9803      	ldr	r0, [sp, #12]
 8003a16:	e000      	b.n	8003a1a <_svfiprintf_r+0x1be>
 8003a18:	bf00      	nop
 8003a1a:	9004      	str	r0, [sp, #16]
 8003a1c:	9b04      	ldr	r3, [sp, #16]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	d1d3      	bne.n	80039ca <_svfiprintf_r+0x16e>
 8003a22:	89bb      	ldrh	r3, [r7, #12]
 8003a24:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a26:	065b      	lsls	r3, r3, #25
 8003a28:	d400      	bmi.n	8003a2c <_svfiprintf_r+0x1d0>
 8003a2a:	e72e      	b.n	800388a <_svfiprintf_r+0x2e>
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	4240      	negs	r0, r0
 8003a30:	e72b      	b.n	800388a <_svfiprintf_r+0x2e>
 8003a32:	ab07      	add	r3, sp, #28
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	003a      	movs	r2, r7
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <_svfiprintf_r+0x1f8>)
 8003a3a:	0021      	movs	r1, r4
 8003a3c:	9803      	ldr	r0, [sp, #12]
 8003a3e:	f000 f879 	bl	8003b34 <_printf_i>
 8003a42:	e7ea      	b.n	8003a1a <_svfiprintf_r+0x1be>
 8003a44:	08004058 	.word	0x08004058
 8003a48:	0800405e 	.word	0x0800405e
 8003a4c:	08004062 	.word	0x08004062
 8003a50:	00000000 	.word	0x00000000
 8003a54:	08003799 	.word	0x08003799

08003a58 <_printf_common>:
 8003a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5a:	0015      	movs	r5, r2
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	688a      	ldr	r2, [r1, #8]
 8003a60:	690b      	ldr	r3, [r1, #16]
 8003a62:	9000      	str	r0, [sp, #0]
 8003a64:	000c      	movs	r4, r1
 8003a66:	4293      	cmp	r3, r2
 8003a68:	da00      	bge.n	8003a6c <_printf_common+0x14>
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	0022      	movs	r2, r4
 8003a6e:	602b      	str	r3, [r5, #0]
 8003a70:	3243      	adds	r2, #67	; 0x43
 8003a72:	7812      	ldrb	r2, [r2, #0]
 8003a74:	2a00      	cmp	r2, #0
 8003a76:	d001      	beq.n	8003a7c <_printf_common+0x24>
 8003a78:	3301      	adds	r3, #1
 8003a7a:	602b      	str	r3, [r5, #0]
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	069b      	lsls	r3, r3, #26
 8003a80:	d502      	bpl.n	8003a88 <_printf_common+0x30>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	3302      	adds	r3, #2
 8003a86:	602b      	str	r3, [r5, #0]
 8003a88:	2706      	movs	r7, #6
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	401f      	ands	r7, r3
 8003a8e:	d027      	beq.n	8003ae0 <_printf_common+0x88>
 8003a90:	0023      	movs	r3, r4
 8003a92:	3343      	adds	r3, #67	; 0x43
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	4193      	sbcs	r3, r2
 8003a9a:	6822      	ldr	r2, [r4, #0]
 8003a9c:	0692      	lsls	r2, r2, #26
 8003a9e:	d430      	bmi.n	8003b02 <_printf_common+0xaa>
 8003aa0:	0022      	movs	r2, r4
 8003aa2:	9901      	ldr	r1, [sp, #4]
 8003aa4:	3243      	adds	r2, #67	; 0x43
 8003aa6:	9800      	ldr	r0, [sp, #0]
 8003aa8:	9e08      	ldr	r6, [sp, #32]
 8003aaa:	47b0      	blx	r6
 8003aac:	1c43      	adds	r3, r0, #1
 8003aae:	d025      	beq.n	8003afc <_printf_common+0xa4>
 8003ab0:	2306      	movs	r3, #6
 8003ab2:	6820      	ldr	r0, [r4, #0]
 8003ab4:	682a      	ldr	r2, [r5, #0]
 8003ab6:	68e1      	ldr	r1, [r4, #12]
 8003ab8:	4003      	ands	r3, r0
 8003aba:	2500      	movs	r5, #0
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d103      	bne.n	8003ac8 <_printf_common+0x70>
 8003ac0:	1a8d      	subs	r5, r1, r2
 8003ac2:	43eb      	mvns	r3, r5
 8003ac4:	17db      	asrs	r3, r3, #31
 8003ac6:	401d      	ands	r5, r3
 8003ac8:	68a3      	ldr	r3, [r4, #8]
 8003aca:	6922      	ldr	r2, [r4, #16]
 8003acc:	4293      	cmp	r3, r2
 8003ace:	dd01      	ble.n	8003ad4 <_printf_common+0x7c>
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	18ed      	adds	r5, r5, r3
 8003ad4:	2700      	movs	r7, #0
 8003ad6:	42bd      	cmp	r5, r7
 8003ad8:	d120      	bne.n	8003b1c <_printf_common+0xc4>
 8003ada:	2000      	movs	r0, #0
 8003adc:	e010      	b.n	8003b00 <_printf_common+0xa8>
 8003ade:	3701      	adds	r7, #1
 8003ae0:	68e3      	ldr	r3, [r4, #12]
 8003ae2:	682a      	ldr	r2, [r5, #0]
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	42bb      	cmp	r3, r7
 8003ae8:	ddd2      	ble.n	8003a90 <_printf_common+0x38>
 8003aea:	0022      	movs	r2, r4
 8003aec:	2301      	movs	r3, #1
 8003aee:	3219      	adds	r2, #25
 8003af0:	9901      	ldr	r1, [sp, #4]
 8003af2:	9800      	ldr	r0, [sp, #0]
 8003af4:	9e08      	ldr	r6, [sp, #32]
 8003af6:	47b0      	blx	r6
 8003af8:	1c43      	adds	r3, r0, #1
 8003afa:	d1f0      	bne.n	8003ade <_printf_common+0x86>
 8003afc:	2001      	movs	r0, #1
 8003afe:	4240      	negs	r0, r0
 8003b00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b02:	2030      	movs	r0, #48	; 0x30
 8003b04:	18e1      	adds	r1, r4, r3
 8003b06:	3143      	adds	r1, #67	; 0x43
 8003b08:	7008      	strb	r0, [r1, #0]
 8003b0a:	0021      	movs	r1, r4
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	3145      	adds	r1, #69	; 0x45
 8003b10:	7809      	ldrb	r1, [r1, #0]
 8003b12:	18a2      	adds	r2, r4, r2
 8003b14:	3243      	adds	r2, #67	; 0x43
 8003b16:	3302      	adds	r3, #2
 8003b18:	7011      	strb	r1, [r2, #0]
 8003b1a:	e7c1      	b.n	8003aa0 <_printf_common+0x48>
 8003b1c:	0022      	movs	r2, r4
 8003b1e:	2301      	movs	r3, #1
 8003b20:	321a      	adds	r2, #26
 8003b22:	9901      	ldr	r1, [sp, #4]
 8003b24:	9800      	ldr	r0, [sp, #0]
 8003b26:	9e08      	ldr	r6, [sp, #32]
 8003b28:	47b0      	blx	r6
 8003b2a:	1c43      	adds	r3, r0, #1
 8003b2c:	d0e6      	beq.n	8003afc <_printf_common+0xa4>
 8003b2e:	3701      	adds	r7, #1
 8003b30:	e7d1      	b.n	8003ad6 <_printf_common+0x7e>
	...

08003b34 <_printf_i>:
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b36:	b089      	sub	sp, #36	; 0x24
 8003b38:	9204      	str	r2, [sp, #16]
 8003b3a:	000a      	movs	r2, r1
 8003b3c:	3243      	adds	r2, #67	; 0x43
 8003b3e:	9305      	str	r3, [sp, #20]
 8003b40:	9003      	str	r0, [sp, #12]
 8003b42:	9202      	str	r2, [sp, #8]
 8003b44:	7e0a      	ldrb	r2, [r1, #24]
 8003b46:	000c      	movs	r4, r1
 8003b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4a:	2a6e      	cmp	r2, #110	; 0x6e
 8003b4c:	d100      	bne.n	8003b50 <_printf_i+0x1c>
 8003b4e:	e086      	b.n	8003c5e <_printf_i+0x12a>
 8003b50:	d81f      	bhi.n	8003b92 <_printf_i+0x5e>
 8003b52:	2a63      	cmp	r2, #99	; 0x63
 8003b54:	d033      	beq.n	8003bbe <_printf_i+0x8a>
 8003b56:	d808      	bhi.n	8003b6a <_printf_i+0x36>
 8003b58:	2a00      	cmp	r2, #0
 8003b5a:	d100      	bne.n	8003b5e <_printf_i+0x2a>
 8003b5c:	e08c      	b.n	8003c78 <_printf_i+0x144>
 8003b5e:	2a58      	cmp	r2, #88	; 0x58
 8003b60:	d04d      	beq.n	8003bfe <_printf_i+0xca>
 8003b62:	0025      	movs	r5, r4
 8003b64:	3542      	adds	r5, #66	; 0x42
 8003b66:	702a      	strb	r2, [r5, #0]
 8003b68:	e030      	b.n	8003bcc <_printf_i+0x98>
 8003b6a:	2a64      	cmp	r2, #100	; 0x64
 8003b6c:	d001      	beq.n	8003b72 <_printf_i+0x3e>
 8003b6e:	2a69      	cmp	r2, #105	; 0x69
 8003b70:	d1f7      	bne.n	8003b62 <_printf_i+0x2e>
 8003b72:	6819      	ldr	r1, [r3, #0]
 8003b74:	6825      	ldr	r5, [r4, #0]
 8003b76:	1d0a      	adds	r2, r1, #4
 8003b78:	0628      	lsls	r0, r5, #24
 8003b7a:	d529      	bpl.n	8003bd0 <_printf_i+0x9c>
 8003b7c:	6808      	ldr	r0, [r1, #0]
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	2800      	cmp	r0, #0
 8003b82:	da03      	bge.n	8003b8c <_printf_i+0x58>
 8003b84:	232d      	movs	r3, #45	; 0x2d
 8003b86:	9a02      	ldr	r2, [sp, #8]
 8003b88:	4240      	negs	r0, r0
 8003b8a:	7013      	strb	r3, [r2, #0]
 8003b8c:	4e6b      	ldr	r6, [pc, #428]	; (8003d3c <_printf_i+0x208>)
 8003b8e:	270a      	movs	r7, #10
 8003b90:	e04f      	b.n	8003c32 <_printf_i+0xfe>
 8003b92:	2a73      	cmp	r2, #115	; 0x73
 8003b94:	d074      	beq.n	8003c80 <_printf_i+0x14c>
 8003b96:	d808      	bhi.n	8003baa <_printf_i+0x76>
 8003b98:	2a6f      	cmp	r2, #111	; 0x6f
 8003b9a:	d01f      	beq.n	8003bdc <_printf_i+0xa8>
 8003b9c:	2a70      	cmp	r2, #112	; 0x70
 8003b9e:	d1e0      	bne.n	8003b62 <_printf_i+0x2e>
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	6809      	ldr	r1, [r1, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	6022      	str	r2, [r4, #0]
 8003ba8:	e003      	b.n	8003bb2 <_printf_i+0x7e>
 8003baa:	2a75      	cmp	r2, #117	; 0x75
 8003bac:	d016      	beq.n	8003bdc <_printf_i+0xa8>
 8003bae:	2a78      	cmp	r2, #120	; 0x78
 8003bb0:	d1d7      	bne.n	8003b62 <_printf_i+0x2e>
 8003bb2:	0022      	movs	r2, r4
 8003bb4:	2178      	movs	r1, #120	; 0x78
 8003bb6:	3245      	adds	r2, #69	; 0x45
 8003bb8:	7011      	strb	r1, [r2, #0]
 8003bba:	4e61      	ldr	r6, [pc, #388]	; (8003d40 <_printf_i+0x20c>)
 8003bbc:	e022      	b.n	8003c04 <_printf_i+0xd0>
 8003bbe:	0025      	movs	r5, r4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	3542      	adds	r5, #66	; 0x42
 8003bc4:	1d11      	adds	r1, r2, #4
 8003bc6:	6019      	str	r1, [r3, #0]
 8003bc8:	6813      	ldr	r3, [r2, #0]
 8003bca:	702b      	strb	r3, [r5, #0]
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e065      	b.n	8003c9c <_printf_i+0x168>
 8003bd0:	6808      	ldr	r0, [r1, #0]
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	0669      	lsls	r1, r5, #25
 8003bd6:	d5d3      	bpl.n	8003b80 <_printf_i+0x4c>
 8003bd8:	b200      	sxth	r0, r0
 8003bda:	e7d1      	b.n	8003b80 <_printf_i+0x4c>
 8003bdc:	6819      	ldr	r1, [r3, #0]
 8003bde:	6825      	ldr	r5, [r4, #0]
 8003be0:	1d08      	adds	r0, r1, #4
 8003be2:	6018      	str	r0, [r3, #0]
 8003be4:	6808      	ldr	r0, [r1, #0]
 8003be6:	062e      	lsls	r6, r5, #24
 8003be8:	d505      	bpl.n	8003bf6 <_printf_i+0xc2>
 8003bea:	4e54      	ldr	r6, [pc, #336]	; (8003d3c <_printf_i+0x208>)
 8003bec:	2708      	movs	r7, #8
 8003bee:	2a6f      	cmp	r2, #111	; 0x6f
 8003bf0:	d01b      	beq.n	8003c2a <_printf_i+0xf6>
 8003bf2:	270a      	movs	r7, #10
 8003bf4:	e019      	b.n	8003c2a <_printf_i+0xf6>
 8003bf6:	066d      	lsls	r5, r5, #25
 8003bf8:	d5f7      	bpl.n	8003bea <_printf_i+0xb6>
 8003bfa:	b280      	uxth	r0, r0
 8003bfc:	e7f5      	b.n	8003bea <_printf_i+0xb6>
 8003bfe:	3145      	adds	r1, #69	; 0x45
 8003c00:	4e4e      	ldr	r6, [pc, #312]	; (8003d3c <_printf_i+0x208>)
 8003c02:	700a      	strb	r2, [r1, #0]
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	6822      	ldr	r2, [r4, #0]
 8003c08:	1d01      	adds	r1, r0, #4
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	0615      	lsls	r5, r2, #24
 8003c10:	d521      	bpl.n	8003c56 <_printf_i+0x122>
 8003c12:	07d3      	lsls	r3, r2, #31
 8003c14:	d502      	bpl.n	8003c1c <_printf_i+0xe8>
 8003c16:	2320      	movs	r3, #32
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	6022      	str	r2, [r4, #0]
 8003c1c:	2710      	movs	r7, #16
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d103      	bne.n	8003c2a <_printf_i+0xf6>
 8003c22:	2320      	movs	r3, #32
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	439a      	bics	r2, r3
 8003c28:	6022      	str	r2, [r4, #0]
 8003c2a:	0023      	movs	r3, r4
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	3343      	adds	r3, #67	; 0x43
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	60a3      	str	r3, [r4, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	db58      	blt.n	8003cec <_printf_i+0x1b8>
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	6821      	ldr	r1, [r4, #0]
 8003c3e:	4391      	bics	r1, r2
 8003c40:	6021      	str	r1, [r4, #0]
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d154      	bne.n	8003cf0 <_printf_i+0x1bc>
 8003c46:	9d02      	ldr	r5, [sp, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05a      	beq.n	8003d02 <_printf_i+0x1ce>
 8003c4c:	0025      	movs	r5, r4
 8003c4e:	7833      	ldrb	r3, [r6, #0]
 8003c50:	3542      	adds	r5, #66	; 0x42
 8003c52:	702b      	strb	r3, [r5, #0]
 8003c54:	e055      	b.n	8003d02 <_printf_i+0x1ce>
 8003c56:	0655      	lsls	r5, r2, #25
 8003c58:	d5db      	bpl.n	8003c12 <_printf_i+0xde>
 8003c5a:	b280      	uxth	r0, r0
 8003c5c:	e7d9      	b.n	8003c12 <_printf_i+0xde>
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	680d      	ldr	r5, [r1, #0]
 8003c62:	1d10      	adds	r0, r2, #4
 8003c64:	6949      	ldr	r1, [r1, #20]
 8003c66:	6018      	str	r0, [r3, #0]
 8003c68:	6813      	ldr	r3, [r2, #0]
 8003c6a:	062e      	lsls	r6, r5, #24
 8003c6c:	d501      	bpl.n	8003c72 <_printf_i+0x13e>
 8003c6e:	6019      	str	r1, [r3, #0]
 8003c70:	e002      	b.n	8003c78 <_printf_i+0x144>
 8003c72:	066d      	lsls	r5, r5, #25
 8003c74:	d5fb      	bpl.n	8003c6e <_printf_i+0x13a>
 8003c76:	8019      	strh	r1, [r3, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	9d02      	ldr	r5, [sp, #8]
 8003c7c:	6123      	str	r3, [r4, #16]
 8003c7e:	e04f      	b.n	8003d20 <_printf_i+0x1ec>
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	1d11      	adds	r1, r2, #4
 8003c84:	6019      	str	r1, [r3, #0]
 8003c86:	6815      	ldr	r5, [r2, #0]
 8003c88:	2100      	movs	r1, #0
 8003c8a:	6862      	ldr	r2, [r4, #4]
 8003c8c:	0028      	movs	r0, r5
 8003c8e:	f000 f859 	bl	8003d44 <memchr>
 8003c92:	2800      	cmp	r0, #0
 8003c94:	d001      	beq.n	8003c9a <_printf_i+0x166>
 8003c96:	1b40      	subs	r0, r0, r5
 8003c98:	6060      	str	r0, [r4, #4]
 8003c9a:	6863      	ldr	r3, [r4, #4]
 8003c9c:	6123      	str	r3, [r4, #16]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	9a02      	ldr	r2, [sp, #8]
 8003ca2:	7013      	strb	r3, [r2, #0]
 8003ca4:	e03c      	b.n	8003d20 <_printf_i+0x1ec>
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	002a      	movs	r2, r5
 8003caa:	9904      	ldr	r1, [sp, #16]
 8003cac:	9803      	ldr	r0, [sp, #12]
 8003cae:	9d05      	ldr	r5, [sp, #20]
 8003cb0:	47a8      	blx	r5
 8003cb2:	1c43      	adds	r3, r0, #1
 8003cb4:	d03e      	beq.n	8003d34 <_printf_i+0x200>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	079b      	lsls	r3, r3, #30
 8003cba:	d415      	bmi.n	8003ce8 <_printf_i+0x1b4>
 8003cbc:	9b07      	ldr	r3, [sp, #28]
 8003cbe:	68e0      	ldr	r0, [r4, #12]
 8003cc0:	4298      	cmp	r0, r3
 8003cc2:	da39      	bge.n	8003d38 <_printf_i+0x204>
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	e037      	b.n	8003d38 <_printf_i+0x204>
 8003cc8:	0022      	movs	r2, r4
 8003cca:	2301      	movs	r3, #1
 8003ccc:	3219      	adds	r2, #25
 8003cce:	9904      	ldr	r1, [sp, #16]
 8003cd0:	9803      	ldr	r0, [sp, #12]
 8003cd2:	9e05      	ldr	r6, [sp, #20]
 8003cd4:	47b0      	blx	r6
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	d02c      	beq.n	8003d34 <_printf_i+0x200>
 8003cda:	3501      	adds	r5, #1
 8003cdc:	68e3      	ldr	r3, [r4, #12]
 8003cde:	9a07      	ldr	r2, [sp, #28]
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	42ab      	cmp	r3, r5
 8003ce4:	dcf0      	bgt.n	8003cc8 <_printf_i+0x194>
 8003ce6:	e7e9      	b.n	8003cbc <_printf_i+0x188>
 8003ce8:	2500      	movs	r5, #0
 8003cea:	e7f7      	b.n	8003cdc <_printf_i+0x1a8>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d0ad      	beq.n	8003c4c <_printf_i+0x118>
 8003cf0:	9d02      	ldr	r5, [sp, #8]
 8003cf2:	0039      	movs	r1, r7
 8003cf4:	f7fc fa8c 	bl	8000210 <__aeabi_uidivmod>
 8003cf8:	5c73      	ldrb	r3, [r6, r1]
 8003cfa:	3d01      	subs	r5, #1
 8003cfc:	702b      	strb	r3, [r5, #0]
 8003cfe:	2800      	cmp	r0, #0
 8003d00:	d1f7      	bne.n	8003cf2 <_printf_i+0x1be>
 8003d02:	2f08      	cmp	r7, #8
 8003d04:	d109      	bne.n	8003d1a <_printf_i+0x1e6>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	07db      	lsls	r3, r3, #31
 8003d0a:	d506      	bpl.n	8003d1a <_printf_i+0x1e6>
 8003d0c:	6863      	ldr	r3, [r4, #4]
 8003d0e:	6922      	ldr	r2, [r4, #16]
 8003d10:	4293      	cmp	r3, r2
 8003d12:	dc02      	bgt.n	8003d1a <_printf_i+0x1e6>
 8003d14:	2330      	movs	r3, #48	; 0x30
 8003d16:	3d01      	subs	r5, #1
 8003d18:	702b      	strb	r3, [r5, #0]
 8003d1a:	9b02      	ldr	r3, [sp, #8]
 8003d1c:	1b5b      	subs	r3, r3, r5
 8003d1e:	6123      	str	r3, [r4, #16]
 8003d20:	9b05      	ldr	r3, [sp, #20]
 8003d22:	aa07      	add	r2, sp, #28
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	0021      	movs	r1, r4
 8003d28:	9b04      	ldr	r3, [sp, #16]
 8003d2a:	9803      	ldr	r0, [sp, #12]
 8003d2c:	f7ff fe94 	bl	8003a58 <_printf_common>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d1b8      	bne.n	8003ca6 <_printf_i+0x172>
 8003d34:	2001      	movs	r0, #1
 8003d36:	4240      	negs	r0, r0
 8003d38:	b009      	add	sp, #36	; 0x24
 8003d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d3c:	08004069 	.word	0x08004069
 8003d40:	0800407a 	.word	0x0800407a

08003d44 <memchr>:
 8003d44:	b2c9      	uxtb	r1, r1
 8003d46:	1882      	adds	r2, r0, r2
 8003d48:	4290      	cmp	r0, r2
 8003d4a:	d101      	bne.n	8003d50 <memchr+0xc>
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	4770      	bx	lr
 8003d50:	7803      	ldrb	r3, [r0, #0]
 8003d52:	428b      	cmp	r3, r1
 8003d54:	d0fb      	beq.n	8003d4e <memchr+0xa>
 8003d56:	3001      	adds	r0, #1
 8003d58:	e7f6      	b.n	8003d48 <memchr+0x4>

08003d5a <memcpy>:
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d100      	bne.n	8003d64 <memcpy+0xa>
 8003d62:	bd10      	pop	{r4, pc}
 8003d64:	5ccc      	ldrb	r4, [r1, r3]
 8003d66:	54c4      	strb	r4, [r0, r3]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	e7f8      	b.n	8003d5e <memcpy+0x4>

08003d6c <memmove>:
 8003d6c:	b510      	push	{r4, lr}
 8003d6e:	4288      	cmp	r0, r1
 8003d70:	d902      	bls.n	8003d78 <memmove+0xc>
 8003d72:	188b      	adds	r3, r1, r2
 8003d74:	4298      	cmp	r0, r3
 8003d76:	d303      	bcc.n	8003d80 <memmove+0x14>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e007      	b.n	8003d8c <memmove+0x20>
 8003d7c:	5c8b      	ldrb	r3, [r1, r2]
 8003d7e:	5483      	strb	r3, [r0, r2]
 8003d80:	3a01      	subs	r2, #1
 8003d82:	d2fb      	bcs.n	8003d7c <memmove+0x10>
 8003d84:	bd10      	pop	{r4, pc}
 8003d86:	5ccc      	ldrb	r4, [r1, r3]
 8003d88:	54c4      	strb	r4, [r0, r3]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1fa      	bne.n	8003d86 <memmove+0x1a>
 8003d90:	e7f8      	b.n	8003d84 <memmove+0x18>
	...

08003d94 <_free_r>:
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	0005      	movs	r5, r0
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	d010      	beq.n	8003dbe <_free_r+0x2a>
 8003d9c:	1f0c      	subs	r4, r1, #4
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	da00      	bge.n	8003da6 <_free_r+0x12>
 8003da4:	18e4      	adds	r4, r4, r3
 8003da6:	0028      	movs	r0, r5
 8003da8:	f000 f8d4 	bl	8003f54 <__malloc_lock>
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <_free_r+0x90>)
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <_free_r+0x2c>
 8003db4:	6063      	str	r3, [r4, #4]
 8003db6:	6014      	str	r4, [r2, #0]
 8003db8:	0028      	movs	r0, r5
 8003dba:	f000 f8cc 	bl	8003f56 <__malloc_unlock>
 8003dbe:	bd70      	pop	{r4, r5, r6, pc}
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	d909      	bls.n	8003dd8 <_free_r+0x44>
 8003dc4:	6821      	ldr	r1, [r4, #0]
 8003dc6:	1860      	adds	r0, r4, r1
 8003dc8:	4283      	cmp	r3, r0
 8003dca:	d1f3      	bne.n	8003db4 <_free_r+0x20>
 8003dcc:	6818      	ldr	r0, [r3, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	1841      	adds	r1, r0, r1
 8003dd2:	6021      	str	r1, [r4, #0]
 8003dd4:	e7ee      	b.n	8003db4 <_free_r+0x20>
 8003dd6:	0013      	movs	r3, r2
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	2a00      	cmp	r2, #0
 8003ddc:	d001      	beq.n	8003de2 <_free_r+0x4e>
 8003dde:	42a2      	cmp	r2, r4
 8003de0:	d9f9      	bls.n	8003dd6 <_free_r+0x42>
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	1858      	adds	r0, r3, r1
 8003de6:	42a0      	cmp	r0, r4
 8003de8:	d10b      	bne.n	8003e02 <_free_r+0x6e>
 8003dea:	6820      	ldr	r0, [r4, #0]
 8003dec:	1809      	adds	r1, r1, r0
 8003dee:	1858      	adds	r0, r3, r1
 8003df0:	6019      	str	r1, [r3, #0]
 8003df2:	4282      	cmp	r2, r0
 8003df4:	d1e0      	bne.n	8003db8 <_free_r+0x24>
 8003df6:	6810      	ldr	r0, [r2, #0]
 8003df8:	6852      	ldr	r2, [r2, #4]
 8003dfa:	1841      	adds	r1, r0, r1
 8003dfc:	6019      	str	r1, [r3, #0]
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	e7da      	b.n	8003db8 <_free_r+0x24>
 8003e02:	42a0      	cmp	r0, r4
 8003e04:	d902      	bls.n	8003e0c <_free_r+0x78>
 8003e06:	230c      	movs	r3, #12
 8003e08:	602b      	str	r3, [r5, #0]
 8003e0a:	e7d5      	b.n	8003db8 <_free_r+0x24>
 8003e0c:	6821      	ldr	r1, [r4, #0]
 8003e0e:	1860      	adds	r0, r4, r1
 8003e10:	4282      	cmp	r2, r0
 8003e12:	d103      	bne.n	8003e1c <_free_r+0x88>
 8003e14:	6810      	ldr	r0, [r2, #0]
 8003e16:	6852      	ldr	r2, [r2, #4]
 8003e18:	1841      	adds	r1, r0, r1
 8003e1a:	6021      	str	r1, [r4, #0]
 8003e1c:	6062      	str	r2, [r4, #4]
 8003e1e:	605c      	str	r4, [r3, #4]
 8003e20:	e7ca      	b.n	8003db8 <_free_r+0x24>
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	20000098 	.word	0x20000098

08003e28 <_malloc_r>:
 8003e28:	2303      	movs	r3, #3
 8003e2a:	b570      	push	{r4, r5, r6, lr}
 8003e2c:	1ccd      	adds	r5, r1, #3
 8003e2e:	439d      	bics	r5, r3
 8003e30:	3508      	adds	r5, #8
 8003e32:	0006      	movs	r6, r0
 8003e34:	2d0c      	cmp	r5, #12
 8003e36:	d21e      	bcs.n	8003e76 <_malloc_r+0x4e>
 8003e38:	250c      	movs	r5, #12
 8003e3a:	42a9      	cmp	r1, r5
 8003e3c:	d81d      	bhi.n	8003e7a <_malloc_r+0x52>
 8003e3e:	0030      	movs	r0, r6
 8003e40:	f000 f888 	bl	8003f54 <__malloc_lock>
 8003e44:	4a25      	ldr	r2, [pc, #148]	; (8003edc <_malloc_r+0xb4>)
 8003e46:	6814      	ldr	r4, [r2, #0]
 8003e48:	0021      	movs	r1, r4
 8003e4a:	2900      	cmp	r1, #0
 8003e4c:	d119      	bne.n	8003e82 <_malloc_r+0x5a>
 8003e4e:	4c24      	ldr	r4, [pc, #144]	; (8003ee0 <_malloc_r+0xb8>)
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <_malloc_r+0x36>
 8003e56:	0030      	movs	r0, r6
 8003e58:	f000 f86a 	bl	8003f30 <_sbrk_r>
 8003e5c:	6020      	str	r0, [r4, #0]
 8003e5e:	0029      	movs	r1, r5
 8003e60:	0030      	movs	r0, r6
 8003e62:	f000 f865 	bl	8003f30 <_sbrk_r>
 8003e66:	1c43      	adds	r3, r0, #1
 8003e68:	d12b      	bne.n	8003ec2 <_malloc_r+0x9a>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	0030      	movs	r0, r6
 8003e6e:	6033      	str	r3, [r6, #0]
 8003e70:	f000 f871 	bl	8003f56 <__malloc_unlock>
 8003e74:	e003      	b.n	8003e7e <_malloc_r+0x56>
 8003e76:	2d00      	cmp	r5, #0
 8003e78:	dadf      	bge.n	8003e3a <_malloc_r+0x12>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	6033      	str	r3, [r6, #0]
 8003e7e:	2000      	movs	r0, #0
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	680b      	ldr	r3, [r1, #0]
 8003e84:	1b5b      	subs	r3, r3, r5
 8003e86:	d419      	bmi.n	8003ebc <_malloc_r+0x94>
 8003e88:	2b0b      	cmp	r3, #11
 8003e8a:	d903      	bls.n	8003e94 <_malloc_r+0x6c>
 8003e8c:	600b      	str	r3, [r1, #0]
 8003e8e:	18cc      	adds	r4, r1, r3
 8003e90:	6025      	str	r5, [r4, #0]
 8003e92:	e003      	b.n	8003e9c <_malloc_r+0x74>
 8003e94:	684b      	ldr	r3, [r1, #4]
 8003e96:	428c      	cmp	r4, r1
 8003e98:	d10d      	bne.n	8003eb6 <_malloc_r+0x8e>
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	f000 f85a 	bl	8003f56 <__malloc_unlock>
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	300b      	adds	r0, #11
 8003ea8:	1d23      	adds	r3, r4, #4
 8003eaa:	4390      	bics	r0, r2
 8003eac:	1ac3      	subs	r3, r0, r3
 8003eae:	d0e7      	beq.n	8003e80 <_malloc_r+0x58>
 8003eb0:	425a      	negs	r2, r3
 8003eb2:	50e2      	str	r2, [r4, r3]
 8003eb4:	e7e4      	b.n	8003e80 <_malloc_r+0x58>
 8003eb6:	6063      	str	r3, [r4, #4]
 8003eb8:	000c      	movs	r4, r1
 8003eba:	e7ef      	b.n	8003e9c <_malloc_r+0x74>
 8003ebc:	000c      	movs	r4, r1
 8003ebe:	6849      	ldr	r1, [r1, #4]
 8003ec0:	e7c3      	b.n	8003e4a <_malloc_r+0x22>
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	1cc4      	adds	r4, r0, #3
 8003ec6:	439c      	bics	r4, r3
 8003ec8:	42a0      	cmp	r0, r4
 8003eca:	d0e1      	beq.n	8003e90 <_malloc_r+0x68>
 8003ecc:	1a21      	subs	r1, r4, r0
 8003ece:	0030      	movs	r0, r6
 8003ed0:	f000 f82e 	bl	8003f30 <_sbrk_r>
 8003ed4:	1c43      	adds	r3, r0, #1
 8003ed6:	d1db      	bne.n	8003e90 <_malloc_r+0x68>
 8003ed8:	e7c7      	b.n	8003e6a <_malloc_r+0x42>
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	20000098 	.word	0x20000098
 8003ee0:	2000009c 	.word	0x2000009c

08003ee4 <_realloc_r>:
 8003ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee6:	0007      	movs	r7, r0
 8003ee8:	000d      	movs	r5, r1
 8003eea:	0016      	movs	r6, r2
 8003eec:	2900      	cmp	r1, #0
 8003eee:	d105      	bne.n	8003efc <_realloc_r+0x18>
 8003ef0:	0011      	movs	r1, r2
 8003ef2:	f7ff ff99 	bl	8003e28 <_malloc_r>
 8003ef6:	0004      	movs	r4, r0
 8003ef8:	0020      	movs	r0, r4
 8003efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efc:	2a00      	cmp	r2, #0
 8003efe:	d103      	bne.n	8003f08 <_realloc_r+0x24>
 8003f00:	f7ff ff48 	bl	8003d94 <_free_r>
 8003f04:	0034      	movs	r4, r6
 8003f06:	e7f7      	b.n	8003ef8 <_realloc_r+0x14>
 8003f08:	f000 f826 	bl	8003f58 <_malloc_usable_size_r>
 8003f0c:	002c      	movs	r4, r5
 8003f0e:	42b0      	cmp	r0, r6
 8003f10:	d2f2      	bcs.n	8003ef8 <_realloc_r+0x14>
 8003f12:	0031      	movs	r1, r6
 8003f14:	0038      	movs	r0, r7
 8003f16:	f7ff ff87 	bl	8003e28 <_malloc_r>
 8003f1a:	1e04      	subs	r4, r0, #0
 8003f1c:	d0ec      	beq.n	8003ef8 <_realloc_r+0x14>
 8003f1e:	0029      	movs	r1, r5
 8003f20:	0032      	movs	r2, r6
 8003f22:	f7ff ff1a 	bl	8003d5a <memcpy>
 8003f26:	0029      	movs	r1, r5
 8003f28:	0038      	movs	r0, r7
 8003f2a:	f7ff ff33 	bl	8003d94 <_free_r>
 8003f2e:	e7e3      	b.n	8003ef8 <_realloc_r+0x14>

08003f30 <_sbrk_r>:
 8003f30:	2300      	movs	r3, #0
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	4c06      	ldr	r4, [pc, #24]	; (8003f50 <_sbrk_r+0x20>)
 8003f36:	0005      	movs	r5, r0
 8003f38:	0008      	movs	r0, r1
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	f7fc fed8 	bl	8000cf0 <_sbrk>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d103      	bne.n	8003f4c <_sbrk_r+0x1c>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d000      	beq.n	8003f4c <_sbrk_r+0x1c>
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	bd70      	pop	{r4, r5, r6, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	20000194 	.word	0x20000194

08003f54 <__malloc_lock>:
 8003f54:	4770      	bx	lr

08003f56 <__malloc_unlock>:
 8003f56:	4770      	bx	lr

08003f58 <_malloc_usable_size_r>:
 8003f58:	1f0b      	subs	r3, r1, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1f18      	subs	r0, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da01      	bge.n	8003f66 <_malloc_usable_size_r+0xe>
 8003f62:	580b      	ldr	r3, [r1, r0]
 8003f64:	18c0      	adds	r0, r0, r3
 8003f66:	4770      	bx	lr

08003f68 <_init>:
 8003f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6e:	bc08      	pop	{r3}
 8003f70:	469e      	mov	lr, r3
 8003f72:	4770      	bx	lr

08003f74 <_fini>:
 8003f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7a:	bc08      	pop	{r3}
 8003f7c:	469e      	mov	lr, r3
 8003f7e:	4770      	bx	lr
