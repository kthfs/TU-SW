
Data_sequence_range_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ef0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b8  080040b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080040b8  080040b8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040b8  080040b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000074  08004134  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08004134  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008465  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000161a  00000000  00000000  00028501  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  00029b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002a390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b003  00000000  00000000  0002ab68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076a0  00000000  00000000  00045b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a2980  00000000  00000000  0004d20b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000efb8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002008  00000000  00000000  000efc08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003f94 	.word	0x08003f94

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08003f94 	.word	0x08003f94

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <CS_Select>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Select CS
void CS_Select()  {
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin,GPIO_PIN_RESET);
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <CS_Select+0x18>)
 8000222:	2200      	movs	r2, #0
 8000224:	2140      	movs	r1, #64	; 0x40
 8000226:	0018      	movs	r0, r3
 8000228:	f001 f8cd 	bl	80013c6 <HAL_GPIO_WritePin>
}
 800022c:	46c0      	nop			; (mov r8, r8)
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	48000400 	.word	0x48000400

08000238 <CS_Deselect>:


// Deselect CS
void CS_Deselect()  {
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin,GPIO_PIN_SET);
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <CS_Deselect+0x18>)
 800023e:	2201      	movs	r2, #1
 8000240:	2140      	movs	r1, #64	; 0x40
 8000242:	0018      	movs	r0, r3
 8000244:	f001 f8bf 	bl	80013c6 <HAL_GPIO_WritePin>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	48000400 	.word	0x48000400

08000254 <wait_Miso>:

// Waits until MISO goes low
void wait_Miso() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)>0){
 8000258:	e000      	b.n	800025c <wait_Miso+0x8>
		__NOP();
 800025a:	46c0      	nop			; (mov r8, r8)
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_6)>0){
 800025c:	2390      	movs	r3, #144	; 0x90
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f892 	bl	800138c <HAL_GPIO_ReadPin>
 8000268:	1e03      	subs	r3, r0, #0
 800026a:	d1f6      	bne.n	800025a <wait_Miso+0x6>
	}
}
 800026c:	46c0      	nop			; (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <writeReg>:

//Write to register
void writeReg(uint8_t regAddr, uint8_t value)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	0002      	movs	r2, r0
 800027c:	1dfb      	adds	r3, r7, #7
 800027e:	701a      	strb	r2, [r3, #0]
 8000280:	1dbb      	adds	r3, r7, #6
 8000282:	1c0a      	adds	r2, r1, #0
 8000284:	701a      	strb	r2, [r3, #0]
  CS_Select();                     									   // Select CS
 8000286:	f7ff ffc9 	bl	800021c <CS_Select>
  wait_Miso();                          							   // Wait until MISO goes low
 800028a:	f7ff ffe3 	bl	8000254 <wait_Miso>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)&regAddr, 1, 100);                // Send register address
 800028e:	1df9      	adds	r1, r7, #7
 8000290:	4808      	ldr	r0, [pc, #32]	; (80002b4 <writeReg+0x40>)
 8000292:	2364      	movs	r3, #100	; 0x64
 8000294:	2201      	movs	r2, #1
 8000296:	f001 ffa3 	bl	80021e0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t*)&value, 1, 100);                  // Send value
 800029a:	1db9      	adds	r1, r7, #6
 800029c:	4805      	ldr	r0, [pc, #20]	; (80002b4 <writeReg+0x40>)
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	2201      	movs	r2, #1
 80002a2:	f001 ff9d 	bl	80021e0 <HAL_SPI_Transmit>
  CS_Deselect();                    	   							   // Deselect CC1101
 80002a6:	f7ff ffc7 	bl	8000238 <CS_Deselect>
}
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	2000009c 	.word	0x2000009c

080002b8 <halRfWriteReg>:

// Write to register (ONLY USED FOR SETTING THE INTIAL SETTINGS. The name is "halRfWriteReg" so it matches with SMARTRF Studio
void halRfWriteReg(uint8_t setting, uint8_t value)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	0002      	movs	r2, r0
 80002c0:	1dfb      	adds	r3, r7, #7
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	1dbb      	adds	r3, r7, #6
 80002c6:	1c0a      	adds	r2, r1, #0
 80002c8:	701a      	strb	r2, [r3, #0]
	writeReg(setting, value);
 80002ca:	1dbb      	adds	r3, r7, #6
 80002cc:	781a      	ldrb	r2, [r3, #0]
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f7ff ffcd 	bl	8000274 <writeReg>
}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	46bd      	mov	sp, r7
 80002de:	b002      	add	sp, #8
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <command_strobe1>:

// Send command strobe (FIFO_BYTES_AVAILABLE CASE 1)
void command_strobe1(uint8_t cmd){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	0002      	movs	r2, r0
 80002ec:	1dfb      	adds	r3, r7, #7
 80002ee:	701a      	strb	r2, [r3, #0]
    cmd = cmd | 0x00;                									// | 0x00 means that R/W=0(FIFO_BYTES_AVAILABLE means the TXFIFO when status byte has been sent)/ burst=0(strobe)
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	781a      	ldrb	r2, [r3, #0]
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	701a      	strb	r2, [r3, #0]
    CS_Select();            		 									// set the CS pin to LOW
 80002f8:	f7ff ff90 	bl	800021c <CS_Select>
    wait_Miso();                          								// Wait until MISO goes low
 80002fc:	f7ff ffaa 	bl	8000254 <wait_Miso>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, 100);                   // Send register address
 8000300:	1df9      	adds	r1, r7, #7
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <command_strobe1+0x34>)
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	f001 ff6a 	bl	80021e0 <HAL_SPI_Transmit>
    CS_Deselect();
 800030c:	f7ff ff94 	bl	8000238 <CS_Deselect>
  }
 8000310:	46c0      	nop			; (mov r8, r8)
 8000312:	46bd      	mov	sp, r7
 8000314:	b002      	add	sp, #8
 8000316:	bd80      	pop	{r7, pc}
 8000318:	2000009c 	.word	0x2000009c

0800031c <send_data_sequence>:
		  HAL_SPI_Transmit(&hspi1, (uint8_t*)&element, 1, 100);                  // Send data
        }
    CS_Deselect();
}
// Send data with sequence numbers
void send_data_sequence(char databuffer[],uint8_t length,uint16_t sequence ){
 800031c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	0008      	movs	r0, r1
 8000326:	0011      	movs	r1, r2
 8000328:	1cfb      	adds	r3, r7, #3
 800032a:	1c02      	adds	r2, r0, #0
 800032c:	701a      	strb	r2, [r3, #0]
 800032e:	003b      	movs	r3, r7
 8000330:	1c0a      	adds	r2, r1, #0
 8000332:	801a      	strh	r2, [r3, #0]
	int i;
	uint8_t element;
	uint8_t LSB_seq;
	uint8_t MSB_seq;
	LSB_seq = sequence & 0xFF;
 8000334:	003b      	movs	r3, r7
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2da      	uxtb	r2, r3
 800033a:	250a      	movs	r5, #10
 800033c:	197b      	adds	r3, r7, r5
 800033e:	701a      	strb	r2, [r3, #0]
	MSB_seq = sequence >> 8;
 8000340:	003b      	movs	r3, r7
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	b29b      	uxth	r3, r3
 8000348:	b2da      	uxtb	r2, r3
 800034a:	2609      	movs	r6, #9
 800034c:	19bb      	adds	r3, r7, r6
 800034e:	701a      	strb	r2, [r3, #0]
	CS_Select();                		 								// set the CS pin to LOW
 8000350:	f7ff ff64 	bl	800021c <CS_Select>
    wait_Miso();                         								// Wait until MISO goes low
 8000354:	f7ff ff7e 	bl	8000254 <wait_Miso>
    uint8_t TXfifo = TX_FIFO;
 8000358:	2408      	movs	r4, #8
 800035a:	193b      	adds	r3, r7, r4
 800035c:	223f      	movs	r2, #63	; 0x3f
 800035e:	701a      	strb	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000360:	1939      	adds	r1, r7, r4
 8000362:	4824      	ldr	r0, [pc, #144]	; (80003f4 <send_data_sequence+0xd8>)
 8000364:	2364      	movs	r3, #100	; 0x64
 8000366:	2201      	movs	r2, #1
 8000368:	f001 ff3a 	bl	80021e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&length, 1, 100);			   // Send length of data
 800036c:	1cf9      	adds	r1, r7, #3
 800036e:	4821      	ldr	r0, [pc, #132]	; (80003f4 <send_data_sequence+0xd8>)
 8000370:	2364      	movs	r3, #100	; 0x64
 8000372:	2201      	movs	r2, #1
 8000374:	f001 ff34 	bl	80021e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000378:	1939      	adds	r1, r7, r4
 800037a:	481e      	ldr	r0, [pc, #120]	; (80003f4 <send_data_sequence+0xd8>)
 800037c:	2364      	movs	r3, #100	; 0x64
 800037e:	2201      	movs	r2, #1
 8000380:	f001 ff2e 	bl	80021e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&MSB_seq, 1, 100);			   // Send MSB of sequence number
 8000384:	19b9      	adds	r1, r7, r6
 8000386:	481b      	ldr	r0, [pc, #108]	; (80003f4 <send_data_sequence+0xd8>)
 8000388:	2364      	movs	r3, #100	; 0x64
 800038a:	2201      	movs	r2, #1
 800038c:	f001 ff28 	bl	80021e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000390:	1939      	adds	r1, r7, r4
 8000392:	4818      	ldr	r0, [pc, #96]	; (80003f4 <send_data_sequence+0xd8>)
 8000394:	2364      	movs	r3, #100	; 0x64
 8000396:	2201      	movs	r2, #1
 8000398:	f001 ff22 	bl	80021e0 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&LSB_seq, 1, 100);			   // Send LSB of sequence number
 800039c:	1979      	adds	r1, r7, r5
 800039e:	4815      	ldr	r0, [pc, #84]	; (80003f4 <send_data_sequence+0xd8>)
 80003a0:	2364      	movs	r3, #100	; 0x64
 80003a2:	2201      	movs	r2, #1
 80003a4:	f001 ff1c 	bl	80021e0 <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e016      	b.n	80003dc <send_data_sequence+0xc0>
        {
          element = databuffer[i];
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	781a      	ldrb	r2, [r3, #0]
 80003b6:	240b      	movs	r4, #11
 80003b8:	193b      	adds	r3, r7, r4
 80003ba:	701a      	strb	r2, [r3, #0]
		  HAL_SPI_Transmit(&hspi1, (uint8_t*)&TXfifo, 1, 100);               // Send the data
 80003bc:	2308      	movs	r3, #8
 80003be:	18f9      	adds	r1, r7, r3
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <send_data_sequence+0xd8>)
 80003c2:	2364      	movs	r3, #100	; 0x64
 80003c4:	2201      	movs	r2, #1
 80003c6:	f001 ff0b 	bl	80021e0 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi1, (uint8_t*)&element, 1, 100);                  // Send data
 80003ca:	1939      	adds	r1, r7, r4
 80003cc:	4809      	ldr	r0, [pc, #36]	; (80003f4 <send_data_sequence+0xd8>)
 80003ce:	2364      	movs	r3, #100	; 0x64
 80003d0:	2201      	movs	r2, #1
 80003d2:	f001 ff05 	bl	80021e0 <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3301      	adds	r3, #1
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	1cfb      	adds	r3, r7, #3
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	3b02      	subs	r3, #2
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	dbe2      	blt.n	80003ae <send_data_sequence+0x92>
        }
    CS_Deselect();
 80003e8:	f7ff ff26 	bl	8000238 <CS_Deselect>
}
 80003ec:	46c0      	nop			; (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b005      	add	sp, #20
 80003f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003f4:	2000009c 	.word	0x2000009c

080003f8 <readReg>:
// Read register
void readReg(uint8_t regAddr, uint8_t regType) {
 80003f8:	b590      	push	{r4, r7, lr}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	0002      	movs	r2, r0
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	701a      	strb	r2, [r3, #0]
 8000404:	1dbb      	adds	r3, r7, #6
 8000406:	1c0a      	adds	r2, r1, #0
 8000408:	701a      	strb	r2, [r3, #0]
    uint8_t addr;
    addr = regAddr | regType;			  								 // Bitwise and to get the right address
 800040a:	1dfa      	adds	r2, r7, #7
 800040c:	1dbb      	adds	r3, r7, #6
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	4313      	orrs	r3, r2
 8000414:	b2da      	uxtb	r2, r3
 8000416:	240f      	movs	r4, #15
 8000418:	193b      	adds	r3, r7, r4
 800041a:	701a      	strb	r2, [r3, #0]
    CS_Select();                										 // set the SS pin to LOW
 800041c:	f7ff fefe 	bl	800021c <CS_Select>
    wait_Miso();                          								 // Wait until MISO goes low
 8000420:	f7ff ff18 	bl	8000254 <wait_Miso>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&addr, 1, 100);                   // Send register address
 8000424:	1939      	adds	r1, r7, r4
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <readReg+0x50>)
 8000428:	2364      	movs	r3, #100	; 0x64
 800042a:	2201      	movs	r2, #1
 800042c:	f001 fed8 	bl	80021e0 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result (need to send dummy message)
 8000430:	4906      	ldr	r1, [pc, #24]	; (800044c <readReg+0x54>)
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <readReg+0x50>)
 8000434:	2364      	movs	r3, #100	; 0x64
 8000436:	2201      	movs	r2, #1
 8000438:	f002 f82a 	bl	8002490 <HAL_SPI_Receive>
    CS_Deselect();                    							 		 // set the SS pin to HIGH
 800043c:	f7ff fefc 	bl	8000238 <CS_Deselect>

}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b005      	add	sp, #20
 8000446:	bd90      	pop	{r4, r7, pc}
 8000448:	2000009c 	.word	0x2000009c
 800044c:	20000184 	.word	0x20000184

08000450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000452:	b0ab      	sub	sp, #172	; 0xac
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char MSG[40];
	int datalen = 4;   // Set length of payload. Note that the first length byte is not inluded in this.
 8000456:	2004      	movs	r0, #4
 8000458:	2284      	movs	r2, #132	; 0x84
 800045a:	2118      	movs	r1, #24
 800045c:	1879      	adds	r1, r7, r1
 800045e:	1889      	adds	r1, r1, r2
 8000460:	6008      	str	r0, [r1, #0]
						// However the 2 sequence bytes are included. Max value is 63.
	char data[datalen];
 8000462:	2118      	movs	r1, #24
 8000464:	468c      	mov	ip, r1
 8000466:	44bc      	add	ip, r7
 8000468:	4462      	add	r2, ip
 800046a:	6810      	ldr	r0, [r2, #0]
 800046c:	0001      	movs	r1, r0
 800046e:	6079      	str	r1, [r7, #4]
 8000470:	0008      	movs	r0, r1
 8000472:	3801      	subs	r0, #1
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	603a      	str	r2, [r7, #0]
 8000478:	2218      	movs	r2, #24
 800047a:	4694      	mov	ip, r2
 800047c:	44bc      	add	ip, r7
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	4462      	add	r2, ip
 8000482:	6010      	str	r0, [r2, #0]
 8000484:	0008      	movs	r0, r1
 8000486:	6138      	str	r0, [r7, #16]
 8000488:	2000      	movs	r0, #0
 800048a:	6178      	str	r0, [r7, #20]
 800048c:	693a      	ldr	r2, [r7, #16]
 800048e:	0f50      	lsrs	r0, r2, #29
 8000490:	697a      	ldr	r2, [r7, #20]
 8000492:	00d2      	lsls	r2, r2, #3
 8000494:	60fa      	str	r2, [r7, #12]
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	4302      	orrs	r2, r0
 800049a:	60fa      	str	r2, [r7, #12]
 800049c:	693a      	ldr	r2, [r7, #16]
 800049e:	00d2      	lsls	r2, r2, #3
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	000a      	movs	r2, r1
 80004a4:	0015      	movs	r5, r2
 80004a6:	2200      	movs	r2, #0
 80004a8:	0016      	movs	r6, r2
 80004aa:	0f6a      	lsrs	r2, r5, #29
 80004ac:	00f4      	lsls	r4, r6, #3
 80004ae:	4314      	orrs	r4, r2
 80004b0:	00eb      	lsls	r3, r5, #3
 80004b2:	000b      	movs	r3, r1
 80004b4:	3307      	adds	r3, #7
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	466a      	mov	r2, sp
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	469d      	mov	sp, r3
 80004c0:	466b      	mov	r3, sp
 80004c2:	3300      	adds	r3, #0
 80004c4:	2294      	movs	r2, #148	; 0x94
 80004c6:	18ba      	adds	r2, r7, r2
 80004c8:	6013      	str	r3, [r2, #0]
	int RX_BUFFER[20];
	uint16_t sequence_number = 1;
 80004ca:	238a      	movs	r3, #138	; 0x8a
 80004cc:	2218      	movs	r2, #24
 80004ce:	4694      	mov	ip, r2
 80004d0:	44bc      	add	ip, r7
 80004d2:	4463      	add	r3, ip
 80004d4:	2201      	movs	r2, #1
 80004d6:	801a      	strh	r2, [r3, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fc7c 	bl	8000dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f9b8 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fa86 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 fa54 	bl	8000990 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80004e8:	f000 fa14 	bl	8000914 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CS_Deselect();
 80004ec:	f7ff fea4 	bl	8000238 <CS_Deselect>
  sprintf(MSG, "Serial Monitor Engaged\r\n");
 80004f0:	2154      	movs	r1, #84	; 0x54
 80004f2:	2318      	movs	r3, #24
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	185b      	adds	r3, r3, r1
 80004f8:	4acc      	ldr	r2, [pc, #816]	; (800082c <main+0x3dc>)
 80004fa:	ca31      	ldmia	r2!, {r0, r4, r5}
 80004fc:	c331      	stmia	r3!, {r0, r4, r5}
 80004fe:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000500:	c331      	stmia	r3!, {r0, r4, r5}
 8000502:	7812      	ldrb	r2, [r2, #0]
 8000504:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000506:	000c      	movs	r4, r1
 8000508:	2318      	movs	r3, #24
 800050a:	469c      	mov	ip, r3
 800050c:	44bc      	add	ip, r7
 800050e:	4461      	add	r1, ip
 8000510:	48c7      	ldr	r0, [pc, #796]	; (8000830 <main+0x3e0>)
 8000512:	2364      	movs	r3, #100	; 0x64
 8000514:	2228      	movs	r2, #40	; 0x28
 8000516:	f002 fcf7 	bl	8002f08 <HAL_UART_Transmit>
  memset(MSG, 0, sizeof (MSG));
 800051a:	0021      	movs	r1, r4
 800051c:	2318      	movs	r3, #24
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	185b      	adds	r3, r3, r1
 8000522:	2228      	movs	r2, #40	; 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	0018      	movs	r0, r3
 8000528:	f003 f924 	bl	8003774 <memset>

  //SETUP SETTINGS (Imported from SMART RF Studios)
  halRfWriteReg(IOCFG0,0x06);    //GDO0 Output Pin Configuration
 800052c:	2106      	movs	r1, #6
 800052e:	2002      	movs	r0, #2
 8000530:	f7ff fec2 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FIFOTHR,0x47);   //RX FIFO and TX FIFO Thresholds
 8000534:	2147      	movs	r1, #71	; 0x47
 8000536:	2003      	movs	r0, #3
 8000538:	f7ff febe 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(PKTCTRL0,0x45);  //Packet Automation Control
 800053c:	2145      	movs	r1, #69	; 0x45
 800053e:	2008      	movs	r0, #8
 8000540:	f7ff feba 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCTRL1,0x08);   //Frequency Synthesizer Control
 8000544:	2108      	movs	r1, #8
 8000546:	200b      	movs	r0, #11
 8000548:	f7ff feb6 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREQ2,0x10);     //Frequency Control Word, High Byte
 800054c:	2110      	movs	r1, #16
 800054e:	200d      	movs	r0, #13
 8000550:	f7ff feb2 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREQ1,0xEA);     //Frequency Control Word, Middle Byte
 8000554:	21ea      	movs	r1, #234	; 0xea
 8000556:	200e      	movs	r0, #14
 8000558:	f7ff feae 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREQ0,0x56);     //Frequency Control Word, Low Byte
 800055c:	2156      	movs	r1, #86	; 0x56
 800055e:	200f      	movs	r0, #15
 8000560:	f7ff feaa 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MDMCFG4,0x7B);   //Modem Configuration
 8000564:	217b      	movs	r1, #123	; 0x7b
 8000566:	2010      	movs	r0, #16
 8000568:	f7ff fea6 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MDMCFG3,0x83);   //Modem Configuration
 800056c:	2183      	movs	r1, #131	; 0x83
 800056e:	2011      	movs	r0, #17
 8000570:	f7ff fea2 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MDMCFG2,0x13);   //Modem Configuration
 8000574:	2113      	movs	r1, #19
 8000576:	2012      	movs	r0, #18
 8000578:	f7ff fe9e 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(DEVIATN,0x42);   //Modem Deviation Setting
 800057c:	2142      	movs	r1, #66	; 0x42
 800057e:	2015      	movs	r0, #21
 8000580:	f7ff fe9a 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MCSM0,0x18);     //Main Radio Control State Machine Configuration
 8000584:	2118      	movs	r1, #24
 8000586:	2018      	movs	r0, #24
 8000588:	f7ff fe96 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FOCCFG,0x1D);    //Frequency Offset Compensation Configuration
 800058c:	211d      	movs	r1, #29
 800058e:	2019      	movs	r0, #25
 8000590:	f7ff fe92 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(BSCFG,0x1C);     //Bit Synchronization Configuration
 8000594:	211c      	movs	r1, #28
 8000596:	201a      	movs	r0, #26
 8000598:	f7ff fe8e 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(AGCCTRL2,0xC7);  //AGC Control
 800059c:	21c7      	movs	r1, #199	; 0xc7
 800059e:	201b      	movs	r0, #27
 80005a0:	f7ff fe8a 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(AGCCTRL1,0x00);  //AGC Control
 80005a4:	2100      	movs	r1, #0
 80005a6:	201c      	movs	r0, #28
 80005a8:	f7ff fe86 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(AGCCTRL0,0xB2);  //AGC Control
 80005ac:	21b2      	movs	r1, #178	; 0xb2
 80005ae:	201d      	movs	r0, #29
 80005b0:	f7ff fe82 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(WORCTRL,0xFB);   //Wake On Radio Control
 80005b4:	21fb      	movs	r1, #251	; 0xfb
 80005b6:	2020      	movs	r0, #32
 80005b8:	f7ff fe7e 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FREND1,0xB6);    //Front End RX Configuration
 80005bc:	21b6      	movs	r1, #182	; 0xb6
 80005be:	2021      	movs	r0, #33	; 0x21
 80005c0:	f7ff fe7a 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL3,0xEA);    //Frequency Synthesizer Calibration
 80005c4:	21ea      	movs	r1, #234	; 0xea
 80005c6:	2023      	movs	r0, #35	; 0x23
 80005c8:	f7ff fe76 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL2,0x2A);    //Frequency Synthesizer Calibration
 80005cc:	212a      	movs	r1, #42	; 0x2a
 80005ce:	2024      	movs	r0, #36	; 0x24
 80005d0:	f7ff fe72 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL1,0x00);    //Frequency Synthesizer Calibration
 80005d4:	2100      	movs	r1, #0
 80005d6:	2025      	movs	r0, #37	; 0x25
 80005d8:	f7ff fe6e 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(FSCAL0,0x1F);    //Frequency Synthesizer Calibration
 80005dc:	211f      	movs	r1, #31
 80005de:	2026      	movs	r0, #38	; 0x26
 80005e0:	f7ff fe6a 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(TEST2,0x81);     //Various Test Settings
 80005e4:	2181      	movs	r1, #129	; 0x81
 80005e6:	202c      	movs	r0, #44	; 0x2c
 80005e8:	f7ff fe66 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(TEST1,0x35);     //Various Test Settings
 80005ec:	2135      	movs	r1, #53	; 0x35
 80005ee:	202d      	movs	r0, #45	; 0x2d
 80005f0:	f7ff fe62 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(TEST0,0x09);     //Various Test Settings
 80005f4:	2109      	movs	r1, #9
 80005f6:	202e      	movs	r0, #46	; 0x2e
 80005f8:	f7ff fe5e 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(VERSION,0x14);   //Chip ID
 80005fc:	2114      	movs	r1, #20
 80005fe:	2031      	movs	r0, #49	; 0x31
 8000600:	f7ff fe5a 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(LQI,0x5C);       //Demodulator Estimate for Link Quality
 8000604:	215c      	movs	r1, #92	; 0x5c
 8000606:	2033      	movs	r0, #51	; 0x33
 8000608:	f7ff fe56 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(RSSI,0x80);      //Received Signal Strength Indication
 800060c:	2180      	movs	r1, #128	; 0x80
 800060e:	2034      	movs	r0, #52	; 0x34
 8000610:	f7ff fe52 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(MARCSTATE,0x01); //Main Radio Control State Machine State
 8000614:	2101      	movs	r1, #1
 8000616:	2035      	movs	r0, #53	; 0x35
 8000618:	f7ff fe4e 	bl	80002b8 <halRfWriteReg>
  halRfWriteReg(VCO_VC_DAC,0x94);//Current Setting from PLL Calibration Module
 800061c:	2194      	movs	r1, #148	; 0x94
 800061e:	2039      	movs	r0, #57	; 0x39
 8000620:	f7ff fe4a 	bl	80002b8 <halRfWriteReg>

  // POWER SETTING (has to be done manually without register export)
  halRfWriteReg(0x3E,0xC0); // PATABLE 0 to 10dbm
 8000624:	21c0      	movs	r1, #192	; 0xc0
 8000626:	203e      	movs	r0, #62	; 0x3e
 8000628:	f7ff fe46 	bl	80002b8 <halRfWriteReg>

// Create data array
  int i;
  for (i = 0; i < sizeof(data); ++i)
 800062c:	2300      	movs	r3, #0
 800062e:	228c      	movs	r2, #140	; 0x8c
 8000630:	2118      	movs	r1, #24
 8000632:	468c      	mov	ip, r1
 8000634:	44bc      	add	ip, r7
 8000636:	4462      	add	r2, ip
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	e01a      	b.n	8000672 <main+0x222>
    {
      data[i] = 2 * i;
 800063c:	208c      	movs	r0, #140	; 0x8c
 800063e:	2318      	movs	r3, #24
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	181b      	adds	r3, r3, r0
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	18db      	adds	r3, r3, r3
 800064a:	b2d9      	uxtb	r1, r3
 800064c:	2394      	movs	r3, #148	; 0x94
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	2318      	movs	r3, #24
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	181b      	adds	r3, r3, r0
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	18d3      	adds	r3, r2, r3
 800065c:	1c0a      	adds	r2, r1, #0
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(data); ++i)
 8000660:	2318      	movs	r3, #24
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	181b      	adds	r3, r3, r0
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	3301      	adds	r3, #1
 800066a:	2218      	movs	r2, #24
 800066c:	18ba      	adds	r2, r7, r2
 800066e:	1812      	adds	r2, r2, r0
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	687a      	ldr	r2, [r7, #4]
 8000674:	238c      	movs	r3, #140	; 0x8c
 8000676:	2118      	movs	r1, #24
 8000678:	468c      	mov	ip, r1
 800067a:	44bc      	add	ip, r7
 800067c:	4463      	add	r3, ip
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d8db      	bhi.n	800063c <main+0x1ec>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (state == 1){
 8000684:	4b6b      	ldr	r3, [pc, #428]	; (8000834 <main+0x3e4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d122      	bne.n	80006d2 <main+0x282>

		  sprintf(MSG, "State1\r\n");
 800068c:	2154      	movs	r1, #84	; 0x54
 800068e:	2318      	movs	r3, #24
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	185b      	adds	r3, r3, r1
 8000694:	4a68      	ldr	r2, [pc, #416]	; (8000838 <main+0x3e8>)
 8000696:	ca11      	ldmia	r2!, {r0, r4}
 8000698:	c311      	stmia	r3!, {r0, r4}
 800069a:	7812      	ldrb	r2, [r2, #0]
 800069c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 800069e:	000c      	movs	r4, r1
 80006a0:	2318      	movs	r3, #24
 80006a2:	469c      	mov	ip, r3
 80006a4:	44bc      	add	ip, r7
 80006a6:	4461      	add	r1, ip
 80006a8:	4861      	ldr	r0, [pc, #388]	; (8000830 <main+0x3e0>)
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	2228      	movs	r2, #40	; 0x28
 80006ae:	f002 fc2b 	bl	8002f08 <HAL_UART_Transmit>
		  memset(MSG, 0, sizeof MSG);
 80006b2:	0021      	movs	r1, r4
 80006b4:	2318      	movs	r3, #24
 80006b6:	18fb      	adds	r3, r7, r3
 80006b8:	185b      	adds	r3, r3, r1
 80006ba:	2228      	movs	r2, #40	; 0x28
 80006bc:	2100      	movs	r1, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f003 f858 	bl	8003774 <memset>
		  sequence_number = 1;
 80006c4:	238a      	movs	r3, #138	; 0x8a
 80006c6:	2218      	movs	r2, #24
 80006c8:	4694      	mov	ip, r2
 80006ca:	44bc      	add	ip, r7
 80006cc:	4463      	add	r3, ip
 80006ce:	2201      	movs	r2, #1
 80006d0:	801a      	strh	r2, [r3, #0]




	  }
	  if (state == 2){
 80006d2:	4b58      	ldr	r3, [pc, #352]	; (8000834 <main+0x3e4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d000      	beq.n	80006dc <main+0x28c>
 80006da:	e0a3      	b.n	8000824 <main+0x3d4>

		  readReg(MARCSTATE, STATUS_REGISTER);
 80006dc:	21c0      	movs	r1, #192	; 0xc0
 80006de:	2035      	movs	r0, #53	; 0x35
 80006e0:	f7ff fe8a 	bl	80003f8 <readReg>

		  sprintf(MSG, "MCU_state: 2    Tranceiver_state: %i\r\n", (unsigned int)SPI_BUFFER[0]);
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <main+0x3ec>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	001a      	movs	r2, r3
 80006ea:	4955      	ldr	r1, [pc, #340]	; (8000840 <main+0x3f0>)
 80006ec:	2454      	movs	r4, #84	; 0x54
 80006ee:	2318      	movs	r3, #24
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	191b      	adds	r3, r3, r4
 80006f4:	0018      	movs	r0, r3
 80006f6:	f003 f845 	bl	8003784 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80006fa:	2318      	movs	r3, #24
 80006fc:	18fb      	adds	r3, r7, r3
 80006fe:	1919      	adds	r1, r3, r4
 8000700:	484b      	ldr	r0, [pc, #300]	; (8000830 <main+0x3e0>)
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2228      	movs	r2, #40	; 0x28
 8000706:	f002 fbff 	bl	8002f08 <HAL_UART_Transmit>
		  memset(MSG, 0, sizeof MSG);
 800070a:	2318      	movs	r3, #24
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	191b      	adds	r3, r3, r4
 8000710:	2228      	movs	r2, #40	; 0x28
 8000712:	2100      	movs	r1, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f003 f82d 	bl	8003774 <memset>

		  readReg(TXBYTES, STATUS_REGISTER);
 800071a:	21c0      	movs	r1, #192	; 0xc0
 800071c:	203a      	movs	r0, #58	; 0x3a
 800071e:	f7ff fe6b 	bl	80003f8 <readReg>
		  sprintf(MSG, "Amount of bytes in FIFOTX: %i\r\n", (unsigned int)SPI_BUFFER[0]);
 8000722:	4b46      	ldr	r3, [pc, #280]	; (800083c <main+0x3ec>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	001a      	movs	r2, r3
 8000728:	4946      	ldr	r1, [pc, #280]	; (8000844 <main+0x3f4>)
 800072a:	2318      	movs	r3, #24
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	191b      	adds	r3, r3, r4
 8000730:	0018      	movs	r0, r3
 8000732:	f003 f827 	bl	8003784 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 8000736:	2318      	movs	r3, #24
 8000738:	18fb      	adds	r3, r7, r3
 800073a:	1919      	adds	r1, r3, r4
 800073c:	483c      	ldr	r0, [pc, #240]	; (8000830 <main+0x3e0>)
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	2228      	movs	r2, #40	; 0x28
 8000742:	f002 fbe1 	bl	8002f08 <HAL_UART_Transmit>
		  memset(MSG, 0, sizeof MSG);
 8000746:	2318      	movs	r3, #24
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	191b      	adds	r3, r3, r4
 800074c:	2228      	movs	r2, #40	; 0x28
 800074e:	2100      	movs	r1, #0
 8000750:	0018      	movs	r0, r3
 8000752:	f003 f80f 	bl	8003774 <memset>


		  send_data_sequence(data, datalen,sequence_number);
 8000756:	2394      	movs	r3, #148	; 0x94
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	2384      	movs	r3, #132	; 0x84
 800075e:	2218      	movs	r2, #24
 8000760:	4694      	mov	ip, r2
 8000762:	44bc      	add	ip, r7
 8000764:	4463      	add	r3, ip
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	b2d9      	uxtb	r1, r3
 800076a:	248a      	movs	r4, #138	; 0x8a
 800076c:	2318      	movs	r3, #24
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	191b      	adds	r3, r3, r4
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	001a      	movs	r2, r3
 8000776:	f7ff fdd1 	bl	800031c <send_data_sequence>

		  sequence_number += 1;
 800077a:	0021      	movs	r1, r4
 800077c:	2318      	movs	r3, #24
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	185b      	adds	r3, r3, r1
 8000782:	2218      	movs	r2, #24
 8000784:	18ba      	adds	r2, r7, r2
 8000786:	1852      	adds	r2, r2, r1
 8000788:	8812      	ldrh	r2, [r2, #0]
 800078a:	3201      	adds	r2, #1
 800078c:	801a      	strh	r2, [r3, #0]
		  if (sequence_number > 255){
 800078e:	2318      	movs	r3, #24
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	185b      	adds	r3, r3, r1
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	2bff      	cmp	r3, #255	; 0xff
 8000798:	d906      	bls.n	80007a8 <main+0x358>
			  sequence_number = 0;
 800079a:	238a      	movs	r3, #138	; 0x8a
 800079c:	2218      	movs	r2, #24
 800079e:	4694      	mov	ip, r2
 80007a0:	44bc      	add	ip, r7
 80007a2:	4463      	add	r3, ip
 80007a4:	2200      	movs	r2, #0
 80007a6:	801a      	strh	r2, [r3, #0]
		  }


		  readReg(TXBYTES, STATUS_REGISTER);
 80007a8:	21c0      	movs	r1, #192	; 0xc0
 80007aa:	203a      	movs	r0, #58	; 0x3a
 80007ac:	f7ff fe24 	bl	80003f8 <readReg>
		  sprintf(MSG, "Amoun of bytes in FIFOTX: %i\r\n", (unsigned int)SPI_BUFFER[0]);
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <main+0x3ec>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	001a      	movs	r2, r3
 80007b6:	4924      	ldr	r1, [pc, #144]	; (8000848 <main+0x3f8>)
 80007b8:	2454      	movs	r4, #84	; 0x54
 80007ba:	2318      	movs	r3, #24
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	191b      	adds	r3, r3, r4
 80007c0:	0018      	movs	r0, r3
 80007c2:	f002 ffdf 	bl	8003784 <siprintf>
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80007c6:	2318      	movs	r3, #24
 80007c8:	18fb      	adds	r3, r7, r3
 80007ca:	1919      	adds	r1, r3, r4
 80007cc:	4818      	ldr	r0, [pc, #96]	; (8000830 <main+0x3e0>)
 80007ce:	2364      	movs	r3, #100	; 0x64
 80007d0:	2228      	movs	r2, #40	; 0x28
 80007d2:	f002 fb99 	bl	8002f08 <HAL_UART_Transmit>
		  memset(MSG, 0, sizeof MSG);
 80007d6:	2318      	movs	r3, #24
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	191b      	adds	r3, r3, r4
 80007dc:	2228      	movs	r2, #40	; 0x28
 80007de:	2100      	movs	r1, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 ffc7 	bl	8003774 <memset>

		  command_strobe1(STX);
 80007e6:	2035      	movs	r0, #53	; 0x35
 80007e8:	f7ff fd7c 	bl	80002e4 <command_strobe1>
		  sprintf(MSG, "Gone to TX\r\n");
 80007ec:	0021      	movs	r1, r4
 80007ee:	2318      	movs	r3, #24
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	185b      	adds	r3, r3, r1
 80007f4:	4a15      	ldr	r2, [pc, #84]	; (800084c <main+0x3fc>)
 80007f6:	ca31      	ldmia	r2!, {r0, r4, r5}
 80007f8:	c331      	stmia	r3!, {r0, r4, r5}
 80007fa:	7812      	ldrb	r2, [r2, #0]
 80007fc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, MSG, sizeof(MSG), 100);
 80007fe:	000c      	movs	r4, r1
 8000800:	2318      	movs	r3, #24
 8000802:	469c      	mov	ip, r3
 8000804:	44bc      	add	ip, r7
 8000806:	4461      	add	r1, ip
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <main+0x3e0>)
 800080a:	2364      	movs	r3, #100	; 0x64
 800080c:	2228      	movs	r2, #40	; 0x28
 800080e:	f002 fb7b 	bl	8002f08 <HAL_UART_Transmit>

		  memset(MSG, 0, sizeof MSG);
 8000812:	0021      	movs	r1, r4
 8000814:	2318      	movs	r3, #24
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	185b      	adds	r3, r3, r1
 800081a:	2228      	movs	r2, #40	; 0x28
 800081c:	2100      	movs	r1, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f002 ffa8 	bl	8003774 <memset>
		  //command_strobe1(SFTX); VAR FÖRSIKTIG!!!!!!!



	  }
	  HAL_Delay(50);
 8000824:	2032      	movs	r0, #50	; 0x32
 8000826:	f000 fb39 	bl	8000e9c <HAL_Delay>
	  if (state == 1){
 800082a:	e72b      	b.n	8000684 <main+0x234>
 800082c:	08003fac 	.word	0x08003fac
 8000830:	20000100 	.word	0x20000100
 8000834:	20000000 	.word	0x20000000
 8000838:	08003fc8 	.word	0x08003fc8
 800083c:	20000184 	.word	0x20000184
 8000840:	08003fd4 	.word	0x08003fd4
 8000844:	08003ffc 	.word	0x08003ffc
 8000848:	0800401c 	.word	0x0800401c
 800084c:	0800403c 	.word	0x0800403c

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b099      	sub	sp, #100	; 0x64
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	242c      	movs	r4, #44	; 0x2c
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	2334      	movs	r3, #52	; 0x34
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f002 ff87 	bl	8003774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000866:	231c      	movs	r3, #28
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	0018      	movs	r0, r3
 800086c:	2310      	movs	r3, #16
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f002 ff7f 	bl	8003774 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000876:	003b      	movs	r3, r7
 8000878:	0018      	movs	r0, r3
 800087a:	231c      	movs	r3, #28
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 ff78 	bl	8003774 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000884:	0021      	movs	r1, r4
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2202      	movs	r2, #2
 800088a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2201      	movs	r2, #1
 8000890:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2210      	movs	r2, #16
 8000896:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	0212      	lsls	r2, r2, #8
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	22a0      	movs	r2, #160	; 0xa0
 80008aa:	0392      	lsls	r2, r2, #14
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2201      	movs	r2, #1
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fdda 	bl	8001470 <HAL_RCC_OscConfig>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008c0:	f000 f946 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c4:	211c      	movs	r1, #28
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2202      	movs	r2, #2
 80008d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2101      	movs	r1, #1
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 f94a 	bl	8001b7c <HAL_RCC_ClockConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008ec:	f000 f930 	bl	8000b50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008f0:	003b      	movs	r3, r7
 80008f2:	2202      	movs	r2, #2
 80008f4:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008f6:	003b      	movs	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fc:	003b      	movs	r3, r7
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fab4 	bl	8001e6c <HAL_RCCEx_PeriphCLKConfig>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000908:	f000 f922 	bl	8000b50 <Error_Handler>
  }
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b019      	add	sp, #100	; 0x64
 8000912:	bd90      	pop	{r4, r7, pc}

08000914 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_SPI1_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_SPI1_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_SPI1_Init+0x74>)
 8000920:	2282      	movs	r2, #130	; 0x82
 8000922:	0052      	lsls	r2, r2, #1
 8000924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_SPI1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_SPI1_Init+0x74>)
 800092e:	22e0      	movs	r2, #224	; 0xe0
 8000930:	00d2      	lsls	r2, r2, #3
 8000932:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_SPI1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093a:	4b13      	ldr	r3, [pc, #76]	; (8000988 <MX_SPI1_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000940:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_SPI1_Init+0x74>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_SPI1_Init+0x74>)
 800094a:	2228      	movs	r2, #40	; 0x28
 800094c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_SPI1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_SPI1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000960:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_SPI1_Init+0x74>)
 8000962:	2207      	movs	r2, #7
 8000964:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_SPI1_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_SPI1_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000972:	4b05      	ldr	r3, [pc, #20]	; (8000988 <MX_SPI1_Init+0x74>)
 8000974:	0018      	movs	r0, r3
 8000976:	f001 fb7b 	bl	8002070 <HAL_SPI_Init>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800097e:	f000 f8e7 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000009c 	.word	0x2000009c
 800098c:	40013000 	.word	0x40013000

08000990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_USART2_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 800099c:	22e1      	movs	r2, #225	; 0xe1
 800099e:	0252      	lsls	r2, r2, #9
 80009a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 fa43 	bl	8002e60 <HAL_UART_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f8b7 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000100 	.word	0x20000100
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b08b      	sub	sp, #44	; 0x2c
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	2414      	movs	r4, #20
 80009f8:	193b      	adds	r3, r7, r4
 80009fa:	0018      	movs	r0, r3
 80009fc:	2314      	movs	r3, #20
 80009fe:	001a      	movs	r2, r3
 8000a00:	2100      	movs	r1, #0
 8000a02:	f002 feb7 	bl	8003774 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a08:	695a      	ldr	r2, [r3, #20]
 8000a0a:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0309      	lsls	r1, r1, #12
 8000a10:	430a      	orrs	r2, r1
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a16:	695a      	ldr	r2, [r3, #20]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	031b      	lsls	r3, r3, #12
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a24:	695a      	ldr	r2, [r3, #20]
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	03c9      	lsls	r1, r1, #15
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	615a      	str	r2, [r3, #20]
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a32:	695a      	ldr	r2, [r3, #20]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	03db      	lsls	r3, r3, #15
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a40:	695a      	ldr	r2, [r3, #20]
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	0289      	lsls	r1, r1, #10
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a4e:	695a      	ldr	r2, [r3, #20]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	029b      	lsls	r3, r3, #10
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a5c:	695a      	ldr	r2, [r3, #20]
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	02c9      	lsls	r1, r1, #11
 8000a64:	430a      	orrs	r2, r1
 8000a66:	615a      	str	r2, [r3, #20]
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_GPIO_Init+0x100>)
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	02db      	lsls	r3, r3, #11
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8000a76:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_GPIO_Init+0x104>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 fca2 	bl	80013c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	481b      	ldr	r0, [pc, #108]	; (8000af4 <MX_GPIO_Init+0x104>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	f000 fc9b 	bl	80013c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0192      	lsls	r2, r2, #6
 8000a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <MX_GPIO_Init+0x108>)
 8000a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	4a15      	ldr	r2, [pc, #84]	; (8000afc <MX_GPIO_Init+0x10c>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f000 faf6 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_CS_Pin LED_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_Pin;
 8000ab0:	0021      	movs	r1, r4
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2290      	movs	r2, #144	; 0x90
 8000ab6:	0092      	lsls	r2, r2, #2
 8000ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <MX_GPIO_Init+0x104>)
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	f000 fae2 	bl	800109c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2007      	movs	r0, #7
 8000ade:	f000 faab 	bl	8001038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fabd 	bl	8001062 <HAL_NVIC_EnableIRQ>

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b00b      	add	sp, #44	; 0x2c
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	10210000 	.word	0x10210000
 8000afc:	48000800 	.word	0x48000800

08000b00 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void  HAL_GPIO_EXTI_Callback(u_int16_t GPIO_Pin){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	801a      	strh	r2, [r3, #0]

	if (GPIO_Pin == B1_Pin) {
 8000b0c:	1dbb      	adds	r3, r7, #6
 8000b0e:	881a      	ldrh	r2, [r3, #0]
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	019b      	lsls	r3, r3, #6
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d112      	bne.n	8000b3e <HAL_GPIO_EXTI_Callback+0x3e>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_GPIO_EXTI_Callback+0x48>)
 8000b1e:	0019      	movs	r1, r3
 8000b20:	0010      	movs	r0, r2
 8000b22:	f000 fc6d 	bl	8001400 <HAL_GPIO_TogglePin>
		if (state == 1){
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d103      	bne.n	8000b36 <HAL_GPIO_EXTI_Callback+0x36>
			state =2;
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	601a      	str	r2, [r3, #0]
		__NOP();
	}



}
 8000b34:	e004      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0x40>
			state = 1;
 8000b36:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	e000      	b.n	8000b40 <HAL_GPIO_EXTI_Callback+0x40>
		__NOP();
 8000b3e:	46c0      	nop			; (mov r8, r8)
}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b002      	add	sp, #8
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	20000000 	.word	0x20000000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b64:	699a      	ldr	r2, [r3, #24]
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b68:	2101      	movs	r1, #1
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	619a      	str	r2, [r3, #24]
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4013      	ands	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b7c:	69da      	ldr	r2, [r3, #28]
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	0549      	lsls	r1, r1, #21
 8000b84:	430a      	orrs	r2, r1
 8000b86:	61da      	str	r2, [r3, #28]
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_MspInit+0x44>)
 8000b8a:	69da      	ldr	r2, [r3, #28]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	055b      	lsls	r3, r3, #21
 8000b90:	4013      	ands	r3, r2
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	2314      	movs	r3, #20
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	2314      	movs	r3, #20
 8000bb4:	001a      	movs	r2, r3
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	f002 fddc 	bl	8003774 <memset>
  if(hspi->Instance==SPI1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <HAL_SPI_MspInit+0x90>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d132      	bne.n	8000c2c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_SPI_MspInit+0x94>)
 8000bc8:	699a      	ldr	r2, [r3, #24]
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <HAL_SPI_MspInit+0x94>)
 8000bcc:	2180      	movs	r1, #128	; 0x80
 8000bce:	0149      	lsls	r1, r1, #5
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	619a      	str	r2, [r3, #24]
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_SPI_MspInit+0x94>)
 8000bd6:	699a      	ldr	r2, [r3, #24]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	015b      	lsls	r3, r3, #5
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_SPI_MspInit+0x94>)
 8000be4:	695a      	ldr	r2, [r3, #20]
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_SPI_MspInit+0x94>)
 8000be8:	2180      	movs	r1, #128	; 0x80
 8000bea:	0289      	lsls	r1, r1, #10
 8000bec:	430a      	orrs	r2, r1
 8000bee:	615a      	str	r2, [r3, #20]
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_SPI_MspInit+0x94>)
 8000bf2:	695a      	ldr	r2, [r3, #20]
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	029b      	lsls	r3, r3, #10
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bfe:	2114      	movs	r1, #20
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	22e0      	movs	r2, #224	; 0xe0
 8000c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2203      	movs	r2, #3
 8000c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	187a      	adds	r2, r7, r1
 8000c20:	2390      	movs	r3, #144	; 0x90
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fa38 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b00a      	add	sp, #40	; 0x28
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40013000 	.word	0x40013000
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	2314      	movs	r3, #20
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2314      	movs	r3, #20
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f002 fd90 	bl	8003774 <memset>
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a1c      	ldr	r2, [pc, #112]	; (8000ccc <HAL_UART_MspInit+0x90>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d132      	bne.n	8000cc4 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0289      	lsls	r1, r1, #10
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	61da      	str	r2, [r3, #28]
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c6e:	69da      	ldr	r2, [r3, #28]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	0289      	lsls	r1, r1, #10
 8000c84:	430a      	orrs	r2, r1
 8000c86:	615a      	str	r2, [r3, #20]
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0x94>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	029b      	lsls	r3, r3, #10
 8000c90:	4013      	ands	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c96:	2114      	movs	r1, #20
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	187a      	adds	r2, r7, r1
 8000cb8:	2390      	movs	r3, #144	; 0x90
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 f9ec 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b00a      	add	sp, #40	; 0x28
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f8b2 	bl	8000e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fb92 	bl	8001438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <_sbrk+0x50>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x16>
		heap_end = &end;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <_sbrk+0x50>)
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <_sbrk+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <_sbrk+0x50>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <_sbrk+0x50>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	18d3      	adds	r3, r2, r3
 8000d40:	466a      	mov	r2, sp
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d907      	bls.n	8000d56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d46:	f002 fceb 	bl	8003720 <__errno>
 8000d4a:	0003      	movs	r3, r0
 8000d4c:	220c      	movs	r2, #12
 8000d4e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d50:	2301      	movs	r3, #1
 8000d52:	425b      	negs	r3, r3
 8000d54:	e006      	b.n	8000d64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <_sbrk+0x50>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	18d2      	adds	r2, r2, r3
 8000d5e:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <_sbrk+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	0018      	movs	r0, r3
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b004      	add	sp, #16
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000090 	.word	0x20000090
 8000d70:	20000198 	.word	0x20000198

08000d74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopForever+0xe>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopForever+0x16>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000daa:	f7ff ffe3 	bl	8000d74 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dae:	f002 fcbd 	bl	800372c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fb4d 	bl	8000450 <main>

08000db6 <LoopForever>:

LoopForever:
    b LoopForever
 8000db6:	e7fe      	b.n	8000db6 <LoopForever>
  ldr   r0, =_estack
 8000db8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dc4:	080040c0 	.word	0x080040c0
  ldr r2, =_sbss
 8000dc8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dcc:	20000194 	.word	0x20000194

08000dd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC1_COMP_IRQHandler>
	...

08000dd4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_Init+0x24>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_Init+0x24>)
 8000dde:	2110      	movs	r1, #16
 8000de0:	430a      	orrs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f809 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dea:	f7ff feb7 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	40022000 	.word	0x40022000

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e06:	681c      	ldr	r4, [r3, #0]
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_InitTick+0x60>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	0019      	movs	r1, r3
 8000e0e:	23fa      	movs	r3, #250	; 0xfa
 8000e10:	0098      	lsls	r0, r3, #2
 8000e12:	f7ff f977 	bl	8000104 <__udivsi3>
 8000e16:	0003      	movs	r3, r0
 8000e18:	0019      	movs	r1, r3
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	f7ff f972 	bl	8000104 <__udivsi3>
 8000e20:	0003      	movs	r3, r0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f92d 	bl	8001082 <HAL_SYSTICK_Config>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e00f      	b.n	8000e50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d80b      	bhi.n	8000e4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	2301      	movs	r3, #1
 8000e3a:	425b      	negs	r3, r3
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 f8fa 	bl	8001038 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_InitTick+0x64>)
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	e000      	b.n	8000e50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
}
 8000e50:	0018      	movs	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b003      	add	sp, #12
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	20000004 	.word	0x20000004
 8000e5c:	2000000c 	.word	0x2000000c
 8000e60:	20000008 	.word	0x20000008

08000e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_IncTick+0x1c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x20>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	18d2      	adds	r2, r2, r3
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_IncTick+0x20>)
 8000e76:	601a      	str	r2, [r3, #0]
}
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	2000018c 	.word	0x2000018c

08000e88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <HAL_GetTick+0x10>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	2000018c 	.word	0x2000018c

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff fff0 	bl	8000e88 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_Delay+0x40>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	001a      	movs	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	189b      	adds	r3, r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	f7ff ffe0 	bl	8000e88 <HAL_GetTick>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b004      	add	sp, #16
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000000c 	.word	0x2000000c

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef2:	d809      	bhi.n	8000f08 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	231f      	movs	r3, #31
 8000efc:	401a      	ands	r2, r3
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_EnableIRQ+0x30>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	4091      	lsls	r1, r2
 8000f04:	000a      	movs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
  }
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b7f      	cmp	r3, #127	; 0x7f
 8000f28:	d828      	bhi.n	8000f7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2a:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <__NVIC_SetPriority+0xd4>)
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	33c0      	adds	r3, #192	; 0xc0
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	589b      	ldr	r3, [r3, r2]
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	0011      	movs	r1, r2
 8000f40:	2203      	movs	r2, #3
 8000f42:	400a      	ands	r2, r1
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	21ff      	movs	r1, #255	; 0xff
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	401a      	ands	r2, r3
 8000f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	401a      	ands	r2, r3
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2303      	movs	r3, #3
 8000f62:	4003      	ands	r3, r0
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <__NVIC_SetPriority+0xd4>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	430a      	orrs	r2, r1
 8000f74:	33c0      	adds	r3, #192	; 0xc0
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f7a:	e031      	b.n	8000fe0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <__NVIC_SetPriority+0xd8>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	0019      	movs	r1, r3
 8000f84:	230f      	movs	r3, #15
 8000f86:	400b      	ands	r3, r1
 8000f88:	3b08      	subs	r3, #8
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3306      	adds	r3, #6
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	18d3      	adds	r3, r2, r3
 8000f92:	3304      	adds	r3, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1dfa      	adds	r2, r7, #7
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	21ff      	movs	r1, #255	; 0xff
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	4003      	ands	r3, r0
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <__NVIC_SetPriority+0xd8>)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	001c      	movs	r4, r3
 8000fcc:	230f      	movs	r3, #15
 8000fce:	4023      	ands	r3, r4
 8000fd0:	3b08      	subs	r3, #8
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	3306      	adds	r3, #6
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	18c3      	adds	r3, r0, r3
 8000fdc:	3304      	adds	r3, #4
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b003      	add	sp, #12
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <SysTick_Config+0x40>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d901      	bls.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e010      	b.n	8001028 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <SysTick_Config+0x44>)
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	3a01      	subs	r2, #1
 800100c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	2301      	movs	r3, #1
 8001010:	425b      	negs	r3, r3
 8001012:	2103      	movs	r1, #3
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff7d 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SysTick_Config+0x44>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SysTick_Config+0x44>)
 8001022:	2207      	movs	r2, #7
 8001024:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001026:	2300      	movs	r3, #0
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}
 8001030:	00ffffff 	.word	0x00ffffff
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	210f      	movs	r1, #15
 8001044:	187b      	adds	r3, r7, r1
 8001046:	1c02      	adds	r2, r0, #0
 8001048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	187b      	adds	r3, r7, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	0011      	movs	r1, r2
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	0002      	movs	r2, r0
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ff33 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ffaf 	bl	8000ff0 <SysTick_Config>
 8001092:	0003      	movs	r3, r0
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	e155      	b.n	8001358 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <HAL_GPIO_Init+0x28>
 80010c2:	e146      	b.n	8001352 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d8:	2b11      	cmp	r3, #17
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b12      	cmp	r3, #18
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	2201      	movs	r2, #1
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0xea>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b12      	cmp	r3, #18
 8001184:	d123      	bne.n	80011ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	58d3      	ldr	r3, [r2, r3]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2207      	movs	r2, #7
 8001198:	4013      	ands	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2107      	movs	r1, #7
 80011b2:	400b      	ands	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	401a      	ands	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	055b      	lsls	r3, r3, #21
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x174>
 800120e:	e0a0      	b.n	8001352 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001210:	4b57      	ldr	r3, [pc, #348]	; (8001370 <HAL_GPIO_Init+0x2d4>)
 8001212:	699a      	ldr	r2, [r3, #24]
 8001214:	4b56      	ldr	r3, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x2d4>)
 8001216:	2101      	movs	r1, #1
 8001218:	430a      	orrs	r2, r1
 800121a:	619a      	str	r2, [r3, #24]
 800121c:	4b54      	ldr	r3, [pc, #336]	; (8001370 <HAL_GPIO_Init+0x2d4>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2201      	movs	r2, #1
 8001222:	4013      	ands	r3, r2
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001228:	4a52      	ldr	r2, [pc, #328]	; (8001374 <HAL_GPIO_Init+0x2d8>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	589b      	ldr	r3, [r3, r2]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	2203      	movs	r2, #3
 800123a:	4013      	ands	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	220f      	movs	r2, #15
 8001240:	409a      	lsls	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	43da      	mvns	r2, r3
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	2390      	movs	r3, #144	; 0x90
 8001250:	05db      	lsls	r3, r3, #23
 8001252:	429a      	cmp	r2, r3
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x1ee>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a47      	ldr	r2, [pc, #284]	; (8001378 <HAL_GPIO_Init+0x2dc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1ea>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a46      	ldr	r2, [pc, #280]	; (800137c <HAL_GPIO_Init+0x2e0>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1e6>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a45      	ldr	r2, [pc, #276]	; (8001380 <HAL_GPIO_Init+0x2e4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1e2>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a44      	ldr	r2, [pc, #272]	; (8001384 <HAL_GPIO_Init+0x2e8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1de>
 8001276:	2304      	movs	r3, #4
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x1f0>
 800127a:	2305      	movs	r3, #5
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x1f0>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x1f0>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x1f0>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x1f0>
 800128a:	2300      	movs	r3, #0
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	2103      	movs	r1, #3
 8001290:	400a      	ands	r2, r1
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	; (8001374 <HAL_GPIO_Init+0x2d8>)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012aa:	4b37      	ldr	r3, [pc, #220]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	025b      	lsls	r3, r3, #9
 80012c2:	4013      	ands	r3, r2
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	029b      	lsls	r3, r3, #10
 80012ec:	4013      	ands	r3, r2
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f8:	4b23      	ldr	r3, [pc, #140]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fe:	4b22      	ldr	r3, [pc, #136]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	035b      	lsls	r3, r3, #13
 8001316:	4013      	ands	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001322:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	039b      	lsls	r3, r3, #14
 8001340:	4013      	ands	r3, r2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <HAL_GPIO_Init+0x2ec>)
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	40da      	lsrs	r2, r3
 8001360:	1e13      	subs	r3, r2, #0
 8001362:	d000      	beq.n	8001366 <HAL_GPIO_Init+0x2ca>
 8001364:	e6a2      	b.n	80010ac <HAL_GPIO_Init+0x10>
  } 
}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	46bd      	mov	sp, r7
 800136a:	b006      	add	sp, #24
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800
 8001380:	48000c00 	.word	0x48000c00
 8001384:	48001000 	.word	0x48001000
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	000a      	movs	r2, r1
 8001396:	1cbb      	adds	r3, r7, #2
 8001398:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	1cba      	adds	r2, r7, #2
 80013a0:	8812      	ldrh	r2, [r2, #0]
 80013a2:	4013      	ands	r3, r2
 80013a4:	d004      	beq.n	80013b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013b8:	230f      	movs	r3, #15
 80013ba:	18fb      	adds	r3, r7, r3
 80013bc:	781b      	ldrb	r3, [r3, #0]
  }
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	0008      	movs	r0, r1
 80013d0:	0011      	movs	r1, r2
 80013d2:	1cbb      	adds	r3, r7, #2
 80013d4:	1c02      	adds	r2, r0, #0
 80013d6:	801a      	strh	r2, [r3, #0]
 80013d8:	1c7b      	adds	r3, r7, #1
 80013da:	1c0a      	adds	r2, r1, #0
 80013dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013de:	1c7b      	adds	r3, r7, #1
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d004      	beq.n	80013f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	881a      	ldrh	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ee:	e003      	b.n	80013f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013f0:	1cbb      	adds	r3, r7, #2
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	000a      	movs	r2, r1
 800140a:	1cbb      	adds	r3, r7, #2
 800140c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001414:	1cbb      	adds	r3, r7, #2
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4013      	ands	r3, r2
 800141c:	041a      	lsls	r2, r3, #16
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	1cb9      	adds	r1, r7, #2
 8001424:	8809      	ldrh	r1, [r1, #0]
 8001426:	400b      	ands	r3, r1
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	619a      	str	r2, [r3, #24]
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	0002      	movs	r2, r0
 8001440:	1dbb      	adds	r3, r7, #6
 8001442:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	1dba      	adds	r2, r7, #6
 800144a:	8812      	ldrh	r2, [r2, #0]
 800144c:	4013      	ands	r3, r2
 800144e:	d008      	beq.n	8001462 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001452:	1dba      	adds	r2, r7, #6
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001458:	1dbb      	adds	r3, r7, #6
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fb4f 	bl	8000b00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40010400 	.word	0x40010400

08001470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b088      	sub	sp, #32
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f000 fb76 	bl	8001b70 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	4013      	ands	r3, r2
 800148c:	d100      	bne.n	8001490 <HAL_RCC_OscConfig+0x20>
 800148e:	e08e      	b.n	80015ae <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001490:	4bc5      	ldr	r3, [pc, #788]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	220c      	movs	r2, #12
 8001496:	4013      	ands	r3, r2
 8001498:	2b04      	cmp	r3, #4
 800149a:	d00e      	beq.n	80014ba <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149c:	4bc2      	ldr	r3, [pc, #776]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	220c      	movs	r2, #12
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d117      	bne.n	80014d8 <HAL_RCC_OscConfig+0x68>
 80014a8:	4bbf      	ldr	r3, [pc, #764]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	23c0      	movs	r3, #192	; 0xc0
 80014ae:	025b      	lsls	r3, r3, #9
 80014b0:	401a      	ands	r2, r3
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	025b      	lsls	r3, r3, #9
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d10e      	bne.n	80014d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ba:	4bbb      	ldr	r3, [pc, #748]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	029b      	lsls	r3, r3, #10
 80014c2:	4013      	ands	r3, r2
 80014c4:	d100      	bne.n	80014c8 <HAL_RCC_OscConfig+0x58>
 80014c6:	e071      	b.n	80015ac <HAL_RCC_OscConfig+0x13c>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d000      	beq.n	80014d2 <HAL_RCC_OscConfig+0x62>
 80014d0:	e06c      	b.n	80015ac <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f000 fb4c 	bl	8001b70 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_OscConfig+0x80>
 80014e0:	4bb1      	ldr	r3, [pc, #708]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4bb0      	ldr	r3, [pc, #704]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e02f      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0xa2>
 80014f8:	4bab      	ldr	r3, [pc, #684]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4baa      	ldr	r3, [pc, #680]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80014fe:	49ab      	ldr	r1, [pc, #684]	; (80017ac <HAL_RCC_OscConfig+0x33c>)
 8001500:	400a      	ands	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	4ba8      	ldr	r3, [pc, #672]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4ba7      	ldr	r3, [pc, #668]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800150a:	49a9      	ldr	r1, [pc, #676]	; (80017b0 <HAL_RCC_OscConfig+0x340>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e01e      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b05      	cmp	r3, #5
 8001518:	d10e      	bne.n	8001538 <HAL_RCC_OscConfig+0xc8>
 800151a:	4ba3      	ldr	r3, [pc, #652]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4ba2      	ldr	r3, [pc, #648]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001520:	2180      	movs	r1, #128	; 0x80
 8001522:	02c9      	lsls	r1, r1, #11
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	4b9f      	ldr	r3, [pc, #636]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b9e      	ldr	r3, [pc, #632]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800152e:	2180      	movs	r1, #128	; 0x80
 8001530:	0249      	lsls	r1, r1, #9
 8001532:	430a      	orrs	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xe0>
 8001538:	4b9b      	ldr	r3, [pc, #620]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	4b9a      	ldr	r3, [pc, #616]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800153e:	499b      	ldr	r1, [pc, #620]	; (80017ac <HAL_RCC_OscConfig+0x33c>)
 8001540:	400a      	ands	r2, r1
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	4b98      	ldr	r3, [pc, #608]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b97      	ldr	r3, [pc, #604]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800154a:	4999      	ldr	r1, [pc, #612]	; (80017b0 <HAL_RCC_OscConfig+0x340>)
 800154c:	400a      	ands	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d014      	beq.n	8001582 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fc96 	bl	8000e88 <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001562:	f7ff fc91 	bl	8000e88 <HAL_GetTick>
 8001566:	0002      	movs	r2, r0
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b64      	cmp	r3, #100	; 0x64
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e2fd      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001574:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	029b      	lsls	r3, r3, #10
 800157c:	4013      	ands	r3, r2
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0xf2>
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fc81 	bl	8000e88 <HAL_GetTick>
 8001586:	0003      	movs	r3, r0
 8001588:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158c:	f7ff fc7c 	bl	8000e88 <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e2e8      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	4b82      	ldr	r3, [pc, #520]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	029b      	lsls	r3, r3, #10
 80015a6:	4013      	ands	r3, r2
 80015a8:	d1f0      	bne.n	800158c <HAL_RCC_OscConfig+0x11c>
 80015aa:	e000      	b.n	80015ae <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2202      	movs	r2, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d100      	bne.n	80015ba <HAL_RCC_OscConfig+0x14a>
 80015b8:	e06c      	b.n	8001694 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015ba:	4b7b      	ldr	r3, [pc, #492]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	220c      	movs	r2, #12
 80015c0:	4013      	ands	r3, r2
 80015c2:	d00e      	beq.n	80015e2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015c4:	4b78      	ldr	r3, [pc, #480]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	220c      	movs	r2, #12
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d11f      	bne.n	8001610 <HAL_RCC_OscConfig+0x1a0>
 80015d0:	4b75      	ldr	r3, [pc, #468]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	23c0      	movs	r3, #192	; 0xc0
 80015d6:	025b      	lsls	r3, r3, #9
 80015d8:	401a      	ands	r2, r3
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	429a      	cmp	r2, r3
 80015e0:	d116      	bne.n	8001610 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e2:	4b71      	ldr	r3, [pc, #452]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2202      	movs	r2, #2
 80015e8:	4013      	ands	r3, r2
 80015ea:	d005      	beq.n	80015f8 <HAL_RCC_OscConfig+0x188>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d001      	beq.n	80015f8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e2bb      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f8:	4b6b      	ldr	r3, [pc, #428]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	22f8      	movs	r2, #248	; 0xf8
 80015fe:	4393      	bics	r3, r2
 8001600:	0019      	movs	r1, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00da      	lsls	r2, r3, #3
 8001608:	4b67      	ldr	r3, [pc, #412]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160e:	e041      	b.n	8001694 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d024      	beq.n	8001662 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001618:	4b63      	ldr	r3, [pc, #396]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b62      	ldr	r3, [pc, #392]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800161e:	2101      	movs	r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fc30 	bl	8000e88 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162e:	f7ff fc2b 	bl	8000e88 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e297      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001640:	4b59      	ldr	r3, [pc, #356]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d0f1      	beq.n	800162e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	22f8      	movs	r2, #248	; 0xf8
 8001650:	4393      	bics	r3, r2
 8001652:	0019      	movs	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	00da      	lsls	r2, r3, #3
 800165a:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e018      	b.n	8001694 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001662:	4b51      	ldr	r3, [pc, #324]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b50      	ldr	r3, [pc, #320]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001668:	2101      	movs	r1, #1
 800166a:	438a      	bics	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fc0b 	bl	8000e88 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fc06 	bl	8000e88 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e272      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d1f1      	bne.n	8001678 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2208      	movs	r2, #8
 800169a:	4013      	ands	r3, r2
 800169c:	d036      	beq.n	800170c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d019      	beq.n	80016da <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80016a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	430a      	orrs	r2, r1
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b2:	f7ff fbe9 	bl	8000e88 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016bc:	f7ff fbe4 	bl	8000e88 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e250      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	2202      	movs	r2, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0f1      	beq.n	80016bc <HAL_RCC_OscConfig+0x24c>
 80016d8:	e018      	b.n	800170c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b33      	ldr	r3, [pc, #204]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80016dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80016e0:	2101      	movs	r1, #1
 80016e2:	438a      	bics	r2, r1
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbcf 	bl	8000e88 <HAL_GetTick>
 80016ea:	0003      	movs	r3, r0
 80016ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff fbca 	bl	8000e88 <HAL_GetTick>
 80016f4:	0002      	movs	r2, r0
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e236      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2202      	movs	r2, #2
 8001708:	4013      	ands	r3, r2
 800170a:	d1f1      	bne.n	80016f0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2204      	movs	r2, #4
 8001712:	4013      	ands	r3, r2
 8001714:	d100      	bne.n	8001718 <HAL_RCC_OscConfig+0x2a8>
 8001716:	e0b5      	b.n	8001884 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001718:	231f      	movs	r3, #31
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001720:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	055b      	lsls	r3, r3, #21
 8001728:	4013      	ands	r3, r2
 800172a:	d111      	bne.n	8001750 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800172e:	69da      	ldr	r2, [r3, #28]
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0549      	lsls	r1, r1, #21
 8001736:	430a      	orrs	r2, r1
 8001738:	61da      	str	r2, [r3, #28]
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	055b      	lsls	r3, r3, #21
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001748:	231f      	movs	r3, #31
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_RCC_OscConfig+0x344>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4013      	ands	r3, r2
 800175a:	d11a      	bne.n	8001792 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_RCC_OscConfig+0x344>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HAL_RCC_OscConfig+0x344>)
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	0049      	lsls	r1, r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7ff fb8d 	bl	8000e88 <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001774:	f7ff fb88 	bl	8000e88 <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1f4      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_RCC_OscConfig+0x344>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4013      	ands	r3, r2
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d10e      	bne.n	80017b8 <HAL_RCC_OscConfig+0x348>
 800179a:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <HAL_RCC_OscConfig+0x338>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	621a      	str	r2, [r3, #32]
 80017a6:	e035      	b.n	8001814 <HAL_RCC_OscConfig+0x3a4>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	fffeffff 	.word	0xfffeffff
 80017b0:	fffbffff 	.word	0xfffbffff
 80017b4:	40007000 	.word	0x40007000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10c      	bne.n	80017da <HAL_RCC_OscConfig+0x36a>
 80017c0:	4bca      	ldr	r3, [pc, #808]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017c2:	6a1a      	ldr	r2, [r3, #32]
 80017c4:	4bc9      	ldr	r3, [pc, #804]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	621a      	str	r2, [r3, #32]
 80017cc:	4bc7      	ldr	r3, [pc, #796]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017ce:	6a1a      	ldr	r2, [r3, #32]
 80017d0:	4bc6      	ldr	r3, [pc, #792]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017d2:	2104      	movs	r1, #4
 80017d4:	438a      	bics	r2, r1
 80017d6:	621a      	str	r2, [r3, #32]
 80017d8:	e01c      	b.n	8001814 <HAL_RCC_OscConfig+0x3a4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d10c      	bne.n	80017fc <HAL_RCC_OscConfig+0x38c>
 80017e2:	4bc2      	ldr	r3, [pc, #776]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	4bc1      	ldr	r3, [pc, #772]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017e8:	2104      	movs	r1, #4
 80017ea:	430a      	orrs	r2, r1
 80017ec:	621a      	str	r2, [r3, #32]
 80017ee:	4bbf      	ldr	r3, [pc, #764]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017f0:	6a1a      	ldr	r2, [r3, #32]
 80017f2:	4bbe      	ldr	r3, [pc, #760]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017f4:	2101      	movs	r1, #1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	621a      	str	r2, [r3, #32]
 80017fa:	e00b      	b.n	8001814 <HAL_RCC_OscConfig+0x3a4>
 80017fc:	4bbb      	ldr	r3, [pc, #748]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80017fe:	6a1a      	ldr	r2, [r3, #32]
 8001800:	4bba      	ldr	r3, [pc, #744]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001802:	2101      	movs	r1, #1
 8001804:	438a      	bics	r2, r1
 8001806:	621a      	str	r2, [r3, #32]
 8001808:	4bb8      	ldr	r3, [pc, #736]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	4bb7      	ldr	r3, [pc, #732]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800180e:	2104      	movs	r1, #4
 8001810:	438a      	bics	r2, r1
 8001812:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d014      	beq.n	8001846 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181c:	f7ff fb34 	bl	8000e88 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e009      	b.n	800183a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fb2f 	bl	8000e88 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4aaf      	ldr	r2, [pc, #700]	; (8001af0 <HAL_RCC_OscConfig+0x680>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e19a      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	4bac      	ldr	r3, [pc, #688]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	2202      	movs	r2, #2
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x3b6>
 8001844:	e013      	b.n	800186e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001846:	f7ff fb1f 	bl	8000e88 <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	e009      	b.n	8001864 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001850:	f7ff fb1a 	bl	8000e88 <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	4aa5      	ldr	r2, [pc, #660]	; (8001af0 <HAL_RCC_OscConfig+0x680>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e185      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	4ba1      	ldr	r3, [pc, #644]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	2202      	movs	r2, #2
 800186a:	4013      	ands	r3, r2
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800186e:	231f      	movs	r3, #31
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001878:	4b9c      	ldr	r3, [pc, #624]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800187a:	69da      	ldr	r2, [r3, #28]
 800187c:	4b9b      	ldr	r3, [pc, #620]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800187e:	499d      	ldr	r1, [pc, #628]	; (8001af4 <HAL_RCC_OscConfig+0x684>)
 8001880:	400a      	ands	r2, r1
 8001882:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2210      	movs	r2, #16
 800188a:	4013      	ands	r3, r2
 800188c:	d063      	beq.n	8001956 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d12a      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001896:	4b95      	ldr	r3, [pc, #596]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189a:	4b94      	ldr	r3, [pc, #592]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800189c:	2104      	movs	r1, #4
 800189e:	430a      	orrs	r2, r1
 80018a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018a2:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80018a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a6:	4b91      	ldr	r3, [pc, #580]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff faeb 	bl	8000e88 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018b8:	f7ff fae6 	bl	8000e88 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e152      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018ca:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	2202      	movs	r2, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d0f1      	beq.n	80018b8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018d4:	4b85      	ldr	r3, [pc, #532]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80018d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d8:	22f8      	movs	r2, #248	; 0xf8
 80018da:	4393      	bics	r3, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	00da      	lsls	r2, r3, #3
 80018e4:	4b81      	ldr	r3, [pc, #516]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80018e6:	430a      	orrs	r2, r1
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ea:	e034      	b.n	8001956 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	3305      	adds	r3, #5
 80018f2:	d111      	bne.n	8001918 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018f4:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80018f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f8:	4b7c      	ldr	r3, [pc, #496]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80018fa:	2104      	movs	r1, #4
 80018fc:	438a      	bics	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001900:	4b7a      	ldr	r3, [pc, #488]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	22f8      	movs	r2, #248	; 0xf8
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	00da      	lsls	r2, r3, #3
 8001910:	4b76      	ldr	r3, [pc, #472]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001912:	430a      	orrs	r2, r1
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
 8001916:	e01e      	b.n	8001956 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001918:	4b74      	ldr	r3, [pc, #464]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800191a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800191c:	4b73      	ldr	r3, [pc, #460]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800191e:	2104      	movs	r1, #4
 8001920:	430a      	orrs	r2, r1
 8001922:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001924:	4b71      	ldr	r3, [pc, #452]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001928:	4b70      	ldr	r3, [pc, #448]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800192a:	2101      	movs	r1, #1
 800192c:	438a      	bics	r2, r1
 800192e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001930:	f7ff faaa 	bl	8000e88 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800193a:	f7ff faa5 	bl	8000e88 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e111      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800194c:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001950:	2202      	movs	r2, #2
 8001952:	4013      	ands	r3, r2
 8001954:	d1f1      	bne.n	800193a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2220      	movs	r2, #32
 800195c:	4013      	ands	r3, r2
 800195e:	d05c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001960:	4b62      	ldr	r3, [pc, #392]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	220c      	movs	r2, #12
 8001966:	4013      	ands	r3, r2
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d00e      	beq.n	800198a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800196c:	4b5f      	ldr	r3, [pc, #380]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	220c      	movs	r2, #12
 8001972:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001974:	2b08      	cmp	r3, #8
 8001976:	d114      	bne.n	80019a2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001978:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	23c0      	movs	r3, #192	; 0xc0
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	401a      	ands	r2, r3
 8001982:	23c0      	movs	r3, #192	; 0xc0
 8001984:	025b      	lsls	r3, r3, #9
 8001986:	429a      	cmp	r2, r3
 8001988:	d10b      	bne.n	80019a2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800198a:	4b58      	ldr	r3, [pc, #352]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 800198c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	4013      	ands	r3, r2
 8001994:	d040      	beq.n	8001a18 <HAL_RCC_OscConfig+0x5a8>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d03c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0e6      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d01b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019aa:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80019ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ae:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	0249      	lsls	r1, r1, #9
 80019b4:	430a      	orrs	r2, r1
 80019b6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fa66 	bl	8000e88 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c2:	f7ff fa61 	bl	8000e88 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0cd      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019d4:	4b45      	ldr	r3, [pc, #276]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80019d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	025b      	lsls	r3, r3, #9
 80019dc:	4013      	ands	r3, r2
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x552>
 80019e0:	e01b      	b.n	8001a1a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80019e2:	4b42      	ldr	r3, [pc, #264]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80019e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 80019e8:	4943      	ldr	r1, [pc, #268]	; (8001af8 <HAL_RCC_OscConfig+0x688>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fa4b 	bl	8000e88 <HAL_GetTick>
 80019f2:	0003      	movs	r3, r0
 80019f4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019f8:	f7ff fa46 	bl	8000e88 <HAL_GetTick>
 80019fc:	0002      	movs	r2, r0
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e0b2      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	025b      	lsls	r3, r3, #9
 8001a12:	4013      	ands	r3, r2
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x588>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a18:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d100      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5b4>
 8001a22:	e0a4      	b.n	8001b6e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	220c      	movs	r2, #12
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5c2>
 8001a30:	e078      	b.n	8001b24 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d14c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a40:	492e      	ldr	r1, [pc, #184]	; (8001afc <HAL_RCC_OscConfig+0x68c>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff fa1f 	bl	8000e88 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fa1a 	bl	8000e88 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e086      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	049b      	lsls	r3, r3, #18
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	220f      	movs	r2, #15
 8001a74:	4393      	bics	r3, r2
 8001a76:	0019      	movs	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <HAL_RCC_OscConfig+0x690>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	431a      	orrs	r2, r3
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b12      	ldr	r3, [pc, #72]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0449      	lsls	r1, r1, #17
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f9ed 	bl	8000e88 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f9e8 	bl	8000e88 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e054      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	049b      	lsls	r3, r3, #18
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x644>
 8001ad2:	e04c      	b.n	8001b6e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_OscConfig+0x67c>)
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <HAL_RCC_OscConfig+0x68c>)
 8001adc:	400a      	ands	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f9d2 	bl	8000e88 <HAL_GetTick>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x6a6>
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40021000 	.word	0x40021000
 8001af0:	00001388 	.word	0x00001388
 8001af4:	efffffff 	.word	0xefffffff
 8001af8:	fffeffff 	.word	0xfffeffff
 8001afc:	feffffff 	.word	0xfeffffff
 8001b00:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f9c0 	bl	8000e88 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e02c      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_RCC_OscConfig+0x708>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	049b      	lsls	r3, r3, #18
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x694>
 8001b22:	e024      	b.n	8001b6e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e01f      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_RCC_OscConfig+0x708>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_RCC_OscConfig+0x708>)
 8001b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	23c0      	movs	r3, #192	; 0xc0
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	401a      	ands	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d10e      	bne.n	8001b6a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	220f      	movs	r2, #15
 8001b50:	401a      	ands	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	23f0      	movs	r3, #240	; 0xf0
 8001b5e:	039b      	lsls	r3, r3, #14
 8001b60:	401a      	ands	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	0018      	movs	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	b008      	add	sp, #32
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000

08001b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0bf      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b90:	4b61      	ldr	r3, [pc, #388]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2201      	movs	r2, #1
 8001b96:	4013      	ands	r3, r2
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d911      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b9e:	4b5e      	ldr	r3, [pc, #376]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4393      	bics	r3, r2
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0a6      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d015      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d006      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bd6:	4b51      	ldr	r3, [pc, #324]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001bdc:	21e0      	movs	r1, #224	; 0xe0
 8001bde:	00c9      	lsls	r1, r1, #3
 8001be0:	430a      	orrs	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be4:	4b4d      	ldr	r3, [pc, #308]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	22f0      	movs	r2, #240	; 0xf0
 8001bea:	4393      	bics	r3, r2
 8001bec:	0019      	movs	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d04c      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	029b      	lsls	r3, r3, #10
 8001c12:	4013      	ands	r3, r2
 8001c14:	d120      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e07a      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	049b      	lsls	r3, r3, #18
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d114      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06e      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001c3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	025b      	lsls	r3, r3, #9
 8001c42:	4013      	ands	r3, r2
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e062      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e05b      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c6c:	f7ff f90c 	bl	8000e88 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c76:	f7ff f907 	bl	8000e88 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	4a27      	ldr	r2, [pc, #156]	; (8001d20 <HAL_RCC_ClockConfig+0x1a4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e042      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	401a      	ands	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1ec      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d211      	bcs.n	8001cce <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_RCC_ClockConfig+0x19c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e020      	b.n	8001d10 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_RCC_ClockConfig+0x1a8>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cec:	f000 f820 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_RCC_ClockConfig+0x1a0>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x1ac>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	000a      	movs	r2, r1
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1b0>)
 8001d06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7ff f877 	bl	8000dfc <HAL_InitTick>
  
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b004      	add	sp, #16
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	00001388 	.word	0x00001388
 8001d24:	fffff8ff 	.word	0xfffff8ff
 8001d28:	0800406c 	.word	0x0800406c
 8001d2c:	20000004 	.word	0x20000004

08001d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08f      	sub	sp, #60	; 0x3c
 8001d34:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d36:	2314      	movs	r3, #20
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001d3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d3e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <HAL_RCC_GetSysClockFreq+0xec>)
 8001d48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d4a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d006      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0x52>
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d043      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0xd0>
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	d144      	bne.n	8001e06 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d80:	e044      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d84:	0c9b      	lsrs	r3, r3, #18
 8001d86:	220f      	movs	r2, #15
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2214      	movs	r2, #20
 8001d8c:	18ba      	adds	r2, r7, r2
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d92:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	220f      	movs	r2, #15
 8001d98:	4013      	ands	r3, r2
 8001d9a:	1d3a      	adds	r2, r7, #4
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	401a      	ands	r2, r3
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	025b      	lsls	r3, r3, #9
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d109      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db2:	481c      	ldr	r0, [pc, #112]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001db4:	f7fe f9a6 	bl	8000104 <__udivsi3>
 8001db8:	0003      	movs	r3, r0
 8001dba:	001a      	movs	r2, r3
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	4353      	muls	r3, r2
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc2:	e01a      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc6:	23c0      	movs	r3, #192	; 0xc0
 8001dc8:	025b      	lsls	r3, r3, #9
 8001dca:	401a      	ands	r2, r3
 8001dcc:	23c0      	movs	r3, #192	; 0xc0
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d109      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd8:	f7fe f994 	bl	8000104 <__udivsi3>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	001a      	movs	r2, r3
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	4353      	muls	r3, r2
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dea:	480e      	ldr	r0, [pc, #56]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001dec:	f7fe f98a 	bl	8000104 <__udivsi3>
 8001df0:	0003      	movs	r3, r0
 8001df2:	001a      	movs	r2, r3
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	4353      	muls	r3, r2
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dfe:	e005      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e04:	e002      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e0a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b00f      	add	sp, #60	; 0x3c
 8001e14:	bd90      	pop	{r4, r7, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	0800404c 	.word	0x0800404c
 8001e1c:	0800405c 	.word	0x0800405c
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	02dc6c00 	.word	0x02dc6c00

08001e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e30:	4b02      	ldr	r3, [pc, #8]	; (8001e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001e44:	f7ff fff2 	bl	8001e2c <HAL_RCC_GetHCLKFreq>
 8001e48:	0001      	movs	r1, r0
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	2207      	movs	r2, #7
 8001e52:	4013      	ands	r3, r2
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e56:	5cd3      	ldrb	r3, [r2, r3]
 8001e58:	40d9      	lsrs	r1, r3
 8001e5a:	000b      	movs	r3, r1
}    
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40021000 	.word	0x40021000
 8001e68:	0800407c 	.word	0x0800407c

08001e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	025b      	lsls	r3, r3, #9
 8001e84:	4013      	ands	r3, r2
 8001e86:	d100      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e88:	e08f      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2317      	movs	r3, #23
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	055b      	lsls	r3, r3, #21
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d111      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0549      	lsls	r1, r1, #21
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	61da      	str	r2, [r3, #28]
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	055b      	lsls	r3, r3, #21
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eba:	2317      	movs	r3, #23
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec2:	4b64      	ldr	r3, [pc, #400]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d11a      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ece:	4b61      	ldr	r3, [pc, #388]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b60      	ldr	r3, [pc, #384]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	0049      	lsls	r1, r1, #1
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001edc:	f7fe ffd4 	bl	8000e88 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7fe ffcf 	bl	8000e88 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0a6      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b56      	ldr	r3, [pc, #344]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f04:	4b52      	ldr	r3, [pc, #328]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	23c0      	movs	r3, #192	; 0xc0
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d034      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d02c      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a4b      	ldr	r2, [pc, #300]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f30:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	0249      	lsls	r1, r1, #9
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3e:	4b44      	ldr	r3, [pc, #272]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f44:	4945      	ldr	r1, [pc, #276]	; (800205c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7fe ff96 	bl	8000e88 <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f60:	e009      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe ff91 	bl	8000e88 <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a3c      	ldr	r2, [pc, #240]	; (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e067      	b.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f76:	4b36      	ldr	r3, [pc, #216]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f80:	4b33      	ldr	r3, [pc, #204]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a34      	ldr	r2, [pc, #208]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f94:	2317      	movs	r3, #23
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fa4:	492f      	ldr	r1, [pc, #188]	; (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fb4:	4b26      	ldr	r3, [pc, #152]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4393      	bics	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689a      	ldr	r2, [r3, #8]
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a24      	ldr	r2, [pc, #144]	; (8002068 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	02db      	lsls	r3, r3, #11
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ff2:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002002:	430a      	orrs	r2, r1
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2220      	movs	r2, #32
 800200c:	4013      	ands	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002010:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	2210      	movs	r2, #16
 8002016:	4393      	bics	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002020:	430a      	orrs	r2, r1
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	2380      	movs	r3, #128	; 0x80
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4013      	ands	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	2240      	movs	r2, #64	; 0x40
 8002036:	4393      	bics	r3, r2
 8002038:	0019      	movs	r1, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002040:	430a      	orrs	r2, r1
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b006      	add	sp, #24
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	fffffcff 	.word	0xfffffcff
 800205c:	fffeffff 	.word	0xfffeffff
 8002060:	00001388 	.word	0x00001388
 8002064:	efffffff 	.word	0xefffffff
 8002068:	fffcffff 	.word	0xfffcffff
 800206c:	fff3ffff 	.word	0xfff3ffff

08002070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e0a8      	b.n	80021d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	2382      	movs	r3, #130	; 0x82
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	429a      	cmp	r2, r3
 8002094:	d009      	beq.n	80020aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	61da      	str	r2, [r3, #28]
 800209c:	e005      	b.n	80020aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	225d      	movs	r2, #93	; 0x5d
 80020b4:	5c9b      	ldrb	r3, [r3, r2]
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d107      	bne.n	80020cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	225c      	movs	r2, #92	; 0x5c
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7fe fd6c 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	225d      	movs	r2, #93	; 0x5d
 80020d0:	2102      	movs	r1, #2
 80020d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2140      	movs	r1, #64	; 0x40
 80020e0:	438a      	bics	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	23e0      	movs	r3, #224	; 0xe0
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d902      	bls.n	80020f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e002      	b.n	80020fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	015b      	lsls	r3, r3, #5
 80020fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68da      	ldr	r2, [r3, #12]
 8002100:	23f0      	movs	r3, #240	; 0xf0
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	429a      	cmp	r2, r3
 8002106:	d008      	beq.n	800211a <HAL_SPI_Init+0xaa>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68da      	ldr	r2, [r3, #12]
 800210c:	23e0      	movs	r3, #224	; 0xe0
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	429a      	cmp	r2, r3
 8002112:	d002      	beq.n	800211a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	2382      	movs	r3, #130	; 0x82
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	401a      	ands	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6899      	ldr	r1, [r3, #8]
 8002128:	2384      	movs	r3, #132	; 0x84
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	400b      	ands	r3, r1
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2102      	movs	r1, #2
 8002136:	400b      	ands	r3, r1
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	2101      	movs	r1, #1
 8002140:	400b      	ands	r3, r1
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6999      	ldr	r1, [r3, #24]
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	400b      	ands	r3, r1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	2138      	movs	r1, #56	; 0x38
 8002156:	400b      	ands	r3, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	400b      	ands	r3, r1
 8002162:	431a      	orrs	r2, r3
 8002164:	0011      	movs	r1, r2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	019b      	lsls	r3, r3, #6
 800216e:	401a      	ands	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	2204      	movs	r2, #4
 8002180:	401a      	ands	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2110      	movs	r1, #16
 8002188:	400b      	ands	r3, r1
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002190:	2108      	movs	r1, #8
 8002192:	400b      	ands	r3, r1
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68d9      	ldr	r1, [r3, #12]
 800219a:	23f0      	movs	r3, #240	; 0xf0
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	400b      	ands	r3, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	0011      	movs	r1, r2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	015b      	lsls	r3, r3, #5
 80021aa:	401a      	ands	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4907      	ldr	r1, [pc, #28]	; (80021dc <HAL_SPI_Init+0x16c>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	225d      	movs	r2, #93	; 0x5d
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	fffff7ff 	.word	0xfffff7ff

080021e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	1dbb      	adds	r3, r7, #6
 80021ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021f0:	231f      	movs	r3, #31
 80021f2:	18fb      	adds	r3, r7, r3
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	225c      	movs	r2, #92	; 0x5c
 80021fc:	5c9b      	ldrb	r3, [r3, r2]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d101      	bne.n	8002206 <HAL_SPI_Transmit+0x26>
 8002202:	2302      	movs	r3, #2
 8002204:	e140      	b.n	8002488 <HAL_SPI_Transmit+0x2a8>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	225c      	movs	r2, #92	; 0x5c
 800220a:	2101      	movs	r1, #1
 800220c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800220e:	f7fe fe3b 	bl	8000e88 <HAL_GetTick>
 8002212:	0003      	movs	r3, r0
 8002214:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002216:	2316      	movs	r3, #22
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	1dba      	adds	r2, r7, #6
 800221c:	8812      	ldrh	r2, [r2, #0]
 800221e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	225d      	movs	r2, #93	; 0x5d
 8002224:	5c9b      	ldrb	r3, [r3, r2]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b01      	cmp	r3, #1
 800222a:	d004      	beq.n	8002236 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800222c:	231f      	movs	r3, #31
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2202      	movs	r2, #2
 8002232:	701a      	strb	r2, [r3, #0]
    goto error;
 8002234:	e11d      	b.n	8002472 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_SPI_Transmit+0x64>
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002244:	231f      	movs	r3, #31
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
    goto error;
 800224c:	e111      	b.n	8002472 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	225d      	movs	r2, #93	; 0x5d
 8002252:	2103      	movs	r1, #3
 8002254:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	1dba      	adds	r2, r7, #6
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1dba      	adds	r2, r7, #6
 800226e:	8812      	ldrh	r2, [r2, #0]
 8002270:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2244      	movs	r2, #68	; 0x44
 800227c:	2100      	movs	r1, #0
 800227e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2246      	movs	r2, #70	; 0x46
 8002284:	2100      	movs	r1, #0
 8002286:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	429a      	cmp	r2, r3
 800229e:	d110      	bne.n	80022c2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	438a      	bics	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	01c9      	lsls	r1, r1, #7
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2240      	movs	r2, #64	; 0x40
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b40      	cmp	r3, #64	; 0x40
 80022ce:	d007      	beq.n	80022e0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2140      	movs	r1, #64	; 0x40
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	23e0      	movs	r3, #224	; 0xe0
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d94e      	bls.n	800238a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d004      	beq.n	80022fe <HAL_SPI_Transmit+0x11e>
 80022f4:	2316      	movs	r3, #22
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d13f      	bne.n	800237e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	1c9a      	adds	r2, r3, #2
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002322:	e02c      	b.n	800237e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d112      	bne.n	8002358 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	881a      	ldrh	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	1c9a      	adds	r2, r3, #2
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002356:	e012      	b.n	800237e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002358:	f7fe fd96 	bl	8000e88 <HAL_GetTick>
 800235c:	0002      	movs	r2, r0
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d802      	bhi.n	800236e <HAL_SPI_Transmit+0x18e>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	3301      	adds	r3, #1
 800236c:	d102      	bne.n	8002374 <HAL_SPI_Transmit+0x194>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d104      	bne.n	800237e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002374:	231f      	movs	r3, #31
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2203      	movs	r2, #3
 800237a:	701a      	strb	r2, [r3, #0]
          goto error;
 800237c:	e079      	b.n	8002472 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1cd      	bne.n	8002324 <HAL_SPI_Transmit+0x144>
 8002388:	e04f      	b.n	800242a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d004      	beq.n	800239c <HAL_SPI_Transmit+0x1bc>
 8002392:	2316      	movs	r3, #22
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d141      	bne.n	8002420 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	330c      	adds	r3, #12
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80023c2:	e02d      	b.n	8002420 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2202      	movs	r2, #2
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d113      	bne.n	80023fa <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	330c      	adds	r3, #12
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023f8:	e012      	b.n	8002420 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023fa:	f7fe fd45 	bl	8000e88 <HAL_GetTick>
 80023fe:	0002      	movs	r2, r0
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d802      	bhi.n	8002410 <HAL_SPI_Transmit+0x230>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	d102      	bne.n	8002416 <HAL_SPI_Transmit+0x236>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002416:	231f      	movs	r3, #31
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2203      	movs	r2, #3
 800241c:	701a      	strb	r2, [r3, #0]
          goto error;
 800241e:	e028      	b.n	8002472 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cc      	bne.n	80023c4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fccf 	bl	8002dd4 <SPI_EndRxTxTransaction>
 8002436:	1e03      	subs	r3, r0, #0
 8002438:	d002      	beq.n	8002440 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002466:	231f      	movs	r3, #31
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e000      	b.n	8002472 <HAL_SPI_Transmit+0x292>
  }

error:
 8002470:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	225d      	movs	r2, #93	; 0x5d
 8002476:	2101      	movs	r1, #1
 8002478:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	225c      	movs	r2, #92	; 0x5c
 800247e:	2100      	movs	r1, #0
 8002480:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b008      	add	sp, #32
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024a0:	2317      	movs	r3, #23
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	2382      	movs	r3, #130	; 0x82
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d113      	bne.n	80024dc <HAL_SPI_Receive+0x4c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	225d      	movs	r2, #93	; 0x5d
 80024c0:	2104      	movs	r1, #4
 80024c2:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80024c4:	1dbb      	adds	r3, r7, #6
 80024c6:	881c      	ldrh	r4, [r3, #0]
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	0023      	movs	r3, r4
 80024d4:	f000 f928 	bl	8002728 <HAL_SPI_TransmitReceive>
 80024d8:	0003      	movs	r3, r0
 80024da:	e11c      	b.n	8002716 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	225c      	movs	r2, #92	; 0x5c
 80024e0:	5c9b      	ldrb	r3, [r3, r2]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_SPI_Receive+0x5a>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e115      	b.n	8002716 <HAL_SPI_Receive+0x286>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	225c      	movs	r2, #92	; 0x5c
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024f2:	f7fe fcc9 	bl	8000e88 <HAL_GetTick>
 80024f6:	0003      	movs	r3, r0
 80024f8:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	225d      	movs	r2, #93	; 0x5d
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d004      	beq.n	8002510 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002506:	2317      	movs	r3, #23
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
    goto error;
 800250e:	e0f7      	b.n	8002700 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_SPI_Receive+0x8e>
 8002516:	1dbb      	adds	r3, r7, #6
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d104      	bne.n	8002528 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800251e:	2317      	movs	r3, #23
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
    goto error;
 8002526:	e0eb      	b.n	8002700 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	225d      	movs	r2, #93	; 0x5d
 800252c:	2104      	movs	r1, #4
 800252e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1dba      	adds	r2, r7, #6
 8002540:	2144      	movs	r1, #68	; 0x44
 8002542:	8812      	ldrh	r2, [r2, #0]
 8002544:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1dba      	adds	r2, r7, #6
 800254a:	2146      	movs	r1, #70	; 0x46
 800254c:	8812      	ldrh	r2, [r2, #0]
 800254e:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	23e0      	movs	r3, #224	; 0xe0
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	429a      	cmp	r2, r3
 8002578:	d908      	bls.n	800258c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4966      	ldr	r1, [pc, #408]	; (8002720 <HAL_SPI_Receive+0x290>)
 8002586:	400a      	ands	r2, r1
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	e008      	b.n	800259e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0149      	lsls	r1, r1, #5
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d10f      	bne.n	80025ca <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2140      	movs	r1, #64	; 0x40
 80025b6:	438a      	bics	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4957      	ldr	r1, [pc, #348]	; (8002724 <HAL_SPI_Receive+0x294>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2240      	movs	r2, #64	; 0x40
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d007      	beq.n	80025e8 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	23e0      	movs	r3, #224	; 0xe0
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d900      	bls.n	80025f6 <HAL_SPI_Receive+0x166>
 80025f4:	e069      	b.n	80026ca <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80025f6:	e031      	b.n	800265c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2201      	movs	r2, #1
 8002600:	4013      	ands	r3, r2
 8002602:	2b01      	cmp	r3, #1
 8002604:	d117      	bne.n	8002636 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	330c      	adds	r3, #12
 800260c:	001a      	movs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	7812      	ldrb	r2, [r2, #0]
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2246      	movs	r2, #70	; 0x46
 8002626:	5a9b      	ldrh	r3, [r3, r2]
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b299      	uxth	r1, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2246      	movs	r2, #70	; 0x46
 8002632:	5299      	strh	r1, [r3, r2]
 8002634:	e012      	b.n	800265c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002636:	f7fe fc27 	bl	8000e88 <HAL_GetTick>
 800263a:	0002      	movs	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d802      	bhi.n	800264c <HAL_SPI_Receive+0x1bc>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	d102      	bne.n	8002652 <HAL_SPI_Receive+0x1c2>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d104      	bne.n	800265c <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002652:	2317      	movs	r3, #23
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2203      	movs	r2, #3
 8002658:	701a      	strb	r2, [r3, #0]
          goto error;
 800265a:	e051      	b.n	8002700 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2246      	movs	r2, #70	; 0x46
 8002660:	5a9b      	ldrh	r3, [r3, r2]
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1c7      	bne.n	80025f8 <HAL_SPI_Receive+0x168>
 8002668:	e035      	b.n	80026d6 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	2b01      	cmp	r3, #1
 8002676:	d115      	bne.n	80026a4 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	b292      	uxth	r2, r2
 8002684:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	1c9a      	adds	r2, r3, #2
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2246      	movs	r2, #70	; 0x46
 8002694:	5a9b      	ldrh	r3, [r3, r2]
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b299      	uxth	r1, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2246      	movs	r2, #70	; 0x46
 80026a0:	5299      	strh	r1, [r3, r2]
 80026a2:	e012      	b.n	80026ca <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026a4:	f7fe fbf0 	bl	8000e88 <HAL_GetTick>
 80026a8:	0002      	movs	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d802      	bhi.n	80026ba <HAL_SPI_Receive+0x22a>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	d102      	bne.n	80026c0 <HAL_SPI_Receive+0x230>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80026c0:	2317      	movs	r3, #23
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2203      	movs	r2, #3
 80026c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80026c8:	e01a      	b.n	8002700 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2246      	movs	r2, #70	; 0x46
 80026ce:	5a9b      	ldrh	r3, [r3, r2]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1c9      	bne.n	800266a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	6839      	ldr	r1, [r7, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	0018      	movs	r0, r3
 80026de:	f000 fb1b 	bl	8002d18 <SPI_EndRxTransaction>
 80026e2:	1e03      	subs	r3, r0, #0
 80026e4:	d002      	beq.n	80026ec <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d004      	beq.n	80026fe <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80026f4:	2317      	movs	r3, #23
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e000      	b.n	8002700 <HAL_SPI_Receive+0x270>
  }

error :
 80026fe:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	225d      	movs	r2, #93	; 0x5d
 8002704:	2101      	movs	r1, #1
 8002706:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	225c      	movs	r2, #92	; 0x5c
 800270c:	2100      	movs	r1, #0
 800270e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002710:	2317      	movs	r3, #23
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	781b      	ldrb	r3, [r3, #0]
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b007      	add	sp, #28
 800271c:	bd90      	pop	{r4, r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	ffffefff 	.word	0xffffefff
 8002724:	ffffbfff 	.word	0xffffbfff

08002728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	001a      	movs	r2, r3
 8002736:	1cbb      	adds	r3, r7, #2
 8002738:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800273a:	2301      	movs	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800273e:	2323      	movs	r3, #35	; 0x23
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	225c      	movs	r2, #92	; 0x5c
 800274a:	5c9b      	ldrb	r3, [r3, r2]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x2c>
 8002750:	2302      	movs	r3, #2
 8002752:	e1b6      	b.n	8002ac2 <HAL_SPI_TransmitReceive+0x39a>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	225c      	movs	r2, #92	; 0x5c
 8002758:	2101      	movs	r1, #1
 800275a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800275c:	f7fe fb94 	bl	8000e88 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002764:	201b      	movs	r0, #27
 8002766:	183b      	adds	r3, r7, r0
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	215d      	movs	r1, #93	; 0x5d
 800276c:	5c52      	ldrb	r2, [r2, r1]
 800276e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002776:	2312      	movs	r3, #18
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	1cba      	adds	r2, r7, #2
 800277c:	8812      	ldrh	r2, [r2, #0]
 800277e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002780:	183b      	adds	r3, r7, r0
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d012      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x86>
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	2382      	movs	r3, #130	; 0x82
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	429a      	cmp	r2, r3
 8002790:	d108      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x7c>
 800279a:	231b      	movs	r3, #27
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d004      	beq.n	80027ae <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 80027a4:	2323      	movs	r3, #35	; 0x23
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	2202      	movs	r2, #2
 80027aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80027ac:	e17e      	b.n	8002aac <HAL_SPI_TransmitReceive+0x384>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d006      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x9a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_SPI_TransmitReceive+0x9a>
 80027ba:	1cbb      	adds	r3, r7, #2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d104      	bne.n	80027cc <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 80027c2:	2323      	movs	r3, #35	; 0x23
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
    goto error;
 80027ca:	e16f      	b.n	8002aac <HAL_SPI_TransmitReceive+0x384>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	225d      	movs	r2, #93	; 0x5d
 80027d0:	5c9b      	ldrb	r3, [r3, r2]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d003      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	225d      	movs	r2, #93	; 0x5d
 80027dc:	2105      	movs	r1, #5
 80027de:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1cba      	adds	r2, r7, #2
 80027f0:	2146      	movs	r1, #70	; 0x46
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1cba      	adds	r2, r7, #2
 80027fa:	2144      	movs	r1, #68	; 0x44
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1cba      	adds	r2, r7, #2
 800280a:	8812      	ldrh	r2, [r2, #0]
 800280c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1cba      	adds	r2, r7, #2
 8002812:	8812      	ldrh	r2, [r2, #0]
 8002814:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	23e0      	movs	r3, #224	; 0xe0
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	429a      	cmp	r2, r3
 800282c:	d908      	bls.n	8002840 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	49a4      	ldr	r1, [pc, #656]	; (8002acc <HAL_SPI_TransmitReceive+0x3a4>)
 800283a:	400a      	ands	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	e008      	b.n	8002852 <HAL_SPI_TransmitReceive+0x12a>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0149      	lsls	r1, r1, #5
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2240      	movs	r2, #64	; 0x40
 800285a:	4013      	ands	r3, r2
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d007      	beq.n	8002870 <HAL_SPI_TransmitReceive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2140      	movs	r1, #64	; 0x40
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	23e0      	movs	r3, #224	; 0xe0
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	429a      	cmp	r2, r3
 800287a:	d800      	bhi.n	800287e <HAL_SPI_TransmitReceive+0x156>
 800287c:	e07f      	b.n	800297e <HAL_SPI_TransmitReceive+0x256>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_SPI_TransmitReceive+0x16a>
 8002886:	2312      	movs	r3, #18
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d000      	beq.n	8002892 <HAL_SPI_TransmitReceive+0x16a>
 8002890:	e069      	b.n	8002966 <HAL_SPI_TransmitReceive+0x23e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	1c9a      	adds	r2, r3, #2
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028b6:	e056      	b.n	8002966 <HAL_SPI_TransmitReceive+0x23e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d11b      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x1d6>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d016      	beq.n	80028fe <HAL_SPI_TransmitReceive+0x1d6>
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d113      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x1d6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	1c9a      	adds	r2, r3, #2
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2201      	movs	r2, #1
 8002906:	4013      	ands	r3, r2
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11c      	bne.n	8002946 <HAL_SPI_TransmitReceive+0x21e>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2246      	movs	r2, #70	; 0x46
 8002910:	5a9b      	ldrh	r3, [r3, r2]
 8002912:	b29b      	uxth	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d016      	beq.n	8002946 <HAL_SPI_TransmitReceive+0x21e>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	b292      	uxth	r2, r2
 8002924:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	1c9a      	adds	r2, r3, #2
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2246      	movs	r2, #70	; 0x46
 8002934:	5a9b      	ldrh	r3, [r3, r2]
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b299      	uxth	r1, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2246      	movs	r2, #70	; 0x46
 8002940:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002942:	2301      	movs	r3, #1
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002946:	f7fe fa9f 	bl	8000e88 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002952:	429a      	cmp	r2, r3
 8002954:	d807      	bhi.n	8002966 <HAL_SPI_TransmitReceive+0x23e>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	3301      	adds	r3, #1
 800295a:	d004      	beq.n	8002966 <HAL_SPI_TransmitReceive+0x23e>
      {
        errorcode = HAL_TIMEOUT;
 800295c:	2323      	movs	r3, #35	; 0x23
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2203      	movs	r2, #3
 8002962:	701a      	strb	r2, [r3, #0]
        goto error;
 8002964:	e0a2      	b.n	8002aac <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1a3      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x190>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2246      	movs	r2, #70	; 0x46
 8002974:	5a9b      	ldrh	r3, [r3, r2]
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d19d      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x190>
 800297c:	e085      	b.n	8002a8a <HAL_SPI_TransmitReceive+0x362>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x26a>
 8002986:	2312      	movs	r3, #18
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d000      	beq.n	8002992 <HAL_SPI_TransmitReceive+0x26a>
 8002990:	e070      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	7812      	ldrb	r2, [r2, #0]
 800299e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	3b01      	subs	r3, #1
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029b8:	e05c      	b.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2202      	movs	r2, #2
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d11c      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x2da>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d017      	beq.n	8002a02 <HAL_SPI_TransmitReceive+0x2da>
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d114      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x2da>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	330c      	adds	r3, #12
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d11e      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0x326>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2246      	movs	r2, #70	; 0x46
 8002a14:	5a9b      	ldrh	r3, [r3, r2]
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d018      	beq.n	8002a4e <HAL_SPI_TransmitReceive+0x326>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	330c      	adds	r3, #12
 8002a22:	001a      	movs	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	7812      	ldrb	r2, [r2, #0]
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2246      	movs	r2, #70	; 0x46
 8002a3c:	5a9b      	ldrh	r3, [r3, r2]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b299      	uxth	r1, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2246      	movs	r2, #70	; 0x46
 8002a48:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a4e:	f7fe fa1b 	bl	8000e88 <HAL_GetTick>
 8002a52:	0002      	movs	r2, r0
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d802      	bhi.n	8002a64 <HAL_SPI_TransmitReceive+0x33c>
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a60:	3301      	adds	r3, #1
 8002a62:	d102      	bne.n	8002a6a <HAL_SPI_TransmitReceive+0x342>
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <HAL_SPI_TransmitReceive+0x34c>
      {
        errorcode = HAL_TIMEOUT;
 8002a6a:	2323      	movs	r3, #35	; 0x23
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	2203      	movs	r2, #3
 8002a70:	701a      	strb	r2, [r3, #0]
        goto error;
 8002a72:	e01b      	b.n	8002aac <HAL_SPI_TransmitReceive+0x384>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d19d      	bne.n	80029ba <HAL_SPI_TransmitReceive+0x292>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2246      	movs	r2, #70	; 0x46
 8002a82:	5a9b      	ldrh	r3, [r3, r2]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d197      	bne.n	80029ba <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 f99f 	bl	8002dd4 <SPI_EndRxTxTransaction>
 8002a96:	1e03      	subs	r3, r0, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_SPI_TransmitReceive+0x382>
  {
    errorcode = HAL_ERROR;
 8002a9a:	2323      	movs	r3, #35	; 0x23
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	661a      	str	r2, [r3, #96]	; 0x60
 8002aa8:	e000      	b.n	8002aac <HAL_SPI_TransmitReceive+0x384>
  }

error :
 8002aaa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	225d      	movs	r2, #93	; 0x5d
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	225c      	movs	r2, #92	; 0x5c
 8002ab8:	2100      	movs	r1, #0
 8002aba:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002abc:	2323      	movs	r3, #35	; 0x23
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	781b      	ldrb	r3, [r3, #0]
}
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	b00a      	add	sp, #40	; 0x28
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	ffffefff 	.word	0xffffefff

08002ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ae0:	f7fe f9d2 	bl	8000e88 <HAL_GetTick>
 8002ae4:	0002      	movs	r2, r0
 8002ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	18d3      	adds	r3, r2, r3
 8002aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002af0:	f7fe f9ca 	bl	8000e88 <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002af8:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	015b      	lsls	r3, r3, #5
 8002afe:	0d1b      	lsrs	r3, r3, #20
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	4353      	muls	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b06:	e058      	b.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	d055      	beq.n	8002bba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b0e:	f7fe f9bb 	bl	8000e88 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d902      	bls.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d142      	bne.n	8002baa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	21e0      	movs	r1, #224	; 0xe0
 8002b30:	438a      	bics	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	2382      	movs	r3, #130	; 0x82
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d113      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d005      	beq.n	8002b58 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d107      	bne.n	8002b68 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2140      	movs	r1, #64	; 0x40
 8002b64:	438a      	bics	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	019b      	lsls	r3, r3, #6
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d110      	bne.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	491a      	ldr	r1, [pc, #104]	; (8002be8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	0189      	lsls	r1, r1, #6
 8002b92:	430a      	orrs	r2, r1
 8002b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	225d      	movs	r2, #93	; 0x5d
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	225c      	movs	r2, #92	; 0x5c
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e017      	b.n	8002bda <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	425a      	negs	r2, r3
 8002bca:	4153      	adcs	r3, r2
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	001a      	movs	r2, r3
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d197      	bne.n	8002b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b008      	add	sp, #32
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	20000004 	.word	0x20000004
 8002be8:	ffffdfff 	.word	0xffffdfff

08002bec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002bfa:	f7fe f945 	bl	8000e88 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	18d3      	adds	r3, r2, r3
 8002c08:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c0a:	f7fe f93d 	bl	8000e88 <HAL_GetTick>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002c12:	4b3f      	ldr	r3, [pc, #252]	; (8002d10 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	0013      	movs	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	00da      	lsls	r2, r3, #3
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	0d1b      	lsrs	r3, r3, #20
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	4353      	muls	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002c28:	e064      	b.n	8002cf4 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	23c0      	movs	r3, #192	; 0xc0
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d106      	bne.n	8002c42 <SPI_WaitFifoStateUntilTimeout+0x56>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d103      	bne.n	8002c42 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	d055      	beq.n	8002cf4 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c48:	f7fe f91e 	bl	8000e88 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d902      	bls.n	8002c5e <SPI_WaitFifoStateUntilTimeout+0x72>
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d142      	bne.n	8002ce4 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	21e0      	movs	r1, #224	; 0xe0
 8002c6a:	438a      	bics	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	2382      	movs	r3, #130	; 0x82
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d113      	bne.n	8002ca2 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	021b      	lsls	r3, r3, #8
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d005      	beq.n	8002c92 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d107      	bne.n	8002ca2 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2140      	movs	r1, #64	; 0x40
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	019b      	lsls	r3, r3, #6
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d110      	bne.n	8002cd0 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4916      	ldr	r1, [pc, #88]	; (8002d14 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	0189      	lsls	r1, r1, #6
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	225d      	movs	r2, #93	; 0x5d
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	225c      	movs	r2, #92	; 0x5c
 8002cdc:	2100      	movs	r1, #0
 8002cde:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e010      	b.n	8002d06 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d192      	bne.n	8002c2a <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	0018      	movs	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b008      	add	sp, #32
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	20000004 	.word	0x20000004
 8002d14:	ffffdfff 	.word	0xffffdfff

08002d18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	2382      	movs	r3, #130	; 0x82
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d113      	bne.n	8002d58 <SPI_EndRxTransaction+0x40>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d005      	beq.n	8002d48 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d107      	bne.n	8002d58 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2140      	movs	r1, #64	; 0x40
 8002d54:	438a      	bics	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	0013      	movs	r3, r2
 8002d62:	2200      	movs	r2, #0
 8002d64:	2180      	movs	r1, #128	; 0x80
 8002d66:	f7ff feb3 	bl	8002ad0 <SPI_WaitFlagStateUntilTimeout>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d007      	beq.n	8002d7e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d72:	2220      	movs	r2, #32
 8002d74:	431a      	orrs	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e026      	b.n	8002dcc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	2382      	movs	r3, #130	; 0x82
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d11f      	bne.n	8002dca <SPI_EndRxTransaction+0xb2>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d005      	beq.n	8002da2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d113      	bne.n	8002dca <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	23c0      	movs	r3, #192	; 0xc0
 8002da6:	00d9      	lsls	r1, r3, #3
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	0013      	movs	r3, r2
 8002db0:	2200      	movs	r2, #0
 8002db2:	f7ff ff1b 	bl	8002bec <SPI_WaitFifoStateUntilTimeout>
 8002db6:	1e03      	subs	r3, r0, #0
 8002db8:	d007      	beq.n	8002dca <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e000      	b.n	8002dcc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b004      	add	sp, #16
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	23c0      	movs	r3, #192	; 0xc0
 8002de4:	0159      	lsls	r1, r3, #5
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	0013      	movs	r3, r2
 8002dee:	2200      	movs	r2, #0
 8002df0:	f7ff fefc 	bl	8002bec <SPI_WaitFifoStateUntilTimeout>
 8002df4:	1e03      	subs	r3, r0, #0
 8002df6:	d007      	beq.n	8002e08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e027      	b.n	8002e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	0013      	movs	r3, r2
 8002e12:	2200      	movs	r2, #0
 8002e14:	2180      	movs	r1, #128	; 0x80
 8002e16:	f7ff fe5b 	bl	8002ad0 <SPI_WaitFlagStateUntilTimeout>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d007      	beq.n	8002e2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e22:	2220      	movs	r2, #32
 8002e24:	431a      	orrs	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e014      	b.n	8002e58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	23c0      	movs	r3, #192	; 0xc0
 8002e32:	00d9      	lsls	r1, r3, #3
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	0013      	movs	r3, r2
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f7ff fed5 	bl	8002bec <SPI_WaitFifoStateUntilTimeout>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d007      	beq.n	8002e56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e000      	b.n	8002e58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e044      	b.n	8002efc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2274      	movs	r2, #116	; 0x74
 8002e7e:	2100      	movs	r1, #0
 8002e80:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7fd fed9 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2224      	movs	r2, #36	; 0x24
 8002e8e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	f000 f8da 	bl	800305c <UART_SetConfig>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e024      	b.n	8002efc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f000 fab3 	bl	8003428 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	490d      	ldr	r1, [pc, #52]	; (8002f04 <HAL_UART_Init+0xa4>)
 8002ece:	400a      	ands	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	212a      	movs	r1, #42	; 0x2a
 8002ede:	438a      	bics	r2, r1
 8002ee0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2101      	movs	r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 fb4b 	bl	8003590 <UART_CheckIdleState>
 8002efa:	0003      	movs	r3, r0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	ffffb7ff 	.word	0xffffb7ff

08002f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	1dbb      	adds	r3, r7, #6
 8002f16:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d000      	beq.n	8002f22 <HAL_UART_Transmit+0x1a>
 8002f20:	e096      	b.n	8003050 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_UART_Transmit+0x28>
 8002f28:	1dbb      	adds	r3, r7, #6
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e08e      	b.n	8003052 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	015b      	lsls	r3, r3, #5
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d109      	bne.n	8002f54 <HAL_UART_Transmit+0x4c>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e07e      	b.n	8003052 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2274      	movs	r2, #116	; 0x74
 8002f58:	5c9b      	ldrb	r3, [r3, r2]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Transmit+0x5a>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e077      	b.n	8003052 <HAL_UART_Transmit+0x14a>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2274      	movs	r2, #116	; 0x74
 8002f66:	2101      	movs	r1, #1
 8002f68:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2221      	movs	r2, #33	; 0x21
 8002f76:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f78:	f7fd ff86 	bl	8000e88 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1dba      	adds	r2, r7, #6
 8002f84:	2150      	movs	r1, #80	; 0x50
 8002f86:	8812      	ldrh	r2, [r2, #0]
 8002f88:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	1dba      	adds	r2, r7, #6
 8002f8e:	2152      	movs	r1, #82	; 0x52
 8002f90:	8812      	ldrh	r2, [r2, #0]
 8002f92:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	015b      	lsls	r3, r3, #5
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d108      	bne.n	8002fb2 <HAL_UART_Transmit+0xaa>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
 8002fb0:	e003      	b.n	8002fba <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2274      	movs	r2, #116	; 0x74
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002fc2:	e02d      	b.n	8003020 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	0013      	movs	r3, r2
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	f000 fb27 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 8002fd6:	1e03      	subs	r3, r0, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e039      	b.n	8003052 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	05d2      	lsls	r2, r2, #23
 8002fee:	0dd2      	lsrs	r2, r2, #23
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	e008      	b.n	800300e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b292      	uxth	r2, r2
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	3301      	adds	r3, #1
 800300c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2252      	movs	r2, #82	; 0x52
 8003012:	5a9b      	ldrh	r3, [r3, r2]
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b299      	uxth	r1, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2252      	movs	r2, #82	; 0x52
 800301e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2252      	movs	r2, #82	; 0x52
 8003024:	5a9b      	ldrh	r3, [r3, r2]
 8003026:	b29b      	uxth	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1cb      	bne.n	8002fc4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	0013      	movs	r3, r2
 8003036:	2200      	movs	r2, #0
 8003038:	2140      	movs	r1, #64	; 0x40
 800303a:	f000 faf3 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d001      	beq.n	8003046 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e005      	b.n	8003052 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b008      	add	sp, #32
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003064:	231e      	movs	r3, #30
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	431a      	orrs	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4abd      	ldr	r2, [pc, #756]	; (8003380 <UART_SetConfig+0x324>)
 800308c:	4013      	ands	r3, r2
 800308e:	0019      	movs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4ab8      	ldr	r2, [pc, #736]	; (8003384 <UART_SetConfig+0x328>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4aaf      	ldr	r2, [pc, #700]	; (8003388 <UART_SetConfig+0x32c>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4aab      	ldr	r2, [pc, #684]	; (800338c <UART_SetConfig+0x330>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d125      	bne.n	800312e <UART_SetConfig+0xd2>
 80030e2:	4bab      	ldr	r3, [pc, #684]	; (8003390 <UART_SetConfig+0x334>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d00f      	beq.n	800310e <UART_SetConfig+0xb2>
 80030ee:	d304      	bcc.n	80030fa <UART_SetConfig+0x9e>
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d011      	beq.n	8003118 <UART_SetConfig+0xbc>
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d005      	beq.n	8003104 <UART_SetConfig+0xa8>
 80030f8:	e013      	b.n	8003122 <UART_SetConfig+0xc6>
 80030fa:	231f      	movs	r3, #31
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e0ba      	b.n	800327a <UART_SetConfig+0x21e>
 8003104:	231f      	movs	r3, #31
 8003106:	18fb      	adds	r3, r7, r3
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
 800310c:	e0b5      	b.n	800327a <UART_SetConfig+0x21e>
 800310e:	231f      	movs	r3, #31
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	2204      	movs	r2, #4
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e0b0      	b.n	800327a <UART_SetConfig+0x21e>
 8003118:	231f      	movs	r3, #31
 800311a:	18fb      	adds	r3, r7, r3
 800311c:	2208      	movs	r2, #8
 800311e:	701a      	strb	r2, [r3, #0]
 8003120:	e0ab      	b.n	800327a <UART_SetConfig+0x21e>
 8003122:	231f      	movs	r3, #31
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	2210      	movs	r2, #16
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	e0a5      	b.n	800327a <UART_SetConfig+0x21e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a98      	ldr	r2, [pc, #608]	; (8003394 <UART_SetConfig+0x338>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d132      	bne.n	800319e <UART_SetConfig+0x142>
 8003138:	4b95      	ldr	r3, [pc, #596]	; (8003390 <UART_SetConfig+0x334>)
 800313a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313c:	23c0      	movs	r3, #192	; 0xc0
 800313e:	029b      	lsls	r3, r3, #10
 8003140:	4013      	ands	r3, r2
 8003142:	2280      	movs	r2, #128	; 0x80
 8003144:	0252      	lsls	r2, r2, #9
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <UART_SetConfig+0x122>
 800314a:	2280      	movs	r2, #128	; 0x80
 800314c:	0252      	lsls	r2, r2, #9
 800314e:	4293      	cmp	r3, r2
 8003150:	d802      	bhi.n	8003158 <UART_SetConfig+0xfc>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <UART_SetConfig+0x10e>
 8003156:	e01c      	b.n	8003192 <UART_SetConfig+0x136>
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	0292      	lsls	r2, r2, #10
 800315c:	4293      	cmp	r3, r2
 800315e:	d013      	beq.n	8003188 <UART_SetConfig+0x12c>
 8003160:	22c0      	movs	r2, #192	; 0xc0
 8003162:	0292      	lsls	r2, r2, #10
 8003164:	4293      	cmp	r3, r2
 8003166:	d005      	beq.n	8003174 <UART_SetConfig+0x118>
 8003168:	e013      	b.n	8003192 <UART_SetConfig+0x136>
 800316a:	231f      	movs	r3, #31
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e082      	b.n	800327a <UART_SetConfig+0x21e>
 8003174:	231f      	movs	r3, #31
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2202      	movs	r2, #2
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e07d      	b.n	800327a <UART_SetConfig+0x21e>
 800317e:	231f      	movs	r3, #31
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e078      	b.n	800327a <UART_SetConfig+0x21e>
 8003188:	231f      	movs	r3, #31
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2208      	movs	r2, #8
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e073      	b.n	800327a <UART_SetConfig+0x21e>
 8003192:	231f      	movs	r3, #31
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2210      	movs	r2, #16
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	e06d      	b.n	800327a <UART_SetConfig+0x21e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a7d      	ldr	r2, [pc, #500]	; (8003398 <UART_SetConfig+0x33c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d132      	bne.n	800320e <UART_SetConfig+0x1b2>
 80031a8:	4b79      	ldr	r3, [pc, #484]	; (8003390 <UART_SetConfig+0x334>)
 80031aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ac:	23c0      	movs	r3, #192	; 0xc0
 80031ae:	031b      	lsls	r3, r3, #12
 80031b0:	4013      	ands	r3, r2
 80031b2:	2280      	movs	r2, #128	; 0x80
 80031b4:	02d2      	lsls	r2, r2, #11
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <UART_SetConfig+0x192>
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	02d2      	lsls	r2, r2, #11
 80031be:	4293      	cmp	r3, r2
 80031c0:	d802      	bhi.n	80031c8 <UART_SetConfig+0x16c>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <UART_SetConfig+0x17e>
 80031c6:	e01c      	b.n	8003202 <UART_SetConfig+0x1a6>
 80031c8:	2280      	movs	r2, #128	; 0x80
 80031ca:	0312      	lsls	r2, r2, #12
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d013      	beq.n	80031f8 <UART_SetConfig+0x19c>
 80031d0:	22c0      	movs	r2, #192	; 0xc0
 80031d2:	0312      	lsls	r2, r2, #12
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d005      	beq.n	80031e4 <UART_SetConfig+0x188>
 80031d8:	e013      	b.n	8003202 <UART_SetConfig+0x1a6>
 80031da:	231f      	movs	r3, #31
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	2200      	movs	r2, #0
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e04a      	b.n	800327a <UART_SetConfig+0x21e>
 80031e4:	231f      	movs	r3, #31
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	2202      	movs	r2, #2
 80031ea:	701a      	strb	r2, [r3, #0]
 80031ec:	e045      	b.n	800327a <UART_SetConfig+0x21e>
 80031ee:	231f      	movs	r3, #31
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2204      	movs	r2, #4
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e040      	b.n	800327a <UART_SetConfig+0x21e>
 80031f8:	231f      	movs	r3, #31
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2208      	movs	r2, #8
 80031fe:	701a      	strb	r2, [r3, #0]
 8003200:	e03b      	b.n	800327a <UART_SetConfig+0x21e>
 8003202:	231f      	movs	r3, #31
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	2210      	movs	r2, #16
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	e035      	b.n	800327a <UART_SetConfig+0x21e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a62      	ldr	r2, [pc, #392]	; (800339c <UART_SetConfig+0x340>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d104      	bne.n	8003222 <UART_SetConfig+0x1c6>
 8003218:	231f      	movs	r3, #31
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	2200      	movs	r2, #0
 800321e:	701a      	strb	r2, [r3, #0]
 8003220:	e02b      	b.n	800327a <UART_SetConfig+0x21e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5e      	ldr	r2, [pc, #376]	; (80033a0 <UART_SetConfig+0x344>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d104      	bne.n	8003236 <UART_SetConfig+0x1da>
 800322c:	231f      	movs	r3, #31
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	e021      	b.n	800327a <UART_SetConfig+0x21e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5a      	ldr	r2, [pc, #360]	; (80033a4 <UART_SetConfig+0x348>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d104      	bne.n	800324a <UART_SetConfig+0x1ee>
 8003240:	231f      	movs	r3, #31
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
 8003248:	e017      	b.n	800327a <UART_SetConfig+0x21e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a56      	ldr	r2, [pc, #344]	; (80033a8 <UART_SetConfig+0x34c>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d104      	bne.n	800325e <UART_SetConfig+0x202>
 8003254:	231f      	movs	r3, #31
 8003256:	18fb      	adds	r3, r7, r3
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e00d      	b.n	800327a <UART_SetConfig+0x21e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a52      	ldr	r2, [pc, #328]	; (80033ac <UART_SetConfig+0x350>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d104      	bne.n	8003272 <UART_SetConfig+0x216>
 8003268:	231f      	movs	r3, #31
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e003      	b.n	800327a <UART_SetConfig+0x21e>
 8003272:	231f      	movs	r3, #31
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2210      	movs	r2, #16
 8003278:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69da      	ldr	r2, [r3, #28]
 800327e:	2380      	movs	r3, #128	; 0x80
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	429a      	cmp	r2, r3
 8003284:	d15c      	bne.n	8003340 <UART_SetConfig+0x2e4>
  {
    switch (clocksource)
 8003286:	231f      	movs	r3, #31
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d00d      	beq.n	80032ac <UART_SetConfig+0x250>
 8003290:	dc02      	bgt.n	8003298 <UART_SetConfig+0x23c>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d005      	beq.n	80032a2 <UART_SetConfig+0x246>
 8003296:	e015      	b.n	80032c4 <UART_SetConfig+0x268>
 8003298:	2b04      	cmp	r3, #4
 800329a:	d00a      	beq.n	80032b2 <UART_SetConfig+0x256>
 800329c:	2b08      	cmp	r3, #8
 800329e:	d00d      	beq.n	80032bc <UART_SetConfig+0x260>
 80032a0:	e010      	b.n	80032c4 <UART_SetConfig+0x268>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a2:	f7fe fdcd 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 80032a6:	0003      	movs	r3, r0
 80032a8:	61bb      	str	r3, [r7, #24]
        break;
 80032aa:	e012      	b.n	80032d2 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ac:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <UART_SetConfig+0x354>)
 80032ae:	61bb      	str	r3, [r7, #24]
        break;
 80032b0:	e00f      	b.n	80032d2 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b2:	f7fe fd3d 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 80032b6:	0003      	movs	r3, r0
 80032b8:	61bb      	str	r3, [r7, #24]
        break;
 80032ba:	e00a      	b.n	80032d2 <UART_SetConfig+0x276>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	61bb      	str	r3, [r7, #24]
        break;
 80032c2:	e006      	b.n	80032d2 <UART_SetConfig+0x276>
      default:
        pclk = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032c8:	231e      	movs	r3, #30
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
        break;
 80032d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d100      	bne.n	80032da <UART_SetConfig+0x27e>
 80032d8:	e096      	b.n	8003408 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	005a      	lsls	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	18d2      	adds	r2, r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	0019      	movs	r1, r3
 80032ec:	0010      	movs	r0, r2
 80032ee:	f7fc ff09 	bl	8000104 <__udivsi3>
 80032f2:	0003      	movs	r3, r0
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d91b      	bls.n	8003336 <UART_SetConfig+0x2da>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <UART_SetConfig+0x358>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d817      	bhi.n	8003336 <UART_SetConfig+0x2da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	b29a      	uxth	r2, r3
 800330a:	200e      	movs	r0, #14
 800330c:	183b      	adds	r3, r7, r0
 800330e:	210f      	movs	r1, #15
 8003310:	438a      	bics	r2, r1
 8003312:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	b29b      	uxth	r3, r3
 800331a:	2207      	movs	r2, #7
 800331c:	4013      	ands	r3, r2
 800331e:	b299      	uxth	r1, r3
 8003320:	183b      	adds	r3, r7, r0
 8003322:	183a      	adds	r2, r7, r0
 8003324:	8812      	ldrh	r2, [r2, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	183a      	adds	r2, r7, r0
 8003330:	8812      	ldrh	r2, [r2, #0]
 8003332:	60da      	str	r2, [r3, #12]
 8003334:	e068      	b.n	8003408 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8003336:	231e      	movs	r3, #30
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e063      	b.n	8003408 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003340:	231f      	movs	r3, #31
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d00d      	beq.n	8003366 <UART_SetConfig+0x30a>
 800334a:	dc02      	bgt.n	8003352 <UART_SetConfig+0x2f6>
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <UART_SetConfig+0x300>
 8003350:	e032      	b.n	80033b8 <UART_SetConfig+0x35c>
 8003352:	2b04      	cmp	r3, #4
 8003354:	d00a      	beq.n	800336c <UART_SetConfig+0x310>
 8003356:	2b08      	cmp	r3, #8
 8003358:	d00d      	beq.n	8003376 <UART_SetConfig+0x31a>
 800335a:	e02d      	b.n	80033b8 <UART_SetConfig+0x35c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7fe fd70 	bl	8001e40 <HAL_RCC_GetPCLK1Freq>
 8003360:	0003      	movs	r3, r0
 8003362:	61bb      	str	r3, [r7, #24]
        break;
 8003364:	e02f      	b.n	80033c6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <UART_SetConfig+0x354>)
 8003368:	61bb      	str	r3, [r7, #24]
        break;
 800336a:	e02c      	b.n	80033c6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336c:	f7fe fce0 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8003370:	0003      	movs	r3, r0
 8003372:	61bb      	str	r3, [r7, #24]
        break;
 8003374:	e027      	b.n	80033c6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	61bb      	str	r3, [r7, #24]
        break;
 800337c:	e023      	b.n	80033c6 <UART_SetConfig+0x36a>
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	efff69f3 	.word	0xefff69f3
 8003384:	ffffcfff 	.word	0xffffcfff
 8003388:	fffff4ff 	.word	0xfffff4ff
 800338c:	40013800 	.word	0x40013800
 8003390:	40021000 	.word	0x40021000
 8003394:	40004400 	.word	0x40004400
 8003398:	40004800 	.word	0x40004800
 800339c:	40004c00 	.word	0x40004c00
 80033a0:	40005000 	.word	0x40005000
 80033a4:	40011400 	.word	0x40011400
 80033a8:	40011800 	.word	0x40011800
 80033ac:	40011c00 	.word	0x40011c00
 80033b0:	007a1200 	.word	0x007a1200
 80033b4:	0000ffff 	.word	0x0000ffff
      default:
        pclk = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033bc:	231e      	movs	r3, #30
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2201      	movs	r2, #1
 80033c2:	701a      	strb	r2, [r3, #0]
        break;
 80033c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01d      	beq.n	8003408 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	085a      	lsrs	r2, r3, #1
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	18d2      	adds	r2, r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	0019      	movs	r1, r3
 80033dc:	0010      	movs	r0, r2
 80033de:	f7fc fe91 	bl	8000104 <__udivsi3>
 80033e2:	0003      	movs	r3, r0
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b0f      	cmp	r3, #15
 80033ec:	d908      	bls.n	8003400 <UART_SetConfig+0x3a4>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4a0c      	ldr	r2, [pc, #48]	; (8003424 <UART_SetConfig+0x3c8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d804      	bhi.n	8003400 <UART_SetConfig+0x3a4>
      {
        huart->Instance->BRR = usartdiv;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	e003      	b.n	8003408 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8003400:	231e      	movs	r3, #30
 8003402:	18fb      	adds	r3, r7, r3
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003414:	231e      	movs	r3, #30
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b008      	add	sp, #32
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	0000ffff 	.word	0x0000ffff

08003428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	2201      	movs	r2, #1
 8003436:	4013      	ands	r3, r2
 8003438:	d00b      	beq.n	8003452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a4a      	ldr	r2, [pc, #296]	; (800356c <UART_AdvFeatureConfig+0x144>)
 8003442:	4013      	ands	r3, r2
 8003444:	0019      	movs	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2202      	movs	r2, #2
 8003458:	4013      	ands	r3, r2
 800345a:	d00b      	beq.n	8003474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	4a43      	ldr	r2, [pc, #268]	; (8003570 <UART_AdvFeatureConfig+0x148>)
 8003464:	4013      	ands	r3, r2
 8003466:	0019      	movs	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2204      	movs	r2, #4
 800347a:	4013      	ands	r3, r2
 800347c:	d00b      	beq.n	8003496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a3b      	ldr	r2, [pc, #236]	; (8003574 <UART_AdvFeatureConfig+0x14c>)
 8003486:	4013      	ands	r3, r2
 8003488:	0019      	movs	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2208      	movs	r2, #8
 800349c:	4013      	ands	r3, r2
 800349e:	d00b      	beq.n	80034b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	4a34      	ldr	r2, [pc, #208]	; (8003578 <UART_AdvFeatureConfig+0x150>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	0019      	movs	r1, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	2210      	movs	r2, #16
 80034be:	4013      	ands	r3, r2
 80034c0:	d00b      	beq.n	80034da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a2c      	ldr	r2, [pc, #176]	; (800357c <UART_AdvFeatureConfig+0x154>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	2220      	movs	r2, #32
 80034e0:	4013      	ands	r3, r2
 80034e2:	d00b      	beq.n	80034fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	4a25      	ldr	r2, [pc, #148]	; (8003580 <UART_AdvFeatureConfig+0x158>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	0019      	movs	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	2240      	movs	r2, #64	; 0x40
 8003502:	4013      	ands	r3, r2
 8003504:	d01d      	beq.n	8003542 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <UART_AdvFeatureConfig+0x15c>)
 800350e:	4013      	ands	r3, r2
 8003510:	0019      	movs	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	035b      	lsls	r3, r3, #13
 8003526:	429a      	cmp	r2, r3
 8003528:	d10b      	bne.n	8003542 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <UART_AdvFeatureConfig+0x160>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	4013      	ands	r3, r2
 800354a:	d00b      	beq.n	8003564 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	4a0e      	ldr	r2, [pc, #56]	; (800358c <UART_AdvFeatureConfig+0x164>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
  }
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}
 800356c:	fffdffff 	.word	0xfffdffff
 8003570:	fffeffff 	.word	0xfffeffff
 8003574:	fffbffff 	.word	0xfffbffff
 8003578:	ffff7fff 	.word	0xffff7fff
 800357c:	ffffefff 	.word	0xffffefff
 8003580:	ffffdfff 	.word	0xffffdfff
 8003584:	ffefffff 	.word	0xffefffff
 8003588:	ff9fffff 	.word	0xff9fffff
 800358c:	fff7ffff 	.word	0xfff7ffff

08003590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af02      	add	r7, sp, #8
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	2100      	movs	r1, #0
 800359e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a0:	f7fd fc72 	bl	8000e88 <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2208      	movs	r2, #8
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d10d      	bne.n	80035d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	0399      	lsls	r1, r3, #14
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4b18      	ldr	r3, [pc, #96]	; (8003620 <UART_CheckIdleState+0x90>)
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	0013      	movs	r3, r2
 80035c4:	2200      	movs	r2, #0
 80035c6:	f000 f82d 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 80035ca:	1e03      	subs	r3, r0, #0
 80035cc:	d001      	beq.n	80035d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e022      	b.n	8003618 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d10d      	bne.n	80035fc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	03d9      	lsls	r1, r3, #15
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <UART_CheckIdleState+0x90>)
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	0013      	movs	r3, r2
 80035ee:	2200      	movs	r2, #0
 80035f0:	f000 f818 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 80035f4:	1e03      	subs	r3, r0, #0
 80035f6:	d001      	beq.n	80035fc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e00d      	b.n	8003618 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2274      	movs	r2, #116	; 0x74
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	b004      	add	sp, #16
 800361e:	bd80      	pop	{r7, pc}
 8003620:	01ffffff 	.word	0x01ffffff

08003624 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	1dfb      	adds	r3, r7, #7
 8003632:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	e05e      	b.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3301      	adds	r3, #1
 800363a:	d05b      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363c:	f7fd fc24 	bl	8000e88 <HAL_GetTick>
 8003640:	0002      	movs	r2, r0
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <UART_WaitOnFlagUntilTimeout+0x2e>
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d11b      	bne.n	800368a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	492f      	ldr	r1, [pc, #188]	; (800371c <UART_WaitOnFlagUntilTimeout+0xf8>)
 800365e:	400a      	ands	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2101      	movs	r1, #1
 800366e:	438a      	bics	r2, r1
 8003670:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2274      	movs	r2, #116	; 0x74
 8003682:	2100      	movs	r1, #0
 8003684:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e044      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2204      	movs	r2, #4
 8003692:	4013      	ands	r3, r2
 8003694:	d02e      	beq.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	401a      	ands	r2, r3
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d124      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4917      	ldr	r1, [pc, #92]	; (800371c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036c0:	400a      	ands	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2101      	movs	r1, #1
 80036d0:	438a      	bics	r2, r1
 80036d2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	2120      	movs	r1, #32
 80036e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2274      	movs	r2, #116	; 0x74
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e00f      	b.n	8003714 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	425a      	negs	r2, r3
 8003704:	4153      	adcs	r3, r2
 8003706:	b2db      	uxtb	r3, r3
 8003708:	001a      	movs	r2, r3
 800370a:	1dfb      	adds	r3, r7, #7
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d091      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b004      	add	sp, #16
 800371a:	bd80      	pop	{r7, pc}
 800371c:	fffffe5f 	.word	0xfffffe5f

08003720 <__errno>:
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <__errno+0x8>)
 8003722:	6818      	ldr	r0, [r3, #0]
 8003724:	4770      	bx	lr
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	20000010 	.word	0x20000010

0800372c <__libc_init_array>:
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	2600      	movs	r6, #0
 8003730:	4d0c      	ldr	r5, [pc, #48]	; (8003764 <__libc_init_array+0x38>)
 8003732:	4c0d      	ldr	r4, [pc, #52]	; (8003768 <__libc_init_array+0x3c>)
 8003734:	1b64      	subs	r4, r4, r5
 8003736:	10a4      	asrs	r4, r4, #2
 8003738:	42a6      	cmp	r6, r4
 800373a:	d109      	bne.n	8003750 <__libc_init_array+0x24>
 800373c:	2600      	movs	r6, #0
 800373e:	f000 fc29 	bl	8003f94 <_init>
 8003742:	4d0a      	ldr	r5, [pc, #40]	; (800376c <__libc_init_array+0x40>)
 8003744:	4c0a      	ldr	r4, [pc, #40]	; (8003770 <__libc_init_array+0x44>)
 8003746:	1b64      	subs	r4, r4, r5
 8003748:	10a4      	asrs	r4, r4, #2
 800374a:	42a6      	cmp	r6, r4
 800374c:	d105      	bne.n	800375a <__libc_init_array+0x2e>
 800374e:	bd70      	pop	{r4, r5, r6, pc}
 8003750:	00b3      	lsls	r3, r6, #2
 8003752:	58eb      	ldr	r3, [r5, r3]
 8003754:	4798      	blx	r3
 8003756:	3601      	adds	r6, #1
 8003758:	e7ee      	b.n	8003738 <__libc_init_array+0xc>
 800375a:	00b3      	lsls	r3, r6, #2
 800375c:	58eb      	ldr	r3, [r5, r3]
 800375e:	4798      	blx	r3
 8003760:	3601      	adds	r6, #1
 8003762:	e7f2      	b.n	800374a <__libc_init_array+0x1e>
 8003764:	080040b8 	.word	0x080040b8
 8003768:	080040b8 	.word	0x080040b8
 800376c:	080040b8 	.word	0x080040b8
 8003770:	080040bc 	.word	0x080040bc

08003774 <memset>:
 8003774:	0003      	movs	r3, r0
 8003776:	1812      	adds	r2, r2, r0
 8003778:	4293      	cmp	r3, r2
 800377a:	d100      	bne.n	800377e <memset+0xa>
 800377c:	4770      	bx	lr
 800377e:	7019      	strb	r1, [r3, #0]
 8003780:	3301      	adds	r3, #1
 8003782:	e7f9      	b.n	8003778 <memset+0x4>

08003784 <siprintf>:
 8003784:	b40e      	push	{r1, r2, r3}
 8003786:	b500      	push	{lr}
 8003788:	490b      	ldr	r1, [pc, #44]	; (80037b8 <siprintf+0x34>)
 800378a:	b09c      	sub	sp, #112	; 0x70
 800378c:	ab1d      	add	r3, sp, #116	; 0x74
 800378e:	9002      	str	r0, [sp, #8]
 8003790:	9006      	str	r0, [sp, #24]
 8003792:	9107      	str	r1, [sp, #28]
 8003794:	9104      	str	r1, [sp, #16]
 8003796:	4809      	ldr	r0, [pc, #36]	; (80037bc <siprintf+0x38>)
 8003798:	4909      	ldr	r1, [pc, #36]	; (80037c0 <siprintf+0x3c>)
 800379a:	cb04      	ldmia	r3!, {r2}
 800379c:	9105      	str	r1, [sp, #20]
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	a902      	add	r1, sp, #8
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	f000 f870 	bl	8003888 <_svfiprintf_r>
 80037a8:	2300      	movs	r3, #0
 80037aa:	9a02      	ldr	r2, [sp, #8]
 80037ac:	7013      	strb	r3, [r2, #0]
 80037ae:	b01c      	add	sp, #112	; 0x70
 80037b0:	bc08      	pop	{r3}
 80037b2:	b003      	add	sp, #12
 80037b4:	4718      	bx	r3
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	7fffffff 	.word	0x7fffffff
 80037bc:	20000010 	.word	0x20000010
 80037c0:	ffff0208 	.word	0xffff0208

080037c4 <__ssputs_r>:
 80037c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037c6:	688e      	ldr	r6, [r1, #8]
 80037c8:	b085      	sub	sp, #20
 80037ca:	0007      	movs	r7, r0
 80037cc:	000c      	movs	r4, r1
 80037ce:	9203      	str	r2, [sp, #12]
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	429e      	cmp	r6, r3
 80037d4:	d83c      	bhi.n	8003850 <__ssputs_r+0x8c>
 80037d6:	2390      	movs	r3, #144	; 0x90
 80037d8:	898a      	ldrh	r2, [r1, #12]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	421a      	tst	r2, r3
 80037de:	d034      	beq.n	800384a <__ssputs_r+0x86>
 80037e0:	2503      	movs	r5, #3
 80037e2:	6909      	ldr	r1, [r1, #16]
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	1a5b      	subs	r3, r3, r1
 80037e8:	9302      	str	r3, [sp, #8]
 80037ea:	6963      	ldr	r3, [r4, #20]
 80037ec:	9802      	ldr	r0, [sp, #8]
 80037ee:	435d      	muls	r5, r3
 80037f0:	0feb      	lsrs	r3, r5, #31
 80037f2:	195d      	adds	r5, r3, r5
 80037f4:	9b01      	ldr	r3, [sp, #4]
 80037f6:	106d      	asrs	r5, r5, #1
 80037f8:	3301      	adds	r3, #1
 80037fa:	181b      	adds	r3, r3, r0
 80037fc:	42ab      	cmp	r3, r5
 80037fe:	d900      	bls.n	8003802 <__ssputs_r+0x3e>
 8003800:	001d      	movs	r5, r3
 8003802:	0553      	lsls	r3, r2, #21
 8003804:	d532      	bpl.n	800386c <__ssputs_r+0xa8>
 8003806:	0029      	movs	r1, r5
 8003808:	0038      	movs	r0, r7
 800380a:	f000 fb23 	bl	8003e54 <_malloc_r>
 800380e:	1e06      	subs	r6, r0, #0
 8003810:	d109      	bne.n	8003826 <__ssputs_r+0x62>
 8003812:	230c      	movs	r3, #12
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	2340      	movs	r3, #64	; 0x40
 8003818:	2001      	movs	r0, #1
 800381a:	89a2      	ldrh	r2, [r4, #12]
 800381c:	4240      	negs	r0, r0
 800381e:	4313      	orrs	r3, r2
 8003820:	81a3      	strh	r3, [r4, #12]
 8003822:	b005      	add	sp, #20
 8003824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003826:	9a02      	ldr	r2, [sp, #8]
 8003828:	6921      	ldr	r1, [r4, #16]
 800382a:	f000 faac 	bl	8003d86 <memcpy>
 800382e:	89a3      	ldrh	r3, [r4, #12]
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <__ssputs_r+0xc0>)
 8003832:	401a      	ands	r2, r3
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	4313      	orrs	r3, r2
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	9b02      	ldr	r3, [sp, #8]
 800383c:	6126      	str	r6, [r4, #16]
 800383e:	18f6      	adds	r6, r6, r3
 8003840:	6026      	str	r6, [r4, #0]
 8003842:	6165      	str	r5, [r4, #20]
 8003844:	9e01      	ldr	r6, [sp, #4]
 8003846:	1aed      	subs	r5, r5, r3
 8003848:	60a5      	str	r5, [r4, #8]
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	429e      	cmp	r6, r3
 800384e:	d900      	bls.n	8003852 <__ssputs_r+0x8e>
 8003850:	9e01      	ldr	r6, [sp, #4]
 8003852:	0032      	movs	r2, r6
 8003854:	9903      	ldr	r1, [sp, #12]
 8003856:	6820      	ldr	r0, [r4, #0]
 8003858:	f000 fa9e 	bl	8003d98 <memmove>
 800385c:	68a3      	ldr	r3, [r4, #8]
 800385e:	2000      	movs	r0, #0
 8003860:	1b9b      	subs	r3, r3, r6
 8003862:	60a3      	str	r3, [r4, #8]
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	199e      	adds	r6, r3, r6
 8003868:	6026      	str	r6, [r4, #0]
 800386a:	e7da      	b.n	8003822 <__ssputs_r+0x5e>
 800386c:	002a      	movs	r2, r5
 800386e:	0038      	movs	r0, r7
 8003870:	f000 fb4e 	bl	8003f10 <_realloc_r>
 8003874:	1e06      	subs	r6, r0, #0
 8003876:	d1e0      	bne.n	800383a <__ssputs_r+0x76>
 8003878:	6921      	ldr	r1, [r4, #16]
 800387a:	0038      	movs	r0, r7
 800387c:	f000 faa0 	bl	8003dc0 <_free_r>
 8003880:	e7c7      	b.n	8003812 <__ssputs_r+0x4e>
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	fffffb7f 	.word	0xfffffb7f

08003888 <_svfiprintf_r>:
 8003888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388a:	b0a1      	sub	sp, #132	; 0x84
 800388c:	9003      	str	r0, [sp, #12]
 800388e:	001d      	movs	r5, r3
 8003890:	898b      	ldrh	r3, [r1, #12]
 8003892:	000f      	movs	r7, r1
 8003894:	0016      	movs	r6, r2
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	d511      	bpl.n	80038be <_svfiprintf_r+0x36>
 800389a:	690b      	ldr	r3, [r1, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10e      	bne.n	80038be <_svfiprintf_r+0x36>
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	f000 fad7 	bl	8003e54 <_malloc_r>
 80038a6:	6038      	str	r0, [r7, #0]
 80038a8:	6138      	str	r0, [r7, #16]
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d105      	bne.n	80038ba <_svfiprintf_r+0x32>
 80038ae:	230c      	movs	r3, #12
 80038b0:	9a03      	ldr	r2, [sp, #12]
 80038b2:	3801      	subs	r0, #1
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	b021      	add	sp, #132	; 0x84
 80038b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	2300      	movs	r3, #0
 80038c0:	ac08      	add	r4, sp, #32
 80038c2:	6163      	str	r3, [r4, #20]
 80038c4:	3320      	adds	r3, #32
 80038c6:	7663      	strb	r3, [r4, #25]
 80038c8:	3310      	adds	r3, #16
 80038ca:	76a3      	strb	r3, [r4, #26]
 80038cc:	9507      	str	r5, [sp, #28]
 80038ce:	0035      	movs	r5, r6
 80038d0:	782b      	ldrb	r3, [r5, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <_svfiprintf_r+0x52>
 80038d6:	2b25      	cmp	r3, #37	; 0x25
 80038d8:	d146      	bne.n	8003968 <_svfiprintf_r+0xe0>
 80038da:	1bab      	subs	r3, r5, r6
 80038dc:	9305      	str	r3, [sp, #20]
 80038de:	d00c      	beq.n	80038fa <_svfiprintf_r+0x72>
 80038e0:	0032      	movs	r2, r6
 80038e2:	0039      	movs	r1, r7
 80038e4:	9803      	ldr	r0, [sp, #12]
 80038e6:	f7ff ff6d 	bl	80037c4 <__ssputs_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d100      	bne.n	80038f0 <_svfiprintf_r+0x68>
 80038ee:	e0ae      	b.n	8003a4e <_svfiprintf_r+0x1c6>
 80038f0:	6962      	ldr	r2, [r4, #20]
 80038f2:	9b05      	ldr	r3, [sp, #20]
 80038f4:	4694      	mov	ip, r2
 80038f6:	4463      	add	r3, ip
 80038f8:	6163      	str	r3, [r4, #20]
 80038fa:	782b      	ldrb	r3, [r5, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d100      	bne.n	8003902 <_svfiprintf_r+0x7a>
 8003900:	e0a5      	b.n	8003a4e <_svfiprintf_r+0x1c6>
 8003902:	2201      	movs	r2, #1
 8003904:	2300      	movs	r3, #0
 8003906:	4252      	negs	r2, r2
 8003908:	6062      	str	r2, [r4, #4]
 800390a:	a904      	add	r1, sp, #16
 800390c:	3254      	adds	r2, #84	; 0x54
 800390e:	1852      	adds	r2, r2, r1
 8003910:	1c6e      	adds	r6, r5, #1
 8003912:	6023      	str	r3, [r4, #0]
 8003914:	60e3      	str	r3, [r4, #12]
 8003916:	60a3      	str	r3, [r4, #8]
 8003918:	7013      	strb	r3, [r2, #0]
 800391a:	65a3      	str	r3, [r4, #88]	; 0x58
 800391c:	7831      	ldrb	r1, [r6, #0]
 800391e:	2205      	movs	r2, #5
 8003920:	4853      	ldr	r0, [pc, #332]	; (8003a70 <_svfiprintf_r+0x1e8>)
 8003922:	f000 fa25 	bl	8003d70 <memchr>
 8003926:	1c75      	adds	r5, r6, #1
 8003928:	2800      	cmp	r0, #0
 800392a:	d11f      	bne.n	800396c <_svfiprintf_r+0xe4>
 800392c:	6822      	ldr	r2, [r4, #0]
 800392e:	06d3      	lsls	r3, r2, #27
 8003930:	d504      	bpl.n	800393c <_svfiprintf_r+0xb4>
 8003932:	2353      	movs	r3, #83	; 0x53
 8003934:	a904      	add	r1, sp, #16
 8003936:	185b      	adds	r3, r3, r1
 8003938:	2120      	movs	r1, #32
 800393a:	7019      	strb	r1, [r3, #0]
 800393c:	0713      	lsls	r3, r2, #28
 800393e:	d504      	bpl.n	800394a <_svfiprintf_r+0xc2>
 8003940:	2353      	movs	r3, #83	; 0x53
 8003942:	a904      	add	r1, sp, #16
 8003944:	185b      	adds	r3, r3, r1
 8003946:	212b      	movs	r1, #43	; 0x2b
 8003948:	7019      	strb	r1, [r3, #0]
 800394a:	7833      	ldrb	r3, [r6, #0]
 800394c:	2b2a      	cmp	r3, #42	; 0x2a
 800394e:	d016      	beq.n	800397e <_svfiprintf_r+0xf6>
 8003950:	0035      	movs	r5, r6
 8003952:	2100      	movs	r1, #0
 8003954:	200a      	movs	r0, #10
 8003956:	68e3      	ldr	r3, [r4, #12]
 8003958:	782a      	ldrb	r2, [r5, #0]
 800395a:	1c6e      	adds	r6, r5, #1
 800395c:	3a30      	subs	r2, #48	; 0x30
 800395e:	2a09      	cmp	r2, #9
 8003960:	d94e      	bls.n	8003a00 <_svfiprintf_r+0x178>
 8003962:	2900      	cmp	r1, #0
 8003964:	d018      	beq.n	8003998 <_svfiprintf_r+0x110>
 8003966:	e010      	b.n	800398a <_svfiprintf_r+0x102>
 8003968:	3501      	adds	r5, #1
 800396a:	e7b1      	b.n	80038d0 <_svfiprintf_r+0x48>
 800396c:	4b40      	ldr	r3, [pc, #256]	; (8003a70 <_svfiprintf_r+0x1e8>)
 800396e:	6822      	ldr	r2, [r4, #0]
 8003970:	1ac0      	subs	r0, r0, r3
 8003972:	2301      	movs	r3, #1
 8003974:	4083      	lsls	r3, r0
 8003976:	4313      	orrs	r3, r2
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	002e      	movs	r6, r5
 800397c:	e7ce      	b.n	800391c <_svfiprintf_r+0x94>
 800397e:	9b07      	ldr	r3, [sp, #28]
 8003980:	1d19      	adds	r1, r3, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	9107      	str	r1, [sp, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	db01      	blt.n	800398e <_svfiprintf_r+0x106>
 800398a:	930b      	str	r3, [sp, #44]	; 0x2c
 800398c:	e004      	b.n	8003998 <_svfiprintf_r+0x110>
 800398e:	425b      	negs	r3, r3
 8003990:	60e3      	str	r3, [r4, #12]
 8003992:	2302      	movs	r3, #2
 8003994:	4313      	orrs	r3, r2
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	782b      	ldrb	r3, [r5, #0]
 800399a:	2b2e      	cmp	r3, #46	; 0x2e
 800399c:	d10a      	bne.n	80039b4 <_svfiprintf_r+0x12c>
 800399e:	786b      	ldrb	r3, [r5, #1]
 80039a0:	2b2a      	cmp	r3, #42	; 0x2a
 80039a2:	d135      	bne.n	8003a10 <_svfiprintf_r+0x188>
 80039a4:	9b07      	ldr	r3, [sp, #28]
 80039a6:	3502      	adds	r5, #2
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	9207      	str	r2, [sp, #28]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db2b      	blt.n	8003a0a <_svfiprintf_r+0x182>
 80039b2:	9309      	str	r3, [sp, #36]	; 0x24
 80039b4:	4e2f      	ldr	r6, [pc, #188]	; (8003a74 <_svfiprintf_r+0x1ec>)
 80039b6:	7829      	ldrb	r1, [r5, #0]
 80039b8:	2203      	movs	r2, #3
 80039ba:	0030      	movs	r0, r6
 80039bc:	f000 f9d8 	bl	8003d70 <memchr>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d006      	beq.n	80039d2 <_svfiprintf_r+0x14a>
 80039c4:	2340      	movs	r3, #64	; 0x40
 80039c6:	1b80      	subs	r0, r0, r6
 80039c8:	4083      	lsls	r3, r0
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	3501      	adds	r5, #1
 80039ce:	4313      	orrs	r3, r2
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	7829      	ldrb	r1, [r5, #0]
 80039d4:	2206      	movs	r2, #6
 80039d6:	4828      	ldr	r0, [pc, #160]	; (8003a78 <_svfiprintf_r+0x1f0>)
 80039d8:	1c6e      	adds	r6, r5, #1
 80039da:	7621      	strb	r1, [r4, #24]
 80039dc:	f000 f9c8 	bl	8003d70 <memchr>
 80039e0:	2800      	cmp	r0, #0
 80039e2:	d03c      	beq.n	8003a5e <_svfiprintf_r+0x1d6>
 80039e4:	4b25      	ldr	r3, [pc, #148]	; (8003a7c <_svfiprintf_r+0x1f4>)
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d125      	bne.n	8003a36 <_svfiprintf_r+0x1ae>
 80039ea:	2207      	movs	r2, #7
 80039ec:	9b07      	ldr	r3, [sp, #28]
 80039ee:	3307      	adds	r3, #7
 80039f0:	4393      	bics	r3, r2
 80039f2:	3308      	adds	r3, #8
 80039f4:	9307      	str	r3, [sp, #28]
 80039f6:	6963      	ldr	r3, [r4, #20]
 80039f8:	9a04      	ldr	r2, [sp, #16]
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	6163      	str	r3, [r4, #20]
 80039fe:	e766      	b.n	80038ce <_svfiprintf_r+0x46>
 8003a00:	4343      	muls	r3, r0
 8003a02:	2101      	movs	r1, #1
 8003a04:	189b      	adds	r3, r3, r2
 8003a06:	0035      	movs	r5, r6
 8003a08:	e7a6      	b.n	8003958 <_svfiprintf_r+0xd0>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	e7d0      	b.n	80039b2 <_svfiprintf_r+0x12a>
 8003a10:	2300      	movs	r3, #0
 8003a12:	200a      	movs	r0, #10
 8003a14:	001a      	movs	r2, r3
 8003a16:	3501      	adds	r5, #1
 8003a18:	6063      	str	r3, [r4, #4]
 8003a1a:	7829      	ldrb	r1, [r5, #0]
 8003a1c:	1c6e      	adds	r6, r5, #1
 8003a1e:	3930      	subs	r1, #48	; 0x30
 8003a20:	2909      	cmp	r1, #9
 8003a22:	d903      	bls.n	8003a2c <_svfiprintf_r+0x1a4>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0c5      	beq.n	80039b4 <_svfiprintf_r+0x12c>
 8003a28:	9209      	str	r2, [sp, #36]	; 0x24
 8003a2a:	e7c3      	b.n	80039b4 <_svfiprintf_r+0x12c>
 8003a2c:	4342      	muls	r2, r0
 8003a2e:	2301      	movs	r3, #1
 8003a30:	1852      	adds	r2, r2, r1
 8003a32:	0035      	movs	r5, r6
 8003a34:	e7f1      	b.n	8003a1a <_svfiprintf_r+0x192>
 8003a36:	ab07      	add	r3, sp, #28
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	003a      	movs	r2, r7
 8003a3c:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <_svfiprintf_r+0x1f8>)
 8003a3e:	0021      	movs	r1, r4
 8003a40:	9803      	ldr	r0, [sp, #12]
 8003a42:	e000      	b.n	8003a46 <_svfiprintf_r+0x1be>
 8003a44:	bf00      	nop
 8003a46:	9004      	str	r0, [sp, #16]
 8003a48:	9b04      	ldr	r3, [sp, #16]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	d1d3      	bne.n	80039f6 <_svfiprintf_r+0x16e>
 8003a4e:	89bb      	ldrh	r3, [r7, #12]
 8003a50:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a52:	065b      	lsls	r3, r3, #25
 8003a54:	d400      	bmi.n	8003a58 <_svfiprintf_r+0x1d0>
 8003a56:	e72e      	b.n	80038b6 <_svfiprintf_r+0x2e>
 8003a58:	2001      	movs	r0, #1
 8003a5a:	4240      	negs	r0, r0
 8003a5c:	e72b      	b.n	80038b6 <_svfiprintf_r+0x2e>
 8003a5e:	ab07      	add	r3, sp, #28
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	003a      	movs	r2, r7
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <_svfiprintf_r+0x1f8>)
 8003a66:	0021      	movs	r1, r4
 8003a68:	9803      	ldr	r0, [sp, #12]
 8003a6a:	f000 f879 	bl	8003b60 <_printf_i>
 8003a6e:	e7ea      	b.n	8003a46 <_svfiprintf_r+0x1be>
 8003a70:	08004084 	.word	0x08004084
 8003a74:	0800408a 	.word	0x0800408a
 8003a78:	0800408e 	.word	0x0800408e
 8003a7c:	00000000 	.word	0x00000000
 8003a80:	080037c5 	.word	0x080037c5

08003a84 <_printf_common>:
 8003a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a86:	0015      	movs	r5, r2
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	688a      	ldr	r2, [r1, #8]
 8003a8c:	690b      	ldr	r3, [r1, #16]
 8003a8e:	9000      	str	r0, [sp, #0]
 8003a90:	000c      	movs	r4, r1
 8003a92:	4293      	cmp	r3, r2
 8003a94:	da00      	bge.n	8003a98 <_printf_common+0x14>
 8003a96:	0013      	movs	r3, r2
 8003a98:	0022      	movs	r2, r4
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	3243      	adds	r2, #67	; 0x43
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	2a00      	cmp	r2, #0
 8003aa2:	d001      	beq.n	8003aa8 <_printf_common+0x24>
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	602b      	str	r3, [r5, #0]
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	069b      	lsls	r3, r3, #26
 8003aac:	d502      	bpl.n	8003ab4 <_printf_common+0x30>
 8003aae:	682b      	ldr	r3, [r5, #0]
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	602b      	str	r3, [r5, #0]
 8003ab4:	2706      	movs	r7, #6
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	401f      	ands	r7, r3
 8003aba:	d027      	beq.n	8003b0c <_printf_common+0x88>
 8003abc:	0023      	movs	r3, r4
 8003abe:	3343      	adds	r3, #67	; 0x43
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	1e5a      	subs	r2, r3, #1
 8003ac4:	4193      	sbcs	r3, r2
 8003ac6:	6822      	ldr	r2, [r4, #0]
 8003ac8:	0692      	lsls	r2, r2, #26
 8003aca:	d430      	bmi.n	8003b2e <_printf_common+0xaa>
 8003acc:	0022      	movs	r2, r4
 8003ace:	9901      	ldr	r1, [sp, #4]
 8003ad0:	3243      	adds	r2, #67	; 0x43
 8003ad2:	9800      	ldr	r0, [sp, #0]
 8003ad4:	9e08      	ldr	r6, [sp, #32]
 8003ad6:	47b0      	blx	r6
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d025      	beq.n	8003b28 <_printf_common+0xa4>
 8003adc:	2306      	movs	r3, #6
 8003ade:	6820      	ldr	r0, [r4, #0]
 8003ae0:	682a      	ldr	r2, [r5, #0]
 8003ae2:	68e1      	ldr	r1, [r4, #12]
 8003ae4:	4003      	ands	r3, r0
 8003ae6:	2500      	movs	r5, #0
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d103      	bne.n	8003af4 <_printf_common+0x70>
 8003aec:	1a8d      	subs	r5, r1, r2
 8003aee:	43eb      	mvns	r3, r5
 8003af0:	17db      	asrs	r3, r3, #31
 8003af2:	401d      	ands	r5, r3
 8003af4:	68a3      	ldr	r3, [r4, #8]
 8003af6:	6922      	ldr	r2, [r4, #16]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	dd01      	ble.n	8003b00 <_printf_common+0x7c>
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	18ed      	adds	r5, r5, r3
 8003b00:	2700      	movs	r7, #0
 8003b02:	42bd      	cmp	r5, r7
 8003b04:	d120      	bne.n	8003b48 <_printf_common+0xc4>
 8003b06:	2000      	movs	r0, #0
 8003b08:	e010      	b.n	8003b2c <_printf_common+0xa8>
 8003b0a:	3701      	adds	r7, #1
 8003b0c:	68e3      	ldr	r3, [r4, #12]
 8003b0e:	682a      	ldr	r2, [r5, #0]
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	42bb      	cmp	r3, r7
 8003b14:	ddd2      	ble.n	8003abc <_printf_common+0x38>
 8003b16:	0022      	movs	r2, r4
 8003b18:	2301      	movs	r3, #1
 8003b1a:	3219      	adds	r2, #25
 8003b1c:	9901      	ldr	r1, [sp, #4]
 8003b1e:	9800      	ldr	r0, [sp, #0]
 8003b20:	9e08      	ldr	r6, [sp, #32]
 8003b22:	47b0      	blx	r6
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d1f0      	bne.n	8003b0a <_printf_common+0x86>
 8003b28:	2001      	movs	r0, #1
 8003b2a:	4240      	negs	r0, r0
 8003b2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b2e:	2030      	movs	r0, #48	; 0x30
 8003b30:	18e1      	adds	r1, r4, r3
 8003b32:	3143      	adds	r1, #67	; 0x43
 8003b34:	7008      	strb	r0, [r1, #0]
 8003b36:	0021      	movs	r1, r4
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	3145      	adds	r1, #69	; 0x45
 8003b3c:	7809      	ldrb	r1, [r1, #0]
 8003b3e:	18a2      	adds	r2, r4, r2
 8003b40:	3243      	adds	r2, #67	; 0x43
 8003b42:	3302      	adds	r3, #2
 8003b44:	7011      	strb	r1, [r2, #0]
 8003b46:	e7c1      	b.n	8003acc <_printf_common+0x48>
 8003b48:	0022      	movs	r2, r4
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	321a      	adds	r2, #26
 8003b4e:	9901      	ldr	r1, [sp, #4]
 8003b50:	9800      	ldr	r0, [sp, #0]
 8003b52:	9e08      	ldr	r6, [sp, #32]
 8003b54:	47b0      	blx	r6
 8003b56:	1c43      	adds	r3, r0, #1
 8003b58:	d0e6      	beq.n	8003b28 <_printf_common+0xa4>
 8003b5a:	3701      	adds	r7, #1
 8003b5c:	e7d1      	b.n	8003b02 <_printf_common+0x7e>
	...

08003b60 <_printf_i>:
 8003b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b62:	b089      	sub	sp, #36	; 0x24
 8003b64:	9204      	str	r2, [sp, #16]
 8003b66:	000a      	movs	r2, r1
 8003b68:	3243      	adds	r2, #67	; 0x43
 8003b6a:	9305      	str	r3, [sp, #20]
 8003b6c:	9003      	str	r0, [sp, #12]
 8003b6e:	9202      	str	r2, [sp, #8]
 8003b70:	7e0a      	ldrb	r2, [r1, #24]
 8003b72:	000c      	movs	r4, r1
 8003b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b76:	2a6e      	cmp	r2, #110	; 0x6e
 8003b78:	d100      	bne.n	8003b7c <_printf_i+0x1c>
 8003b7a:	e086      	b.n	8003c8a <_printf_i+0x12a>
 8003b7c:	d81f      	bhi.n	8003bbe <_printf_i+0x5e>
 8003b7e:	2a63      	cmp	r2, #99	; 0x63
 8003b80:	d033      	beq.n	8003bea <_printf_i+0x8a>
 8003b82:	d808      	bhi.n	8003b96 <_printf_i+0x36>
 8003b84:	2a00      	cmp	r2, #0
 8003b86:	d100      	bne.n	8003b8a <_printf_i+0x2a>
 8003b88:	e08c      	b.n	8003ca4 <_printf_i+0x144>
 8003b8a:	2a58      	cmp	r2, #88	; 0x58
 8003b8c:	d04d      	beq.n	8003c2a <_printf_i+0xca>
 8003b8e:	0025      	movs	r5, r4
 8003b90:	3542      	adds	r5, #66	; 0x42
 8003b92:	702a      	strb	r2, [r5, #0]
 8003b94:	e030      	b.n	8003bf8 <_printf_i+0x98>
 8003b96:	2a64      	cmp	r2, #100	; 0x64
 8003b98:	d001      	beq.n	8003b9e <_printf_i+0x3e>
 8003b9a:	2a69      	cmp	r2, #105	; 0x69
 8003b9c:	d1f7      	bne.n	8003b8e <_printf_i+0x2e>
 8003b9e:	6819      	ldr	r1, [r3, #0]
 8003ba0:	6825      	ldr	r5, [r4, #0]
 8003ba2:	1d0a      	adds	r2, r1, #4
 8003ba4:	0628      	lsls	r0, r5, #24
 8003ba6:	d529      	bpl.n	8003bfc <_printf_i+0x9c>
 8003ba8:	6808      	ldr	r0, [r1, #0]
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	2800      	cmp	r0, #0
 8003bae:	da03      	bge.n	8003bb8 <_printf_i+0x58>
 8003bb0:	232d      	movs	r3, #45	; 0x2d
 8003bb2:	9a02      	ldr	r2, [sp, #8]
 8003bb4:	4240      	negs	r0, r0
 8003bb6:	7013      	strb	r3, [r2, #0]
 8003bb8:	4e6b      	ldr	r6, [pc, #428]	; (8003d68 <_printf_i+0x208>)
 8003bba:	270a      	movs	r7, #10
 8003bbc:	e04f      	b.n	8003c5e <_printf_i+0xfe>
 8003bbe:	2a73      	cmp	r2, #115	; 0x73
 8003bc0:	d074      	beq.n	8003cac <_printf_i+0x14c>
 8003bc2:	d808      	bhi.n	8003bd6 <_printf_i+0x76>
 8003bc4:	2a6f      	cmp	r2, #111	; 0x6f
 8003bc6:	d01f      	beq.n	8003c08 <_printf_i+0xa8>
 8003bc8:	2a70      	cmp	r2, #112	; 0x70
 8003bca:	d1e0      	bne.n	8003b8e <_printf_i+0x2e>
 8003bcc:	2220      	movs	r2, #32
 8003bce:	6809      	ldr	r1, [r1, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	6022      	str	r2, [r4, #0]
 8003bd4:	e003      	b.n	8003bde <_printf_i+0x7e>
 8003bd6:	2a75      	cmp	r2, #117	; 0x75
 8003bd8:	d016      	beq.n	8003c08 <_printf_i+0xa8>
 8003bda:	2a78      	cmp	r2, #120	; 0x78
 8003bdc:	d1d7      	bne.n	8003b8e <_printf_i+0x2e>
 8003bde:	0022      	movs	r2, r4
 8003be0:	2178      	movs	r1, #120	; 0x78
 8003be2:	3245      	adds	r2, #69	; 0x45
 8003be4:	7011      	strb	r1, [r2, #0]
 8003be6:	4e61      	ldr	r6, [pc, #388]	; (8003d6c <_printf_i+0x20c>)
 8003be8:	e022      	b.n	8003c30 <_printf_i+0xd0>
 8003bea:	0025      	movs	r5, r4
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	3542      	adds	r5, #66	; 0x42
 8003bf0:	1d11      	adds	r1, r2, #4
 8003bf2:	6019      	str	r1, [r3, #0]
 8003bf4:	6813      	ldr	r3, [r2, #0]
 8003bf6:	702b      	strb	r3, [r5, #0]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e065      	b.n	8003cc8 <_printf_i+0x168>
 8003bfc:	6808      	ldr	r0, [r1, #0]
 8003bfe:	601a      	str	r2, [r3, #0]
 8003c00:	0669      	lsls	r1, r5, #25
 8003c02:	d5d3      	bpl.n	8003bac <_printf_i+0x4c>
 8003c04:	b200      	sxth	r0, r0
 8003c06:	e7d1      	b.n	8003bac <_printf_i+0x4c>
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	6825      	ldr	r5, [r4, #0]
 8003c0c:	1d08      	adds	r0, r1, #4
 8003c0e:	6018      	str	r0, [r3, #0]
 8003c10:	6808      	ldr	r0, [r1, #0]
 8003c12:	062e      	lsls	r6, r5, #24
 8003c14:	d505      	bpl.n	8003c22 <_printf_i+0xc2>
 8003c16:	4e54      	ldr	r6, [pc, #336]	; (8003d68 <_printf_i+0x208>)
 8003c18:	2708      	movs	r7, #8
 8003c1a:	2a6f      	cmp	r2, #111	; 0x6f
 8003c1c:	d01b      	beq.n	8003c56 <_printf_i+0xf6>
 8003c1e:	270a      	movs	r7, #10
 8003c20:	e019      	b.n	8003c56 <_printf_i+0xf6>
 8003c22:	066d      	lsls	r5, r5, #25
 8003c24:	d5f7      	bpl.n	8003c16 <_printf_i+0xb6>
 8003c26:	b280      	uxth	r0, r0
 8003c28:	e7f5      	b.n	8003c16 <_printf_i+0xb6>
 8003c2a:	3145      	adds	r1, #69	; 0x45
 8003c2c:	4e4e      	ldr	r6, [pc, #312]	; (8003d68 <_printf_i+0x208>)
 8003c2e:	700a      	strb	r2, [r1, #0]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	6822      	ldr	r2, [r4, #0]
 8003c34:	1d01      	adds	r1, r0, #4
 8003c36:	6800      	ldr	r0, [r0, #0]
 8003c38:	6019      	str	r1, [r3, #0]
 8003c3a:	0615      	lsls	r5, r2, #24
 8003c3c:	d521      	bpl.n	8003c82 <_printf_i+0x122>
 8003c3e:	07d3      	lsls	r3, r2, #31
 8003c40:	d502      	bpl.n	8003c48 <_printf_i+0xe8>
 8003c42:	2320      	movs	r3, #32
 8003c44:	431a      	orrs	r2, r3
 8003c46:	6022      	str	r2, [r4, #0]
 8003c48:	2710      	movs	r7, #16
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d103      	bne.n	8003c56 <_printf_i+0xf6>
 8003c4e:	2320      	movs	r3, #32
 8003c50:	6822      	ldr	r2, [r4, #0]
 8003c52:	439a      	bics	r2, r3
 8003c54:	6022      	str	r2, [r4, #0]
 8003c56:	0023      	movs	r3, r4
 8003c58:	2200      	movs	r2, #0
 8003c5a:	3343      	adds	r3, #67	; 0x43
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	6863      	ldr	r3, [r4, #4]
 8003c60:	60a3      	str	r3, [r4, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	db58      	blt.n	8003d18 <_printf_i+0x1b8>
 8003c66:	2204      	movs	r2, #4
 8003c68:	6821      	ldr	r1, [r4, #0]
 8003c6a:	4391      	bics	r1, r2
 8003c6c:	6021      	str	r1, [r4, #0]
 8003c6e:	2800      	cmp	r0, #0
 8003c70:	d154      	bne.n	8003d1c <_printf_i+0x1bc>
 8003c72:	9d02      	ldr	r5, [sp, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d05a      	beq.n	8003d2e <_printf_i+0x1ce>
 8003c78:	0025      	movs	r5, r4
 8003c7a:	7833      	ldrb	r3, [r6, #0]
 8003c7c:	3542      	adds	r5, #66	; 0x42
 8003c7e:	702b      	strb	r3, [r5, #0]
 8003c80:	e055      	b.n	8003d2e <_printf_i+0x1ce>
 8003c82:	0655      	lsls	r5, r2, #25
 8003c84:	d5db      	bpl.n	8003c3e <_printf_i+0xde>
 8003c86:	b280      	uxth	r0, r0
 8003c88:	e7d9      	b.n	8003c3e <_printf_i+0xde>
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	680d      	ldr	r5, [r1, #0]
 8003c8e:	1d10      	adds	r0, r2, #4
 8003c90:	6949      	ldr	r1, [r1, #20]
 8003c92:	6018      	str	r0, [r3, #0]
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	062e      	lsls	r6, r5, #24
 8003c98:	d501      	bpl.n	8003c9e <_printf_i+0x13e>
 8003c9a:	6019      	str	r1, [r3, #0]
 8003c9c:	e002      	b.n	8003ca4 <_printf_i+0x144>
 8003c9e:	066d      	lsls	r5, r5, #25
 8003ca0:	d5fb      	bpl.n	8003c9a <_printf_i+0x13a>
 8003ca2:	8019      	strh	r1, [r3, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9d02      	ldr	r5, [sp, #8]
 8003ca8:	6123      	str	r3, [r4, #16]
 8003caa:	e04f      	b.n	8003d4c <_printf_i+0x1ec>
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	1d11      	adds	r1, r2, #4
 8003cb0:	6019      	str	r1, [r3, #0]
 8003cb2:	6815      	ldr	r5, [r2, #0]
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	6862      	ldr	r2, [r4, #4]
 8003cb8:	0028      	movs	r0, r5
 8003cba:	f000 f859 	bl	8003d70 <memchr>
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	d001      	beq.n	8003cc6 <_printf_i+0x166>
 8003cc2:	1b40      	subs	r0, r0, r5
 8003cc4:	6060      	str	r0, [r4, #4]
 8003cc6:	6863      	ldr	r3, [r4, #4]
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	9a02      	ldr	r2, [sp, #8]
 8003cce:	7013      	strb	r3, [r2, #0]
 8003cd0:	e03c      	b.n	8003d4c <_printf_i+0x1ec>
 8003cd2:	6923      	ldr	r3, [r4, #16]
 8003cd4:	002a      	movs	r2, r5
 8003cd6:	9904      	ldr	r1, [sp, #16]
 8003cd8:	9803      	ldr	r0, [sp, #12]
 8003cda:	9d05      	ldr	r5, [sp, #20]
 8003cdc:	47a8      	blx	r5
 8003cde:	1c43      	adds	r3, r0, #1
 8003ce0:	d03e      	beq.n	8003d60 <_printf_i+0x200>
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	079b      	lsls	r3, r3, #30
 8003ce6:	d415      	bmi.n	8003d14 <_printf_i+0x1b4>
 8003ce8:	9b07      	ldr	r3, [sp, #28]
 8003cea:	68e0      	ldr	r0, [r4, #12]
 8003cec:	4298      	cmp	r0, r3
 8003cee:	da39      	bge.n	8003d64 <_printf_i+0x204>
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	e037      	b.n	8003d64 <_printf_i+0x204>
 8003cf4:	0022      	movs	r2, r4
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	3219      	adds	r2, #25
 8003cfa:	9904      	ldr	r1, [sp, #16]
 8003cfc:	9803      	ldr	r0, [sp, #12]
 8003cfe:	9e05      	ldr	r6, [sp, #20]
 8003d00:	47b0      	blx	r6
 8003d02:	1c43      	adds	r3, r0, #1
 8003d04:	d02c      	beq.n	8003d60 <_printf_i+0x200>
 8003d06:	3501      	adds	r5, #1
 8003d08:	68e3      	ldr	r3, [r4, #12]
 8003d0a:	9a07      	ldr	r2, [sp, #28]
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	42ab      	cmp	r3, r5
 8003d10:	dcf0      	bgt.n	8003cf4 <_printf_i+0x194>
 8003d12:	e7e9      	b.n	8003ce8 <_printf_i+0x188>
 8003d14:	2500      	movs	r5, #0
 8003d16:	e7f7      	b.n	8003d08 <_printf_i+0x1a8>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	d0ad      	beq.n	8003c78 <_printf_i+0x118>
 8003d1c:	9d02      	ldr	r5, [sp, #8]
 8003d1e:	0039      	movs	r1, r7
 8003d20:	f7fc fa76 	bl	8000210 <__aeabi_uidivmod>
 8003d24:	5c73      	ldrb	r3, [r6, r1]
 8003d26:	3d01      	subs	r5, #1
 8003d28:	702b      	strb	r3, [r5, #0]
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	d1f7      	bne.n	8003d1e <_printf_i+0x1be>
 8003d2e:	2f08      	cmp	r7, #8
 8003d30:	d109      	bne.n	8003d46 <_printf_i+0x1e6>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	07db      	lsls	r3, r3, #31
 8003d36:	d506      	bpl.n	8003d46 <_printf_i+0x1e6>
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	6922      	ldr	r2, [r4, #16]
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	dc02      	bgt.n	8003d46 <_printf_i+0x1e6>
 8003d40:	2330      	movs	r3, #48	; 0x30
 8003d42:	3d01      	subs	r5, #1
 8003d44:	702b      	strb	r3, [r5, #0]
 8003d46:	9b02      	ldr	r3, [sp, #8]
 8003d48:	1b5b      	subs	r3, r3, r5
 8003d4a:	6123      	str	r3, [r4, #16]
 8003d4c:	9b05      	ldr	r3, [sp, #20]
 8003d4e:	aa07      	add	r2, sp, #28
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	0021      	movs	r1, r4
 8003d54:	9b04      	ldr	r3, [sp, #16]
 8003d56:	9803      	ldr	r0, [sp, #12]
 8003d58:	f7ff fe94 	bl	8003a84 <_printf_common>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d1b8      	bne.n	8003cd2 <_printf_i+0x172>
 8003d60:	2001      	movs	r0, #1
 8003d62:	4240      	negs	r0, r0
 8003d64:	b009      	add	sp, #36	; 0x24
 8003d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d68:	08004095 	.word	0x08004095
 8003d6c:	080040a6 	.word	0x080040a6

08003d70 <memchr>:
 8003d70:	b2c9      	uxtb	r1, r1
 8003d72:	1882      	adds	r2, r0, r2
 8003d74:	4290      	cmp	r0, r2
 8003d76:	d101      	bne.n	8003d7c <memchr+0xc>
 8003d78:	2000      	movs	r0, #0
 8003d7a:	4770      	bx	lr
 8003d7c:	7803      	ldrb	r3, [r0, #0]
 8003d7e:	428b      	cmp	r3, r1
 8003d80:	d0fb      	beq.n	8003d7a <memchr+0xa>
 8003d82:	3001      	adds	r0, #1
 8003d84:	e7f6      	b.n	8003d74 <memchr+0x4>

08003d86 <memcpy>:
 8003d86:	2300      	movs	r3, #0
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d100      	bne.n	8003d90 <memcpy+0xa>
 8003d8e:	bd10      	pop	{r4, pc}
 8003d90:	5ccc      	ldrb	r4, [r1, r3]
 8003d92:	54c4      	strb	r4, [r0, r3]
 8003d94:	3301      	adds	r3, #1
 8003d96:	e7f8      	b.n	8003d8a <memcpy+0x4>

08003d98 <memmove>:
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4288      	cmp	r0, r1
 8003d9c:	d902      	bls.n	8003da4 <memmove+0xc>
 8003d9e:	188b      	adds	r3, r1, r2
 8003da0:	4298      	cmp	r0, r3
 8003da2:	d303      	bcc.n	8003dac <memmove+0x14>
 8003da4:	2300      	movs	r3, #0
 8003da6:	e007      	b.n	8003db8 <memmove+0x20>
 8003da8:	5c8b      	ldrb	r3, [r1, r2]
 8003daa:	5483      	strb	r3, [r0, r2]
 8003dac:	3a01      	subs	r2, #1
 8003dae:	d2fb      	bcs.n	8003da8 <memmove+0x10>
 8003db0:	bd10      	pop	{r4, pc}
 8003db2:	5ccc      	ldrb	r4, [r1, r3]
 8003db4:	54c4      	strb	r4, [r0, r3]
 8003db6:	3301      	adds	r3, #1
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1fa      	bne.n	8003db2 <memmove+0x1a>
 8003dbc:	e7f8      	b.n	8003db0 <memmove+0x18>
	...

08003dc0 <_free_r>:
 8003dc0:	b570      	push	{r4, r5, r6, lr}
 8003dc2:	0005      	movs	r5, r0
 8003dc4:	2900      	cmp	r1, #0
 8003dc6:	d010      	beq.n	8003dea <_free_r+0x2a>
 8003dc8:	1f0c      	subs	r4, r1, #4
 8003dca:	6823      	ldr	r3, [r4, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	da00      	bge.n	8003dd2 <_free_r+0x12>
 8003dd0:	18e4      	adds	r4, r4, r3
 8003dd2:	0028      	movs	r0, r5
 8003dd4:	f000 f8d4 	bl	8003f80 <__malloc_lock>
 8003dd8:	4a1d      	ldr	r2, [pc, #116]	; (8003e50 <_free_r+0x90>)
 8003dda:	6813      	ldr	r3, [r2, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d105      	bne.n	8003dec <_free_r+0x2c>
 8003de0:	6063      	str	r3, [r4, #4]
 8003de2:	6014      	str	r4, [r2, #0]
 8003de4:	0028      	movs	r0, r5
 8003de6:	f000 f8cc 	bl	8003f82 <__malloc_unlock>
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	42a3      	cmp	r3, r4
 8003dee:	d909      	bls.n	8003e04 <_free_r+0x44>
 8003df0:	6821      	ldr	r1, [r4, #0]
 8003df2:	1860      	adds	r0, r4, r1
 8003df4:	4283      	cmp	r3, r0
 8003df6:	d1f3      	bne.n	8003de0 <_free_r+0x20>
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	1841      	adds	r1, r0, r1
 8003dfe:	6021      	str	r1, [r4, #0]
 8003e00:	e7ee      	b.n	8003de0 <_free_r+0x20>
 8003e02:	0013      	movs	r3, r2
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	2a00      	cmp	r2, #0
 8003e08:	d001      	beq.n	8003e0e <_free_r+0x4e>
 8003e0a:	42a2      	cmp	r2, r4
 8003e0c:	d9f9      	bls.n	8003e02 <_free_r+0x42>
 8003e0e:	6819      	ldr	r1, [r3, #0]
 8003e10:	1858      	adds	r0, r3, r1
 8003e12:	42a0      	cmp	r0, r4
 8003e14:	d10b      	bne.n	8003e2e <_free_r+0x6e>
 8003e16:	6820      	ldr	r0, [r4, #0]
 8003e18:	1809      	adds	r1, r1, r0
 8003e1a:	1858      	adds	r0, r3, r1
 8003e1c:	6019      	str	r1, [r3, #0]
 8003e1e:	4282      	cmp	r2, r0
 8003e20:	d1e0      	bne.n	8003de4 <_free_r+0x24>
 8003e22:	6810      	ldr	r0, [r2, #0]
 8003e24:	6852      	ldr	r2, [r2, #4]
 8003e26:	1841      	adds	r1, r0, r1
 8003e28:	6019      	str	r1, [r3, #0]
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	e7da      	b.n	8003de4 <_free_r+0x24>
 8003e2e:	42a0      	cmp	r0, r4
 8003e30:	d902      	bls.n	8003e38 <_free_r+0x78>
 8003e32:	230c      	movs	r3, #12
 8003e34:	602b      	str	r3, [r5, #0]
 8003e36:	e7d5      	b.n	8003de4 <_free_r+0x24>
 8003e38:	6821      	ldr	r1, [r4, #0]
 8003e3a:	1860      	adds	r0, r4, r1
 8003e3c:	4282      	cmp	r2, r0
 8003e3e:	d103      	bne.n	8003e48 <_free_r+0x88>
 8003e40:	6810      	ldr	r0, [r2, #0]
 8003e42:	6852      	ldr	r2, [r2, #4]
 8003e44:	1841      	adds	r1, r0, r1
 8003e46:	6021      	str	r1, [r4, #0]
 8003e48:	6062      	str	r2, [r4, #4]
 8003e4a:	605c      	str	r4, [r3, #4]
 8003e4c:	e7ca      	b.n	8003de4 <_free_r+0x24>
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	20000094 	.word	0x20000094

08003e54 <_malloc_r>:
 8003e54:	2303      	movs	r3, #3
 8003e56:	b570      	push	{r4, r5, r6, lr}
 8003e58:	1ccd      	adds	r5, r1, #3
 8003e5a:	439d      	bics	r5, r3
 8003e5c:	3508      	adds	r5, #8
 8003e5e:	0006      	movs	r6, r0
 8003e60:	2d0c      	cmp	r5, #12
 8003e62:	d21e      	bcs.n	8003ea2 <_malloc_r+0x4e>
 8003e64:	250c      	movs	r5, #12
 8003e66:	42a9      	cmp	r1, r5
 8003e68:	d81d      	bhi.n	8003ea6 <_malloc_r+0x52>
 8003e6a:	0030      	movs	r0, r6
 8003e6c:	f000 f888 	bl	8003f80 <__malloc_lock>
 8003e70:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <_malloc_r+0xb4>)
 8003e72:	6814      	ldr	r4, [r2, #0]
 8003e74:	0021      	movs	r1, r4
 8003e76:	2900      	cmp	r1, #0
 8003e78:	d119      	bne.n	8003eae <_malloc_r+0x5a>
 8003e7a:	4c24      	ldr	r4, [pc, #144]	; (8003f0c <_malloc_r+0xb8>)
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <_malloc_r+0x36>
 8003e82:	0030      	movs	r0, r6
 8003e84:	f000 f86a 	bl	8003f5c <_sbrk_r>
 8003e88:	6020      	str	r0, [r4, #0]
 8003e8a:	0029      	movs	r1, r5
 8003e8c:	0030      	movs	r0, r6
 8003e8e:	f000 f865 	bl	8003f5c <_sbrk_r>
 8003e92:	1c43      	adds	r3, r0, #1
 8003e94:	d12b      	bne.n	8003eee <_malloc_r+0x9a>
 8003e96:	230c      	movs	r3, #12
 8003e98:	0030      	movs	r0, r6
 8003e9a:	6033      	str	r3, [r6, #0]
 8003e9c:	f000 f871 	bl	8003f82 <__malloc_unlock>
 8003ea0:	e003      	b.n	8003eaa <_malloc_r+0x56>
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	dadf      	bge.n	8003e66 <_malloc_r+0x12>
 8003ea6:	230c      	movs	r3, #12
 8003ea8:	6033      	str	r3, [r6, #0]
 8003eaa:	2000      	movs	r0, #0
 8003eac:	bd70      	pop	{r4, r5, r6, pc}
 8003eae:	680b      	ldr	r3, [r1, #0]
 8003eb0:	1b5b      	subs	r3, r3, r5
 8003eb2:	d419      	bmi.n	8003ee8 <_malloc_r+0x94>
 8003eb4:	2b0b      	cmp	r3, #11
 8003eb6:	d903      	bls.n	8003ec0 <_malloc_r+0x6c>
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	18cc      	adds	r4, r1, r3
 8003ebc:	6025      	str	r5, [r4, #0]
 8003ebe:	e003      	b.n	8003ec8 <_malloc_r+0x74>
 8003ec0:	684b      	ldr	r3, [r1, #4]
 8003ec2:	428c      	cmp	r4, r1
 8003ec4:	d10d      	bne.n	8003ee2 <_malloc_r+0x8e>
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	0030      	movs	r0, r6
 8003eca:	f000 f85a 	bl	8003f82 <__malloc_unlock>
 8003ece:	0020      	movs	r0, r4
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	300b      	adds	r0, #11
 8003ed4:	1d23      	adds	r3, r4, #4
 8003ed6:	4390      	bics	r0, r2
 8003ed8:	1ac3      	subs	r3, r0, r3
 8003eda:	d0e7      	beq.n	8003eac <_malloc_r+0x58>
 8003edc:	425a      	negs	r2, r3
 8003ede:	50e2      	str	r2, [r4, r3]
 8003ee0:	e7e4      	b.n	8003eac <_malloc_r+0x58>
 8003ee2:	6063      	str	r3, [r4, #4]
 8003ee4:	000c      	movs	r4, r1
 8003ee6:	e7ef      	b.n	8003ec8 <_malloc_r+0x74>
 8003ee8:	000c      	movs	r4, r1
 8003eea:	6849      	ldr	r1, [r1, #4]
 8003eec:	e7c3      	b.n	8003e76 <_malloc_r+0x22>
 8003eee:	2303      	movs	r3, #3
 8003ef0:	1cc4      	adds	r4, r0, #3
 8003ef2:	439c      	bics	r4, r3
 8003ef4:	42a0      	cmp	r0, r4
 8003ef6:	d0e1      	beq.n	8003ebc <_malloc_r+0x68>
 8003ef8:	1a21      	subs	r1, r4, r0
 8003efa:	0030      	movs	r0, r6
 8003efc:	f000 f82e 	bl	8003f5c <_sbrk_r>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d1db      	bne.n	8003ebc <_malloc_r+0x68>
 8003f04:	e7c7      	b.n	8003e96 <_malloc_r+0x42>
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	20000094 	.word	0x20000094
 8003f0c:	20000098 	.word	0x20000098

08003f10 <_realloc_r>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	0007      	movs	r7, r0
 8003f14:	000d      	movs	r5, r1
 8003f16:	0016      	movs	r6, r2
 8003f18:	2900      	cmp	r1, #0
 8003f1a:	d105      	bne.n	8003f28 <_realloc_r+0x18>
 8003f1c:	0011      	movs	r1, r2
 8003f1e:	f7ff ff99 	bl	8003e54 <_malloc_r>
 8003f22:	0004      	movs	r4, r0
 8003f24:	0020      	movs	r0, r4
 8003f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f28:	2a00      	cmp	r2, #0
 8003f2a:	d103      	bne.n	8003f34 <_realloc_r+0x24>
 8003f2c:	f7ff ff48 	bl	8003dc0 <_free_r>
 8003f30:	0034      	movs	r4, r6
 8003f32:	e7f7      	b.n	8003f24 <_realloc_r+0x14>
 8003f34:	f000 f826 	bl	8003f84 <_malloc_usable_size_r>
 8003f38:	002c      	movs	r4, r5
 8003f3a:	42b0      	cmp	r0, r6
 8003f3c:	d2f2      	bcs.n	8003f24 <_realloc_r+0x14>
 8003f3e:	0031      	movs	r1, r6
 8003f40:	0038      	movs	r0, r7
 8003f42:	f7ff ff87 	bl	8003e54 <_malloc_r>
 8003f46:	1e04      	subs	r4, r0, #0
 8003f48:	d0ec      	beq.n	8003f24 <_realloc_r+0x14>
 8003f4a:	0029      	movs	r1, r5
 8003f4c:	0032      	movs	r2, r6
 8003f4e:	f7ff ff1a 	bl	8003d86 <memcpy>
 8003f52:	0029      	movs	r1, r5
 8003f54:	0038      	movs	r0, r7
 8003f56:	f7ff ff33 	bl	8003dc0 <_free_r>
 8003f5a:	e7e3      	b.n	8003f24 <_realloc_r+0x14>

08003f5c <_sbrk_r>:
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	b570      	push	{r4, r5, r6, lr}
 8003f60:	4c06      	ldr	r4, [pc, #24]	; (8003f7c <_sbrk_r+0x20>)
 8003f62:	0005      	movs	r5, r0
 8003f64:	0008      	movs	r0, r1
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	f7fc fed8 	bl	8000d1c <_sbrk>
 8003f6c:	1c43      	adds	r3, r0, #1
 8003f6e:	d103      	bne.n	8003f78 <_sbrk_r+0x1c>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d000      	beq.n	8003f78 <_sbrk_r+0x1c>
 8003f76:	602b      	str	r3, [r5, #0]
 8003f78:	bd70      	pop	{r4, r5, r6, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	20000190 	.word	0x20000190

08003f80 <__malloc_lock>:
 8003f80:	4770      	bx	lr

08003f82 <__malloc_unlock>:
 8003f82:	4770      	bx	lr

08003f84 <_malloc_usable_size_r>:
 8003f84:	1f0b      	subs	r3, r1, #4
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	1f18      	subs	r0, r3, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da01      	bge.n	8003f92 <_malloc_usable_size_r+0xe>
 8003f8e:	580b      	ldr	r3, [r1, r0]
 8003f90:	18c0      	adds	r0, r0, r3
 8003f92:	4770      	bx	lr

08003f94 <_init>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr

08003fa0 <_fini>:
 8003fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fa6:	bc08      	pop	{r3}
 8003fa8:	469e      	mov	lr, r3
 8003faa:	4770      	bx	lr
