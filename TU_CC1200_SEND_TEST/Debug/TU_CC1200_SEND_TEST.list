
TU_CC1200_SEND_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003224  08003224  00013224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003234  08003234  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003234  08003234  00013234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800323c  0800323c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800323c  0800323c  0001323c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000018  0800325c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800325c  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d07  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001557  00000000  00000000  00027d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  000292a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000708  00000000  00000000  00029a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020626  00000000  00000000  0002a190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000072a7  00000000  00000000  0004a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c083b  00000000  00000000  00051a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00112298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ea0  00000000  00000000  00112314  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800320c 	.word	0x0800320c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800320c 	.word	0x0800320c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CC1200_250kbps_settings>:
#include "main.h"
void CC1200_250kbps_settings() {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	//
	// Rf settings for CC1200
	//
	halRfWriteReg(IOCFG2,0x06);        //GPIO2 IO Pin Configuration
 80004cc:	2106      	movs	r1, #6
 80004ce:	2001      	movs	r0, #1
 80004d0:	f000 fb32 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYNC_CFG1,0xA9);     //Sync Word Detection Configuration Reg. 1
 80004d4:	21a9      	movs	r1, #169	; 0xa9
 80004d6:	2008      	movs	r0, #8
 80004d8:	f000 fb2e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(DEVIATION_M,0x9A);   //Frequency Deviation Configuration
 80004dc:	219a      	movs	r1, #154	; 0x9a
 80004de:	200a      	movs	r0, #10
 80004e0:	f000 fb2a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODCFG_DEV_E,0x0D);  //Modulation Format and Frequency Deviation Configur..
 80004e4:	210d      	movs	r1, #13
 80004e6:	200b      	movs	r0, #11
 80004e8:	f000 fb26 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PREAMBLE_CFG0,0x8A); //Preamble Detection Configuration Reg. 0
 80004ec:	218a      	movs	r1, #138	; 0x8a
 80004ee:	200e      	movs	r0, #14
 80004f0:	f000 fb22 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IQIC,0x48);          //Digital Image Channel Compensation Configuration
 80004f4:	2148      	movs	r1, #72	; 0x48
 80004f6:	200f      	movs	r0, #15
 80004f8:	f000 fb1e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(CHAN_BW,0x03);       //Channel Filter Configuration
 80004fc:	2103      	movs	r1, #3
 80004fe:	2010      	movs	r0, #16
 8000500:	f000 fb1a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG1,0x40);       //General Modem Parameter Configuration Reg. 1
 8000504:	2140      	movs	r1, #64	; 0x40
 8000506:	2011      	movs	r0, #17
 8000508:	f000 fb16 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG0,0x05);       //General Modem Parameter Configuration Reg. 0
 800050c:	2105      	movs	r1, #5
 800050e:	2012      	movs	r0, #18
 8000510:	f000 fb12 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE2,0xB9);  //Symbol Rate Configuration Exponent and Mantissa [1..
 8000514:	21b9      	movs	r1, #185	; 0xb9
 8000516:	2013      	movs	r0, #19
 8000518:	f000 fb0e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE1,0x99);  //Symbol Rate Configuration Mantissa [15:8]
 800051c:	2199      	movs	r1, #153	; 0x99
 800051e:	2014      	movs	r0, #20
 8000520:	f000 fb0a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE0,0x9A);  //Symbol Rate Configuration Mantissa [7:0]
 8000524:	219a      	movs	r1, #154	; 0x9a
 8000526:	2015      	movs	r0, #21
 8000528:	f000 fb06 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_REF,0x2E);       //AGC Reference Level Configuration
 800052c:	212e      	movs	r1, #46	; 0x2e
 800052e:	2016      	movs	r0, #22
 8000530:	f000 fb02 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CS_THR,0xEE);    //Carrier Sense Threshold Configuration
 8000534:	21ee      	movs	r1, #238	; 0xee
 8000536:	2017      	movs	r0, #23
 8000538:	f000 fafe 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG1,0x11);      //Automatic Gain Control Configuration Reg. 1
 800053c:	2111      	movs	r1, #17
 800053e:	201b      	movs	r0, #27
 8000540:	f000 fafa 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG0,0x94);      //Automatic Gain Control Configuration Reg. 0
 8000544:	2194      	movs	r1, #148	; 0x94
 8000546:	201c      	movs	r0, #28
 8000548:	f000 faf6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FIFO_CFG,0x00);      //FIFO Configuration
 800054c:	2100      	movs	r1, #0
 800054e:	201d      	movs	r0, #29
 8000550:	f000 faf2 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CFG,0x12);        //Frequency Synthesizer Configuration
 8000554:	2112      	movs	r1, #18
 8000556:	2020      	movs	r0, #32
 8000558:	f000 faee 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG2,0x00);      //Packet Configuration Reg. 2
 800055c:	2100      	movs	r1, #0
 800055e:	2026      	movs	r0, #38	; 0x26
 8000560:	f000 faea 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG1,0x43);      //Packet Configuration Reg. 1
 8000564:	2143      	movs	r1, #67	; 0x43
 8000566:	2027      	movs	r0, #39	; 0x27
 8000568:	f000 fae6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG0,0x20);      //Packet Configuration Reg. 0
 800056c:	2120      	movs	r1, #32
 800056e:	2028      	movs	r0, #40	; 0x28
 8000570:	f000 fae2 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PA_CFG1,0x6A);       //Power Amplifier Configuration Reg. 1
 8000574:	216a      	movs	r1, #106	; 0x6a
 8000576:	202b      	movs	r0, #43	; 0x2b
 8000578:	f000 fade 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PA_CFG0,0x51);       //Power Amplifier Configuration Reg. 0
 800057c:	2151      	movs	r1, #81	; 0x51
 800057e:	202c      	movs	r0, #44	; 0x2c
 8000580:	f000 fada 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_LEN,0xFF);       //Packet Length Configuration
 8000584:	21ff      	movs	r1, #255	; 0xff
 8000586:	202e      	movs	r0, #46	; 0x2e
 8000588:	f000 fad6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_MIX_CFG,0x1C);    //IF Mix Configuration
 800058c:	211c      	movs	r1, #28
 800058e:	f44f 503c 	mov.w	r0, #12032	; 0x2f00
 8000592:	f000 fad1 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQOFF_CFG,0x22);   //Frequency Offset Correction Configuration
 8000596:	2122      	movs	r1, #34	; 0x22
 8000598:	f642 7001 	movw	r0, #12033	; 0x2f01
 800059c:	f000 facc 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(TOC_CFG,0x03);       //Timing Offset Correction Configuration
 80005a0:	2103      	movs	r1, #3
 80005a2:	f642 7002 	movw	r0, #12034	; 0x2f02
 80005a6:	f000 fac7 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG2,0x02);       //General Modem Parameter Configuration Reg. 2
 80005aa:	2102      	movs	r1, #2
 80005ac:	f642 7005 	movw	r0, #12037	; 0x2f05
 80005b0:	f000 fac2 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ2,0x57);         //Frequency Configuration [23:16]
 80005b4:	2157      	movs	r1, #87	; 0x57
 80005b6:	f642 700c 	movw	r0, #12044	; 0x2f0c
 80005ba:	f000 fabd 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ1,0x0F);         //Frequency Configuration [15:8]
 80005be:	210f      	movs	r1, #15
 80005c0:	f642 700d 	movw	r0, #12045	; 0x2f0d
 80005c4:	f000 fab8 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ0,0x5C);         //Frequency Configuration [7:0]
 80005c8:	215c      	movs	r1, #92	; 0x5c
 80005ca:	f642 700e 	movw	r0, #12046	; 0x2f0e
 80005ce:	f000 fab3 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC1,0xEE);       //Analog to Digital Converter Configuration Reg. 1
 80005d2:	21ee      	movs	r1, #238	; 0xee
 80005d4:	f642 7010 	movw	r0, #12048	; 0x2f10
 80005d8:	f000 faae 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC0,0x10);       //Analog to Digital Converter Configuration Reg. 0
 80005dc:	2110      	movs	r1, #16
 80005de:	f642 7011 	movw	r0, #12049	; 0x2f11
 80005e2:	f000 faa9 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG1,0x04);       //Frequency Synthesizer Digital Reg. 1
 80005e6:	2104      	movs	r1, #4
 80005e8:	f642 7012 	movw	r0, #12050	; 0x2f12
 80005ec:	f000 faa4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG0,0x50);       //Frequency Synthesizer Digital Reg. 0
 80005f0:	2150      	movs	r1, #80	; 0x50
 80005f2:	f642 7013 	movw	r0, #12051	; 0x2f13
 80005f6:	f000 fa9f 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL1,0x40);       //Frequency Synthesizer Calibration Reg. 1
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	f642 7016 	movw	r0, #12054	; 0x2f16
 8000600:	f000 fa9a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL0,0x0E);       //Frequency Synthesizer Calibration Reg. 0
 8000604:	210e      	movs	r1, #14
 8000606:	f642 7017 	movw	r0, #12055	; 0x2f17
 800060a:	f000 fa95 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIVTWO,0x03);     //Frequency Synthesizer Divide by 2
 800060e:	2103      	movs	r1, #3
 8000610:	f642 7019 	movw	r0, #12057	; 0x2f19
 8000614:	f000 fa90 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DSM0,0x33);       //FS Digital Synthesizer Module Configuration Reg. 0
 8000618:	2133      	movs	r1, #51	; 0x33
 800061a:	f642 701b 	movw	r0, #12059	; 0x2f1b
 800061e:	f000 fa8b 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC1,0xF7);       //Frequency Synthesizer Divider Chain Configuration ..
 8000622:	21f7      	movs	r1, #247	; 0xf7
 8000624:	f642 701c 	movw	r0, #12060	; 0x2f1c
 8000628:	f000 fa86 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC0,0x0F);       //Frequency Synthesizer Divider Chain Configuration ..
 800062c:	210f      	movs	r1, #15
 800062e:	f642 701d 	movw	r0, #12061	; 0x2f1d
 8000632:	f000 fa81 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PFD,0x00);        //Frequency Synthesizer Phase Frequency Detector Con..
 8000636:	2100      	movs	r1, #0
 8000638:	f642 701f 	movw	r0, #12063	; 0x2f1f
 800063c:	f000 fa7c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PRE,0x6E);        //Frequency Synthesizer Prescaler Configuration
 8000640:	216e      	movs	r1, #110	; 0x6e
 8000642:	f642 7020 	movw	r0, #12064	; 0x2f20
 8000646:	f000 fa77 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_REG_DIV_CML,0x1C);//Frequency Synthesizer Divider Regulator Configurat..
 800064a:	211c      	movs	r1, #28
 800064c:	f642 7021 	movw	r0, #12065	; 0x2f21
 8000650:	f000 fa72 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_SPARE,0xAC);      //Frequency Synthesizer Spare
 8000654:	21ac      	movs	r1, #172	; 0xac
 8000656:	f642 7022 	movw	r0, #12066	; 0x2f22
 800065a:	f000 fa6d 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_VCO0,0xB5);       //FS Voltage Controlled Oscillator Configuration Reg..
 800065e:	21b5      	movs	r1, #181	; 0xb5
 8000660:	f642 7027 	movw	r0, #12071	; 0x2f27
 8000664:	f000 fa68 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IFAMP,0x09);         //Intermediate Frequency Amplifier Configuration
 8000668:	2109      	movs	r1, #9
 800066a:	f642 702f 	movw	r0, #12079	; 0x2f2f
 800066e:	f000 fa63 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC5,0x0E);         //Crystal Oscillator Configuration Reg. 5
 8000672:	210e      	movs	r1, #14
 8000674:	f642 7032 	movw	r0, #12082	; 0x2f32
 8000678:	f000 fa5e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC1,0x03);         //Crystal Oscillator Configuration Reg. 1
 800067c:	2103      	movs	r1, #3
 800067e:	f642 7036 	movw	r0, #12086	; 0x2f36
 8000682:	f000 fa59 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTNUMBER,0x20);    //Part Number
 8000686:	2120      	movs	r1, #32
 8000688:	f642 708f 	movw	r0, #12175	; 0x2f8f
 800068c:	f000 fa54 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTVERSION,0x11);   //Part Revision
 8000690:	2111      	movs	r1, #17
 8000692:	f642 7090 	movw	r0, #12176	; 0x2f90
 8000696:	f000 fa4f 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODEM_STATUS1,0x10); //Modem Status Reg. 1
 800069a:	2110      	movs	r1, #16
 800069c:	f642 7092 	movw	r0, #12178	; 0x2f92
 80006a0:	f000 fa4a 	bl	8000b38 <halRfWriteReg>

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <CC1200_500kbps_settings>:
#include "main.h"
void CC1200_500kbps_settings() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	//
	// Rf settings for CC1200
	//
	halRfWriteReg(IOCFG2,0x06);        //GPIO2 IO Pin Configuration
 80006ac:	2106      	movs	r1, #6
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 fa42 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYNC_CFG1,0xA8);     //Sync Word Detection Configuration Reg. 1
 80006b4:	21a8      	movs	r1, #168	; 0xa8
 80006b6:	2008      	movs	r0, #8
 80006b8:	f000 fa3e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYNC_CFG0,0x13);     //Sync Word Detection Configuration Reg. 0
 80006bc:	2113      	movs	r1, #19
 80006be:	2009      	movs	r0, #9
 80006c0:	f000 fa3a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(DEVIATION_M,0x99);   //Frequency Deviation Configuration
 80006c4:	2199      	movs	r1, #153	; 0x99
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fa36 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODCFG_DEV_E,0x0D);  //Modulation Format and Frequency Deviation Configur..
 80006cc:	210d      	movs	r1, #13
 80006ce:	200b      	movs	r0, #11
 80006d0:	f000 fa32 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(DCFILT_CFG,0x26);    //Digital DC Removal Configuration
 80006d4:	2126      	movs	r1, #38	; 0x26
 80006d6:	200c      	movs	r0, #12
 80006d8:	f000 fa2e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PREAMBLE_CFG0,0x8A); //Preamble Detection Configuration Reg. 0
 80006dc:	218a      	movs	r1, #138	; 0x8a
 80006de:	200e      	movs	r0, #14
 80006e0:	f000 fa2a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IQIC,0x00);          //Digital Image Channel Compensation Configuration
 80006e4:	2100      	movs	r1, #0
 80006e6:	200f      	movs	r0, #15
 80006e8:	f000 fa26 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(CHAN_BW,0x02);       //Channel Filter Configuration
 80006ec:	2102      	movs	r1, #2
 80006ee:	2010      	movs	r0, #16
 80006f0:	f000 fa22 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG1,0x40);       //General Modem Parameter Configuration Reg. 1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	2011      	movs	r0, #17
 80006f8:	f000 fa1e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG0,0x05);       //General Modem Parameter Configuration Reg. 0
 80006fc:	2105      	movs	r1, #5
 80006fe:	2012      	movs	r0, #18
 8000700:	f000 fa1a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE2,0xC9);  //Symbol Rate Configuration Exponent and Mantissa [1..
 8000704:	21c9      	movs	r1, #201	; 0xc9
 8000706:	2013      	movs	r0, #19
 8000708:	f000 fa16 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE1,0x99);  //Symbol Rate Configuration Mantissa [15:8]
 800070c:	2199      	movs	r1, #153	; 0x99
 800070e:	2014      	movs	r0, #20
 8000710:	f000 fa12 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(SYMBOL_RATE0,0x99);  //Symbol Rate Configuration Mantissa [7:0]
 8000714:	2199      	movs	r1, #153	; 0x99
 8000716:	2015      	movs	r0, #21
 8000718:	f000 fa0e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_REF,0x2F);       //AGC Reference Level Configuration
 800071c:	212f      	movs	r1, #47	; 0x2f
 800071e:	2016      	movs	r0, #22
 8000720:	f000 fa0a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CS_THR,0xEC);    //Carrier Sense Threshold Configuration
 8000724:	21ec      	movs	r1, #236	; 0xec
 8000726:	2017      	movs	r0, #23
 8000728:	f000 fa06 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG1,0x16);      //Automatic Gain Control Configuration Reg. 1
 800072c:	2116      	movs	r1, #22
 800072e:	201b      	movs	r0, #27
 8000730:	f000 fa02 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(AGC_CFG0,0x84);      //Automatic Gain Control Configuration Reg. 0
 8000734:	2184      	movs	r1, #132	; 0x84
 8000736:	201c      	movs	r0, #28
 8000738:	f000 f9fe 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FIFO_CFG,0x00);      //FIFO Configuration
 800073c:	2100      	movs	r1, #0
 800073e:	201d      	movs	r0, #29
 8000740:	f000 f9fa 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CFG,0x12);        //Frequency Synthesizer Configuration
 8000744:	2112      	movs	r1, #18
 8000746:	2020      	movs	r0, #32
 8000748:	f000 f9f6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG2,0x00);      //Packet Configuration Reg. 2
 800074c:	2100      	movs	r1, #0
 800074e:	2026      	movs	r0, #38	; 0x26
 8000750:	f000 f9f2 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG1,0x43);      //Packet Configuration Reg. 1
 8000754:	2143      	movs	r1, #67	; 0x43
 8000756:	2027      	movs	r0, #39	; 0x27
 8000758:	f000 f9ee 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_CFG0,0x20);      //Packet Configuration Reg. 0
 800075c:	2120      	movs	r1, #32
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f000 f9ea 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PA_CFG1,0x6A);       //Power Amplifier Configuration Reg. 1
 8000764:	216a      	movs	r1, #106	; 0x6a
 8000766:	202b      	movs	r0, #43	; 0x2b
 8000768:	f000 f9e6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(ASK_CFG,0x3F);       //ASK Configuration
 800076c:	213f      	movs	r1, #63	; 0x3f
 800076e:	202d      	movs	r0, #45	; 0x2d
 8000770:	f000 f9e2 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PKT_LEN,0xFF);       //Packet Length Configuration
 8000774:	21ff      	movs	r1, #255	; 0xff
 8000776:	202e      	movs	r0, #46	; 0x2e
 8000778:	f000 f9de 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_MIX_CFG,0x18);    //IF Mix Configuration
 800077c:	2118      	movs	r1, #24
 800077e:	f44f 503c 	mov.w	r0, #12032	; 0x2f00
 8000782:	f000 f9d9 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQOFF_CFG,0x22);   //Frequency Offset Correction Configuration
 8000786:	2122      	movs	r1, #34	; 0x22
 8000788:	f642 7001 	movw	r0, #12033	; 0x2f01
 800078c:	f000 f9d4 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(TOC_CFG,0x03);       //Timing Offset Correction Configuration
 8000790:	2103      	movs	r1, #3
 8000792:	f642 7002 	movw	r0, #12034	; 0x2f02
 8000796:	f000 f9cf 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MDMCFG2,0x00);       //General Modem Parameter Configuration Reg. 2
 800079a:	2100      	movs	r1, #0
 800079c:	f642 7005 	movw	r0, #12037	; 0x2f05
 80007a0:	f000 f9ca 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ2,0x57);         //Frequency Configuration [23:16]
 80007a4:	2157      	movs	r1, #87	; 0x57
 80007a6:	f642 700c 	movw	r0, #12044	; 0x2f0c
 80007aa:	f000 f9c5 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ1,0x0F);         //Frequency Configuration [15:8]
 80007ae:	210f      	movs	r1, #15
 80007b0:	f642 700d 	movw	r0, #12045	; 0x2f0d
 80007b4:	f000 f9c0 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FREQ0,0x5C);         //Frequency Configuration [7:0]
 80007b8:	215c      	movs	r1, #92	; 0x5c
 80007ba:	f642 700e 	movw	r0, #12046	; 0x2f0e
 80007be:	f000 f9bb 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC1,0xEE);       //Analog to Digital Converter Configuration Reg. 1
 80007c2:	21ee      	movs	r1, #238	; 0xee
 80007c4:	f642 7010 	movw	r0, #12048	; 0x2f10
 80007c8:	f000 f9b6 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IF_ADC0,0x10);       //Analog to Digital Converter Configuration Reg. 0
 80007cc:	2110      	movs	r1, #16
 80007ce:	f642 7011 	movw	r0, #12049	; 0x2f11
 80007d2:	f000 f9b1 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG1,0x04);       //Frequency Synthesizer Digital Reg. 1
 80007d6:	2104      	movs	r1, #4
 80007d8:	f642 7012 	movw	r0, #12050	; 0x2f12
 80007dc:	f000 f9ac 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIG0,0x50);       //Frequency Synthesizer Digital Reg. 0
 80007e0:	2150      	movs	r1, #80	; 0x50
 80007e2:	f642 7013 	movw	r0, #12051	; 0x2f13
 80007e6:	f000 f9a7 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL1,0x40);       //Frequency Synthesizer Calibration Reg. 1
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	f642 7016 	movw	r0, #12054	; 0x2f16
 80007f0:	f000 f9a2 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_CAL0,0x0E);       //Frequency Synthesizer Calibration Reg. 0
 80007f4:	210e      	movs	r1, #14
 80007f6:	f642 7017 	movw	r0, #12055	; 0x2f17
 80007fa:	f000 f99d 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DIVTWO,0x03);     //Frequency Synthesizer Divide by 2
 80007fe:	2103      	movs	r1, #3
 8000800:	f642 7019 	movw	r0, #12057	; 0x2f19
 8000804:	f000 f998 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DSM0,0x33);       //FS Digital Synthesizer Module Configuration Reg. 0
 8000808:	2133      	movs	r1, #51	; 0x33
 800080a:	f642 701b 	movw	r0, #12059	; 0x2f1b
 800080e:	f000 f993 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC1,0xF7);       //Frequency Synthesizer Divider Chain Configuration ..
 8000812:	21f7      	movs	r1, #247	; 0xf7
 8000814:	f642 701c 	movw	r0, #12060	; 0x2f1c
 8000818:	f000 f98e 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_DVC0,0x0F);       //Frequency Synthesizer Divider Chain Configuration ..
 800081c:	210f      	movs	r1, #15
 800081e:	f642 701d 	movw	r0, #12061	; 0x2f1d
 8000822:	f000 f989 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PFD,0x00);        //Frequency Synthesizer Phase Frequency Detector Con..
 8000826:	2100      	movs	r1, #0
 8000828:	f642 701f 	movw	r0, #12063	; 0x2f1f
 800082c:	f000 f984 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_PRE,0x6E);        //Frequency Synthesizer Prescaler Configuration
 8000830:	216e      	movs	r1, #110	; 0x6e
 8000832:	f642 7020 	movw	r0, #12064	; 0x2f20
 8000836:	f000 f97f 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_REG_DIV_CML,0x1C);//Frequency Synthesizer Divider Regulator Configurat..
 800083a:	211c      	movs	r1, #28
 800083c:	f642 7021 	movw	r0, #12065	; 0x2f21
 8000840:	f000 f97a 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_SPARE,0xAC);      //Frequency Synthesizer Spare
 8000844:	21ac      	movs	r1, #172	; 0xac
 8000846:	f642 7022 	movw	r0, #12066	; 0x2f22
 800084a:	f000 f975 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(FS_VCO0,0xB5);       //FS Voltage Controlled Oscillator Configuration Reg..
 800084e:	21b5      	movs	r1, #181	; 0xb5
 8000850:	f642 7027 	movw	r0, #12071	; 0x2f27
 8000854:	f000 f970 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(IFAMP,0x0D);         //Intermediate Frequency Amplifier Configuration
 8000858:	210d      	movs	r1, #13
 800085a:	f642 702f 	movw	r0, #12079	; 0x2f2f
 800085e:	f000 f96b 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC5,0x0E);         //Crystal Oscillator Configuration Reg. 5
 8000862:	210e      	movs	r1, #14
 8000864:	f642 7032 	movw	r0, #12082	; 0x2f32
 8000868:	f000 f966 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(XOSC1,0x03);         //Crystal Oscillator Configuration Reg. 1
 800086c:	2103      	movs	r1, #3
 800086e:	f642 7036 	movw	r0, #12086	; 0x2f36
 8000872:	f000 f961 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTNUMBER,0x20);    //Part Number
 8000876:	2120      	movs	r1, #32
 8000878:	f642 708f 	movw	r0, #12175	; 0x2f8f
 800087c:	f000 f95c 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(PARTVERSION,0x11);   //Part Revision
 8000880:	2111      	movs	r1, #17
 8000882:	f642 7090 	movw	r0, #12176	; 0x2f90
 8000886:	f000 f957 	bl	8000b38 <halRfWriteReg>
	halRfWriteReg(MODEM_STATUS1,0x10); //Modem Status Reg. 1
 800088a:	2110      	movs	r1, #16
 800088c:	f642 7092 	movw	r0, #12178	; 0x2f92
 8000890:	f000 f952 	bl	8000b38 <halRfWriteReg>

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}

08000898 <CC1200_50kbps_settings>:
#include "main.h"
void CC1200_50kbps_settings() {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	  // Rf settings for CC1200
	  //
	  halRfWriteReg(IOCFG2,0x06);        //GPIO2 IO Pin Configuration
 800089c:	2106      	movs	r1, #6
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 f94a 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYNC_CFG1,0xA9);     //Sync Word Detection Configuration Reg. 1
 80008a4:	21a9      	movs	r1, #169	; 0xa9
 80008a6:	2008      	movs	r0, #8
 80008a8:	f000 f946 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MODCFG_DEV_E,0x0B);  //Modulation Format and Frequency Deviation Configur..
 80008ac:	210b      	movs	r1, #11
 80008ae:	200b      	movs	r0, #11
 80008b0:	f000 f942 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PREAMBLE_CFG0,0x8A); //Preamble Detection Configuration Reg. 0
 80008b4:	218a      	movs	r1, #138	; 0x8a
 80008b6:	200e      	movs	r0, #14
 80008b8:	f000 f93e 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IQIC,0xC8);          //Digital Image Channel Compensation Configuration
 80008bc:	21c8      	movs	r1, #200	; 0xc8
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f93a 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(CHAN_BW,0x10);       //Channel Filter Configuration
 80008c4:	2110      	movs	r1, #16
 80008c6:	2010      	movs	r0, #16
 80008c8:	f000 f936 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MDMCFG1,0x42);       //General Modem Parameter Configuration Reg. 1
 80008cc:	2142      	movs	r1, #66	; 0x42
 80008ce:	2011      	movs	r0, #17
 80008d0:	f000 f932 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MDMCFG0,0x05);       //General Modem Parameter Configuration Reg. 0
 80008d4:	2105      	movs	r1, #5
 80008d6:	2012      	movs	r0, #18
 80008d8:	f000 f92e 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYMBOL_RATE2,0x94);  //Symbol Rate Configuration Exponent and Mantissa [1..
 80008dc:	2194      	movs	r1, #148	; 0x94
 80008de:	2013      	movs	r0, #19
 80008e0:	f000 f92a 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYMBOL_RATE1,0x7A);  //Symbol Rate Configuration Mantissa [15:8]
 80008e4:	217a      	movs	r1, #122	; 0x7a
 80008e6:	2014      	movs	r0, #20
 80008e8:	f000 f926 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(SYMBOL_RATE0,0xE1);  //Symbol Rate Configuration Mantissa [7:0]
 80008ec:	21e1      	movs	r1, #225	; 0xe1
 80008ee:	2015      	movs	r0, #21
 80008f0:	f000 f922 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_REF,0x27);       //AGC Reference Level Configuration
 80008f4:	2127      	movs	r1, #39	; 0x27
 80008f6:	2016      	movs	r0, #22
 80008f8:	f000 f91e 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_CS_THR,0xEE);    //Carrier Sense Threshold Configuration
 80008fc:	21ee      	movs	r1, #238	; 0xee
 80008fe:	2017      	movs	r0, #23
 8000900:	f000 f91a 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_CFG1,0x11);      //Automatic Gain Control Configuration Reg. 1
 8000904:	2111      	movs	r1, #17
 8000906:	201b      	movs	r0, #27
 8000908:	f000 f916 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(AGC_CFG0,0x94);      //Automatic Gain Control Configuration Reg. 0
 800090c:	2194      	movs	r1, #148	; 0x94
 800090e:	201c      	movs	r0, #28
 8000910:	f000 f912 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FIFO_CFG,0x00);      //FIFO Configuration
 8000914:	2100      	movs	r1, #0
 8000916:	201d      	movs	r0, #29
 8000918:	f000 f90e 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_CFG,0x12);        //Frequency Synthesizer Configuration
 800091c:	2112      	movs	r1, #18
 800091e:	2020      	movs	r0, #32
 8000920:	f000 f90a 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_CFG2,0x00);      //Packet Configuration Reg. 2
 8000924:	2100      	movs	r1, #0
 8000926:	2026      	movs	r0, #38	; 0x26
 8000928:	f000 f906 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_CFG1,0x43);      //Packet Configuration Reg. 1
 800092c:	2143      	movs	r1, #67	; 0x43
 800092e:	2027      	movs	r0, #39	; 0x27
 8000930:	f000 f902 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_CFG0,0x20);      //Packet Configuration Reg. 0
 8000934:	2120      	movs	r1, #32
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f000 f8fe 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PA_CFG1,0x6A);       //Power Amplifier Configuration Reg. 1
 800093c:	216a      	movs	r1, #106	; 0x6a
 800093e:	202b      	movs	r0, #43	; 0x2b
 8000940:	f000 f8fa 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PKT_LEN,0xFF);       //Packet Length Configuration
 8000944:	21ff      	movs	r1, #255	; 0xff
 8000946:	202e      	movs	r0, #46	; 0x2e
 8000948:	f000 f8f6 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IF_MIX_CFG,0x1C);    //IF Mix Configuration
 800094c:	211c      	movs	r1, #28
 800094e:	f44f 503c 	mov.w	r0, #12032	; 0x2f00
 8000952:	f000 f8f1 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(TOC_CFG,0x03);       //Timing Offset Correction Configuration
 8000956:	2103      	movs	r1, #3
 8000958:	f642 7002 	movw	r0, #12034	; 0x2f02
 800095c:	f000 f8ec 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MDMCFG2,0x02);       //General Modem Parameter Configuration Reg. 2
 8000960:	2102      	movs	r1, #2
 8000962:	f642 7005 	movw	r0, #12037	; 0x2f05
 8000966:	f000 f8e7 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FREQ2,0x56);         //Frequency Configuration [23:16]
 800096a:	2156      	movs	r1, #86	; 0x56
 800096c:	f642 700c 	movw	r0, #12044	; 0x2f0c
 8000970:	f000 f8e2 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FREQ1,0xCC);         //Frequency Configuration [15:8]
 8000974:	21cc      	movs	r1, #204	; 0xcc
 8000976:	f642 700d 	movw	r0, #12045	; 0x2f0d
 800097a:	f000 f8dd 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FREQ0,0xCC);         //Frequency Configuration [7:0]
 800097e:	21cc      	movs	r1, #204	; 0xcc
 8000980:	f642 700e 	movw	r0, #12046	; 0x2f0e
 8000984:	f000 f8d8 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IF_ADC1,0xEE);       //Analog to Digital Converter Configuration Reg. 1
 8000988:	21ee      	movs	r1, #238	; 0xee
 800098a:	f642 7010 	movw	r0, #12048	; 0x2f10
 800098e:	f000 f8d3 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IF_ADC0,0x10);       //Analog to Digital Converter Configuration Reg. 0
 8000992:	2110      	movs	r1, #16
 8000994:	f642 7011 	movw	r0, #12049	; 0x2f11
 8000998:	f000 f8ce 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DIG1,0x07);       //Frequency Synthesizer Digital Reg. 1
 800099c:	2107      	movs	r1, #7
 800099e:	f642 7012 	movw	r0, #12050	; 0x2f12
 80009a2:	f000 f8c9 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DIG0,0xAF);       //Frequency Synthesizer Digital Reg. 0
 80009a6:	21af      	movs	r1, #175	; 0xaf
 80009a8:	f642 7013 	movw	r0, #12051	; 0x2f13
 80009ac:	f000 f8c4 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_CAL1,0x40);       //Frequency Synthesizer Calibration Reg. 1
 80009b0:	2140      	movs	r1, #64	; 0x40
 80009b2:	f642 7016 	movw	r0, #12054	; 0x2f16
 80009b6:	f000 f8bf 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_CAL0,0x0E);       //Frequency Synthesizer Calibration Reg. 0
 80009ba:	210e      	movs	r1, #14
 80009bc:	f642 7017 	movw	r0, #12055	; 0x2f17
 80009c0:	f000 f8ba 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DIVTWO,0x03);     //Frequency Synthesizer Divide by 2
 80009c4:	2103      	movs	r1, #3
 80009c6:	f642 7019 	movw	r0, #12057	; 0x2f19
 80009ca:	f000 f8b5 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DSM0,0x33);       //FS Digital Synthesizer Module Configuration Reg. 0
 80009ce:	2133      	movs	r1, #51	; 0x33
 80009d0:	f642 701b 	movw	r0, #12059	; 0x2f1b
 80009d4:	f000 f8b0 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_DVC0,0x17);       //Frequency Synthesizer Divider Chain Configuration ..
 80009d8:	2117      	movs	r1, #23
 80009da:	f642 701d 	movw	r0, #12061	; 0x2f1d
 80009de:	f000 f8ab 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_PFD,0x00);        //Frequency Synthesizer Phase Frequency Detector Con..
 80009e2:	2100      	movs	r1, #0
 80009e4:	f642 701f 	movw	r0, #12063	; 0x2f1f
 80009e8:	f000 f8a6 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_PRE,0x6E);        //Frequency Synthesizer Prescaler Configuration
 80009ec:	216e      	movs	r1, #110	; 0x6e
 80009ee:	f642 7020 	movw	r0, #12064	; 0x2f20
 80009f2:	f000 f8a1 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_REG_DIV_CML,0x1C);//Frequency Synthesizer Divider Regulator Configurat..
 80009f6:	211c      	movs	r1, #28
 80009f8:	f642 7021 	movw	r0, #12065	; 0x2f21
 80009fc:	f000 f89c 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_SPARE,0xAC);      //Frequency Synthesizer Spare
 8000a00:	21ac      	movs	r1, #172	; 0xac
 8000a02:	f642 7022 	movw	r0, #12066	; 0x2f22
 8000a06:	f000 f897 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(FS_VCO0,0xB5);       //FS Voltage Controlled Oscillator Configuration Reg..
 8000a0a:	21b5      	movs	r1, #181	; 0xb5
 8000a0c:	f642 7027 	movw	r0, #12071	; 0x2f27
 8000a10:	f000 f892 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(IFAMP,0x09);         //Intermediate Frequency Amplifier Configuration
 8000a14:	2109      	movs	r1, #9
 8000a16:	f642 702f 	movw	r0, #12079	; 0x2f2f
 8000a1a:	f000 f88d 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(XOSC5,0x0E);         //Crystal Oscillator Configuration Reg. 5
 8000a1e:	210e      	movs	r1, #14
 8000a20:	f642 7032 	movw	r0, #12082	; 0x2f32
 8000a24:	f000 f888 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(XOSC1,0x03);         //Crystal Oscillator Configuration Reg. 1
 8000a28:	2103      	movs	r1, #3
 8000a2a:	f642 7036 	movw	r0, #12086	; 0x2f36
 8000a2e:	f000 f883 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PARTNUMBER,0x20);    //Part Number
 8000a32:	2120      	movs	r1, #32
 8000a34:	f642 708f 	movw	r0, #12175	; 0x2f8f
 8000a38:	f000 f87e 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(PARTVERSION,0x11);   //Part Revision
 8000a3c:	2111      	movs	r1, #17
 8000a3e:	f642 7090 	movw	r0, #12176	; 0x2f90
 8000a42:	f000 f879 	bl	8000b38 <halRfWriteReg>
	  halRfWriteReg(MODEM_STATUS1,0x10); //Modem Status Reg. 1
 8000a46:	2110      	movs	r1, #16
 8000a48:	f642 7092 	movw	r0, #12178	; 0x2f92
 8000a4c:	f000 f874 	bl	8000b38 <halRfWriteReg>

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <CS_Select>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Select CS
void CS_Select()  {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <CS_Select+0x14>)
 8000a5e:	f001 fa1b 	bl	8001e98 <HAL_GPIO_WritePin>


}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020c00 	.word	0x40020c00

08000a6c <CS_Deselect>:

// Deselect CS
void CS_Deselect()  {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2140      	movs	r1, #64	; 0x40
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <CS_Deselect+0x14>)
 8000a76:	f001 fa0f 	bl	8001e98 <HAL_GPIO_WritePin>

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <wait_Miso>:

// Waits until MISO goes low
void wait_Miso() {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11)>0){
 8000a88:	e000      	b.n	8000a8c <wait_Miso+0x8>
		__NOP();
 8000a8a:	bf00      	nop
	while(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11)>0){
 8000a8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <wait_Miso+0x1c>)
 8000a92:	f001 f9e9 	bl	8001e68 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d1f6      	bne.n	8000a8a <wait_Miso+0x6>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <writeReg>:

//Write to register
void writeReg(uint16_t regAddr, uint8_t value)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	80fb      	strh	r3, [r7, #6]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	717b      	strb	r3, [r7, #5]
	uint8_t extended_or_not  = (uint8_t)(regAddr>>8);
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	0a1b      	lsrs	r3, r3, #8
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	73fb      	strb	r3, [r7, #15]
	uint8_t extended_addr = (uint8_t)(regAddr & 0x00FF);
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	73bb      	strb	r3, [r7, #14]
	if (extended_or_not == 0){
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d112      	bne.n	8000af0 <writeReg+0x4c>
		CS_Select();                     									   // Select CS
 8000aca:	f7ff ffc3 	bl	8000a54 <CS_Select>
		wait_Miso();                          							  	 // Wait until MISO goes low
 8000ace:	f7ff ffd9 	bl	8000a84 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&regAddr, 1, 100);                // Send register address
 8000ad2:	1db9      	adds	r1, r7, #6
 8000ad4:	2364      	movs	r3, #100	; 0x64
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4816      	ldr	r0, [pc, #88]	; (8000b34 <writeReg+0x90>)
 8000ada:	f001 fe7b 	bl	80027d4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&value, 1, 100);                  // Send value
 8000ade:	1d79      	adds	r1, r7, #5
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <writeReg+0x90>)
 8000ae6:	f001 fe75 	bl	80027d4 <HAL_SPI_Transmit>
		CS_Deselect();                    	   							   // Deselect CC1101
 8000aea:	f7ff ffbf 	bl	8000a6c <CS_Deselect>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_or_not, 1, 100);      // Access the extended registers
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);        // Send register address
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&value, 1, 100);				   // Send value
		CS_Deselect();                    	   							   // Deselect CC1101
	}
}
 8000aee:	e01c      	b.n	8000b2a <writeReg+0x86>
	else if (extended_or_not == 0x2F){
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2b2f      	cmp	r3, #47	; 0x2f
 8000af4:	d119      	bne.n	8000b2a <writeReg+0x86>
		CS_Select();                     								   // Select CS
 8000af6:	f7ff ffad 	bl	8000a54 <CS_Select>
		wait_Miso();                          							   // Wait until MISO goes low
 8000afa:	f7ff ffc3 	bl	8000a84 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_or_not, 1, 100);      // Access the extended registers
 8000afe:	f107 010f 	add.w	r1, r7, #15
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <writeReg+0x90>)
 8000b08:	f001 fe64 	bl	80027d4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);        // Send register address
 8000b0c:	f107 010e 	add.w	r1, r7, #14
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2201      	movs	r2, #1
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <writeReg+0x90>)
 8000b16:	f001 fe5d 	bl	80027d4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&value, 1, 100);				   // Send value
 8000b1a:	1d79      	adds	r1, r7, #5
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	2201      	movs	r2, #1
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <writeReg+0x90>)
 8000b22:	f001 fe57 	bl	80027d4 <HAL_SPI_Transmit>
		CS_Deselect();                    	   							   // Deselect CC1101
 8000b26:	f7ff ffa1 	bl	8000a6c <CS_Deselect>
}
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000038 	.word	0x20000038

08000b38 <halRfWriteReg>:

// Write to register (ONLY USED FOR SETTING THE INTIAL SETTINGS. The name is "halRfWriteReg" so it matches with SMARTRF Studio
void halRfWriteReg(uint16_t setting, uint8_t value)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	80fb      	strh	r3, [r7, #6]
 8000b44:	4613      	mov	r3, r2
 8000b46:	717b      	strb	r3, [r7, #5]
	writeReg(setting, value);
 8000b48:	797a      	ldrb	r2, [r7, #5]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff ffa8 	bl	8000aa4 <writeReg>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <command_strobe1>:

// Send command strobe (FIFO_BYTES_AVAILABLE CASE 1)
void command_strobe1(uint8_t cmd){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
    cmd = cmd | 0x00;                									// | 0x00 means that R/W=0(FIFO_BYTES_AVAILABLE means the TXFIFO when status byte has been sent)/ burst=0(strobe)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	71fb      	strb	r3, [r7, #7]
    CS_Select();            		 									// set the CS pin to LOW
 8000b6a:	f7ff ff73 	bl	8000a54 <CS_Select>
    wait_Miso();                          								// Wait until MISO goes low
 8000b6e:	f7ff ff89 	bl	8000a84 <wait_Miso>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&cmd, 1, 100);                   // Send register address
 8000b72:	1df9      	adds	r1, r7, #7
 8000b74:	2364      	movs	r3, #100	; 0x64
 8000b76:	2201      	movs	r2, #1
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <command_strobe1+0x30>)
 8000b7a:	f001 fe2b 	bl	80027d4 <HAL_SPI_Transmit>
    CS_Deselect();
 8000b7e:	f7ff ff75 	bl	8000a6c <CS_Deselect>
  }
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000038 	.word	0x20000038

08000b90 <readReg>:

// Read register
void readReg(uint16_t regAddr) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
    uint8_t addr;
    uint8_t extended_or_not  = (uint8_t)(regAddr>>8);
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	73bb      	strb	r3, [r7, #14]
    uint8_t extended_addr = (uint8_t)(regAddr & 0x00FF);
 8000ba4:	88fb      	ldrh	r3, [r7, #6]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	737b      	strb	r3, [r7, #13]
    // With cc1200 there are 2 types of register accesses and the following code choose the right one.
    if (extended_or_not == 0){
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d119      	bne.n	8000be4 <readReg+0x54>
		addr = regAddr | RADIO_READ_ACCESS;			  						 // Bitwise and to get the right address
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	73fb      	strb	r3, [r7, #15]
		CS_Select();                										 // set the SS pin to LOW
 8000bbc:	f7ff ff4a 	bl	8000a54 <CS_Select>
		wait_Miso();                          								 // Wait until MISO goes low
 8000bc0:	f7ff ff60 	bl	8000a84 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&addr, 1, 100);                   // Send register address
 8000bc4:	f107 010f 	add.w	r1, r7, #15
 8000bc8:	2364      	movs	r3, #100	; 0x64
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <readReg+0xa0>)
 8000bce:	f001 fe01 	bl	80027d4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result
 8000bd2:	2364      	movs	r3, #100	; 0x64
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4917      	ldr	r1, [pc, #92]	; (8000c34 <readReg+0xa4>)
 8000bd8:	4815      	ldr	r0, [pc, #84]	; (8000c30 <readReg+0xa0>)
 8000bda:	f001 ff2f 	bl	8002a3c <HAL_SPI_Receive>
		CS_Deselect();                    							 		 // set the SS pin to HIGH
 8000bde:	f7ff ff45 	bl	8000a6c <CS_Deselect>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);                   // Send register address
		HAL_SPI_Receive(&hspi3, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result
		CS_Deselect();                    							 		 // set the SS pin to HIGH

    }
}
 8000be2:	e021      	b.n	8000c28 <readReg+0x98>
    else if (extended_or_not == 0x2F){
 8000be4:	7bbb      	ldrb	r3, [r7, #14]
 8000be6:	2b2f      	cmp	r3, #47	; 0x2f
 8000be8:	d11e      	bne.n	8000c28 <readReg+0x98>
    	extended_or_not = extended_or_not | RADIO_READ_ACCESS;			  				 // Bitwise and to get the right address
 8000bea:	7bbb      	ldrb	r3, [r7, #14]
 8000bec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	73bb      	strb	r3, [r7, #14]
		CS_Select();                										 // set the SS pin to LOW
 8000bf4:	f7ff ff2e 	bl	8000a54 <CS_Select>
		wait_Miso();                          								 // Wait until MISO goes low
 8000bf8:	f7ff ff44 	bl	8000a84 <wait_Miso>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_or_not, 1, 100);		 // Access the extended registers
 8000bfc:	f107 010e 	add.w	r1, r7, #14
 8000c00:	2364      	movs	r3, #100	; 0x64
 8000c02:	2201      	movs	r2, #1
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <readReg+0xa0>)
 8000c06:	f001 fde5 	bl	80027d4 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, (uint8_t*)&extended_addr, 1, 100);                   // Send register address
 8000c0a:	f107 010d 	add.w	r1, r7, #13
 8000c0e:	2364      	movs	r3, #100	; 0x64
 8000c10:	2201      	movs	r2, #1
 8000c12:	4807      	ldr	r0, [pc, #28]	; (8000c30 <readReg+0xa0>)
 8000c14:	f001 fdde 	bl	80027d4 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, (uint8_t*)&SPI_BUFFER, 1, 100);            	 // Read result
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4905      	ldr	r1, [pc, #20]	; (8000c34 <readReg+0xa4>)
 8000c1e:	4804      	ldr	r0, [pc, #16]	; (8000c30 <readReg+0xa0>)
 8000c20:	f001 ff0c 	bl	8002a3c <HAL_SPI_Receive>
		CS_Deselect();                    							 		 // set the SS pin to HIGH
 8000c24:	f7ff ff22 	bl	8000a6c <CS_Deselect>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000038 	.word	0x20000038
 8000c34:	200000e0 	.word	0x200000e0

08000c38 <send_data_sequence>:

// Send data with sequence numbers
void send_data_sequence(char databuffer[],uint8_t length,uint16_t sequence ){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
 8000c44:	4613      	mov	r3, r2
 8000c46:	803b      	strh	r3, [r7, #0]
	int i;
	uint8_t element;
	uint8_t LSB_seq;
	uint8_t MSB_seq;
	LSB_seq = sequence & 0xFF;
 8000c48:	883b      	ldrh	r3, [r7, #0]
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	72bb      	strb	r3, [r7, #10]
	MSB_seq = sequence >> 8;
 8000c4e:	883b      	ldrh	r3, [r7, #0]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	727b      	strb	r3, [r7, #9]
	CS_Select();                		 								// set the CS pin to LOW
 8000c58:	f7ff fefc 	bl	8000a54 <CS_Select>
    wait_Miso();                         								// Wait until MISO goes low
 8000c5c:	f7ff ff12 	bl	8000a84 <wait_Miso>
    uint8_t TXfifo = SINGLE_TXFIFO;
 8000c60:	233f      	movs	r3, #63	; 0x3f
 8000c62:	723b      	strb	r3, [r7, #8]
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000c64:	f107 0108 	add.w	r1, r7, #8
 8000c68:	2364      	movs	r3, #100	; 0x64
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	4824      	ldr	r0, [pc, #144]	; (8000d00 <send_data_sequence+0xc8>)
 8000c6e:	f001 fdb1 	bl	80027d4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&length, 1, 100);			   // Send length of data
 8000c72:	1cf9      	adds	r1, r7, #3
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	2201      	movs	r2, #1
 8000c78:	4821      	ldr	r0, [pc, #132]	; (8000d00 <send_data_sequence+0xc8>)
 8000c7a:	f001 fdab 	bl	80027d4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000c7e:	f107 0108 	add.w	r1, r7, #8
 8000c82:	2364      	movs	r3, #100	; 0x64
 8000c84:	2201      	movs	r2, #1
 8000c86:	481e      	ldr	r0, [pc, #120]	; (8000d00 <send_data_sequence+0xc8>)
 8000c88:	f001 fda4 	bl	80027d4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&MSB_seq, 1, 100);			   // Send MSB of sequence number
 8000c8c:	f107 0109 	add.w	r1, r7, #9
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	2201      	movs	r2, #1
 8000c94:	481a      	ldr	r0, [pc, #104]	; (8000d00 <send_data_sequence+0xc8>)
 8000c96:	f001 fd9d 	bl	80027d4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Access the TX_FIFO register
 8000c9a:	f107 0108 	add.w	r1, r7, #8
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	4817      	ldr	r0, [pc, #92]	; (8000d00 <send_data_sequence+0xc8>)
 8000ca4:	f001 fd96 	bl	80027d4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, (uint8_t*)&LSB_seq, 1, 100);			   // Send LSB of sequence number
 8000ca8:	f107 010a 	add.w	r1, r7, #10
 8000cac:	2364      	movs	r3, #100	; 0x64
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <send_data_sequence+0xc8>)
 8000cb2:	f001 fd8f 	bl	80027d4 <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e015      	b.n	8000ce8 <send_data_sequence+0xb0>
        {
          element = databuffer[i];
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	72fb      	strb	r3, [r7, #11]
		  HAL_SPI_Transmit(&hspi3, (uint8_t*)&TXfifo, 1, 100);               // Send the data
 8000cc6:	f107 0108 	add.w	r1, r7, #8
 8000cca:	2364      	movs	r3, #100	; 0x64
 8000ccc:	2201      	movs	r2, #1
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <send_data_sequence+0xc8>)
 8000cd0:	f001 fd80 	bl	80027d4 <HAL_SPI_Transmit>
		  HAL_SPI_Transmit(&hspi3, (uint8_t*)&element, 1, 100);                  // Send data
 8000cd4:	f107 010b 	add.w	r1, r7, #11
 8000cd8:	2364      	movs	r3, #100	; 0x64
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <send_data_sequence+0xc8>)
 8000cde:	f001 fd79 	bl	80027d4 <HAL_SPI_Transmit>
    for (i = 0; i < length-2; ++i)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	3b02      	subs	r3, #2
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbe4      	blt.n	8000cbc <send_data_sequence+0x84>
        }
    CS_Deselect();
 8000cf2:	f7ff febb 	bl	8000a6c <CS_Deselect>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000038 	.word	0x20000038

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	int datalen = 4;   // Set length of payload. Note that the first length byte is not inluded in this.
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	60fb      	str	r3, [r7, #12]
						// However the 2 sequence bytes are included. Max value is 63.
	char data[datalen];
 8000d0e:	68fd      	ldr	r5, [r7, #12]
 8000d10:	1e6b      	subs	r3, r5, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	462b      	mov	r3, r5
 8000d16:	4619      	mov	r1, r3
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	f04f 0400 	mov.w	r4, #0
 8000d24:	00d4      	lsls	r4, r2, #3
 8000d26:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d2a:	00cb      	lsls	r3, r1, #3
 8000d2c:	462b      	mov	r3, r5
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	f04f 0400 	mov.w	r4, #0
 8000d3c:	00d4      	lsls	r4, r2, #3
 8000d3e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000d42:	00cb      	lsls	r3, r1, #3
 8000d44:	462b      	mov	r3, r5
 8000d46:	3307      	adds	r3, #7
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d50:	466b      	mov	r3, sp
 8000d52:	3300      	adds	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]

	uint16_t sequence_number = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	827b      	strh	r3, [r7, #18]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5a:	f000 fc49 	bl	80015f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5e:	f000 f8a1 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d62:	f000 f99b 	bl	800109c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000d66:	f000 f8fb 	bl	8000f60 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000d6a:	f000 f92d 	bl	8000fc8 <MX_CAN2_Init>
  MX_SPI3_Init();
 8000d6e:	f000 f95f 	bl	8001030 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	4846      	ldr	r0, [pc, #280]	; (8000e90 <main+0x18c>)
 8000d78:	f001 f88e 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PA_EN_GPIO_Port, PA_EN_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4844      	ldr	r0, [pc, #272]	; (8000e94 <main+0x190>)
 8000d82:	f001 f889 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(HGM_GPIO_Port, HGM_Pin, GPIO_PIN_RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2140      	movs	r1, #64	; 0x40
 8000d8a:	4842      	ldr	r0, [pc, #264]	; (8000e94 <main+0x190>)
 8000d8c:	f001 f884 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LNA_EN_GPIO_Port, LNA_EN_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	483f      	ldr	r0, [pc, #252]	; (8000e94 <main+0x190>)
 8000d96:	f001 f87f 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da0:	483c      	ldr	r0, [pc, #240]	; (8000e94 <main+0x190>)
 8000da2:	f001 f879 	bl	8001e98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dac:	4839      	ldr	r0, [pc, #228]	; (8000e94 <main+0x190>)
 8000dae:	f001 f873 	bl	8001e98 <HAL_GPIO_WritePin>

  // CC1200_settings
  CC1200_50kbps_settings();
 8000db2:	f7ff fd71 	bl	8000898 <CC1200_50kbps_settings>


  // Create data array
	int i;
	for (i = 0; i < sizeof(data); ++i)
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	e00b      	b.n	8000dd4 <main+0xd0>
	  {
		data[i] = 2 * i;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	b2d9      	uxtb	r1, r3
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	4413      	add	r3, r2
 8000dca:	460a      	mov	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(data); ++i)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	462a      	mov	r2, r5
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8ef      	bhi.n	8000dbc <main+0xb8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (state == 2){
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <main+0x194>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d113      	bne.n	8000e0c <main+0x108>
		  if (prev_state != 2){
 8000de4:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <main+0x198>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d00f      	beq.n	8000e0c <main+0x108>
		  readReg(MARCSTATE);
 8000dec:	f642 7073 	movw	r0, #12147	; 0x2f73
 8000df0:	f7ff fece 	bl	8000b90 <readReg>
		  if (SPI_BUFFER[0] == 22)
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <main+0x19c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2b16      	cmp	r3, #22
 8000dfa:	d102      	bne.n	8000e02 <main+0xfe>
		  {
			  command_strobe1(SFTX);
 8000dfc:	203b      	movs	r0, #59	; 0x3b
 8000dfe:	f7ff fead 	bl	8000b5c <command_strobe1>
		  }
		  sequence_number = 1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	827b      	strh	r3, [r7, #18]
		  prev_state = 2;
 8000e06:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <main+0x198>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	601a      	str	r2, [r3, #0]

	  	  }


	  }
	  if (state == 1){
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <main+0x194>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d139      	bne.n	8000e88 <main+0x184>
		  readReg(MARCSTATE);
 8000e14:	f642 7073 	movw	r0, #12147	; 0x2f73
 8000e18:	f7ff feba 	bl	8000b90 <readReg>
		  if (SPI_BUFFER[0] == 22)
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <main+0x19c>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b16      	cmp	r3, #22
 8000e22:	d102      	bne.n	8000e2a <main+0x126>
		  		  {
		  			  command_strobe1(SFTX);
 8000e24:	203b      	movs	r0, #59	; 0x3b
 8000e26:	f7ff fe99 	bl	8000b5c <command_strobe1>
		  		  }
		  if (prev_state != 1){
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <main+0x198>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d00a      	beq.n	8000e48 <main+0x144>

		  readReg(MARCSTATE);
 8000e32:	f642 7073 	movw	r0, #12147	; 0x2f73
 8000e36:	f7ff feab 	bl	8000b90 <readReg>


		  readReg(NUM_TXBYTES);
 8000e3a:	f642 70d6 	movw	r0, #12246	; 0x2fd6
 8000e3e:	f7ff fea7 	bl	8000b90 <readReg>

		  prev_state = 1;
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <main+0x198>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]
		  }

		  readReg(NUM_TXBYTES);
 8000e48:	f642 70d6 	movw	r0, #12246	; 0x2fd6
 8000e4c:	f7ff fea0 	bl	8000b90 <readReg>
		  if (SPI_BUFFER[0] == 0){
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <main+0x19c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d110      	bne.n	8000e7a <main+0x176>

		  send_data_sequence(data, datalen,sequence_number);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	b2d1      	uxtb	r1, r2
 8000e5e:	8a7a      	ldrh	r2, [r7, #18]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fee9 	bl	8000c38 <send_data_sequence>

		  sequence_number += 1;
 8000e66:	8a7b      	ldrh	r3, [r7, #18]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	827b      	strh	r3, [r7, #18]
		  if (sequence_number > 10000){
 8000e6c:	8a7b      	ldrh	r3, [r7, #18]
 8000e6e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d901      	bls.n	8000e7a <main+0x176>
			  sequence_number = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	827b      	strh	r3, [r7, #18]
		  }
		  }

//		  readReg(TXBYTES, STATUS_REGISTER);

		  readReg(NUM_TXBYTES);
 8000e7a:	f642 70d6 	movw	r0, #12246	; 0x2fd6
 8000e7e:	f7ff fe87 	bl	8000b90 <readReg>
		  command_strobe1(STX);
 8000e82:	2035      	movs	r0, #53	; 0x35
 8000e84:	f7ff fe6a 	bl	8000b5c <command_strobe1>
		  //command_strobe1(SFTX); VAR FÖRSIKTIG!!!!!!!



	  }
	  HAL_Delay(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 fc23 	bl	80016d4 <HAL_Delay>
	  if (state == 2){
 8000e8e:	e7a5      	b.n	8000ddc <main+0xd8>
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40021000 	.word	0x40021000
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	200000e0 	.word	0x200000e0

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	; 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2230      	movs	r2, #48	; 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 f9a2 	bl	80031fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <SystemClock_Config+0xb4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <SystemClock_Config+0xb4>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <SystemClock_Config+0xb4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <SystemClock_Config+0xb8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1b      	ldr	r2, [pc, #108]	; (8000f5c <SystemClock_Config+0xb8>)
 8000eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <SystemClock_Config+0xb8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fff1 	bl	8001efc <HAL_RCC_OscConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f20:	f000 f9d6 	bl	80012d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f24:	230f      	movs	r3, #15
 8000f26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fa4c 	bl	80023dc <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f4a:	f000 f9c1 	bl	80012d0 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <MX_CAN1_Init+0x64>)
 8000f68:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_CAN1_Init+0x60>)
 8000fae:	f000 fbb3 	bl	8001718 <HAL_CAN_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000fb8:	f000 f98a 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200000b8 	.word	0x200000b8
 8000fc4:	40006400 	.word	0x40006400

08000fc8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000fcc:	4b16      	ldr	r3, [pc, #88]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <MX_CAN2_Init+0x64>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fd4:	2210      	movs	r2, #16
 8000fd6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000fea:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_CAN2_Init+0x60>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <MX_CAN2_Init+0x60>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_CAN2_Init+0x60>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <MX_CAN2_Init+0x60>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_CAN2_Init+0x60>)
 8001004:	2200      	movs	r2, #0
 8001006:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <MX_CAN2_Init+0x60>)
 800100a:	2200      	movs	r2, #0
 800100c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_CAN2_Init+0x60>)
 8001010:	2200      	movs	r2, #0
 8001012:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001014:	4804      	ldr	r0, [pc, #16]	; (8001028 <MX_CAN2_Init+0x60>)
 8001016:	f000 fb7f 	bl	8001718 <HAL_CAN_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8001020:	f000 f956 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000090 	.word	0x20000090
 800102c:	40006800 	.word	0x40006800

08001030 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <MX_SPI3_Init+0x64>)
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <MX_SPI3_Init+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103a:	4b16      	ldr	r3, [pc, #88]	; (8001094 <MX_SPI3_Init+0x64>)
 800103c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001040:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_SPI3_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_SPI3_Init+0x64>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_SPI3_Init+0x64>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_SPI3_Init+0x64>)
 8001056:	2200      	movs	r2, #0
 8001058:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_SPI3_Init+0x64>)
 800105c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001060:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_SPI3_Init+0x64>)
 8001064:	2218      	movs	r2, #24
 8001066:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001068:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <MX_SPI3_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800106e:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_SPI3_Init+0x64>)
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <MX_SPI3_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_SPI3_Init+0x64>)
 800107c:	220a      	movs	r2, #10
 800107e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001080:	4804      	ldr	r0, [pc, #16]	; (8001094 <MX_SPI3_Init+0x64>)
 8001082:	f001 fb43 	bl	800270c <HAL_SPI_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800108c:	f000 f920 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000038 	.word	0x20000038
 8001098:	40003c00 	.word	0x40003c00

0800109c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a46      	ldr	r2, [pc, #280]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b44      	ldr	r3, [pc, #272]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <MX_GPIO_Init+0x154>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <MX_GPIO_Init+0x154>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b32      	ldr	r3, [pc, #200]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a31      	ldr	r2, [pc, #196]	; (80011f0 <MX_GPIO_Init+0x154>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b2f      	ldr	r3, [pc, #188]	; (80011f0 <MX_GPIO_Init+0x154>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PA_EN_Pin|HGM_Pin, GPIO_PIN_SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2150      	movs	r1, #80	; 0x50
 8001142:	482c      	ldr	r0, [pc, #176]	; (80011f4 <MX_GPIO_Init+0x158>)
 8001144:	f000 fea8 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LNA_EN_Pin|LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f24c 0120 	movw	r1, #49184	; 0xc020
 800114e:	4829      	ldr	r0, [pc, #164]	; (80011f4 <MX_GPIO_Init+0x158>)
 8001150:	f000 fea2 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HIGH_GPIO_Port, HIGH_Pin, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2140      	movs	r1, #64	; 0x40
 8001158:	4827      	ldr	r0, [pc, #156]	; (80011f8 <MX_GPIO_Init+0x15c>)
 800115a:	f000 fe9d 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4826      	ldr	r0, [pc, #152]	; (80011fc <MX_GPIO_Init+0x160>)
 8001164:	f000 fe98 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA_EN_Pin LNA_EN_Pin HGM_Pin LED_GREEN_Pin 
                           LED_BLUE_Pin */
  GPIO_InitStruct.Pin = PA_EN_Pin|LNA_EN_Pin|HGM_Pin|LED_GREEN_Pin 
 8001168:	f24c 0370 	movw	r3, #49264	; 0xc070
 800116c:	617b      	str	r3, [r7, #20]
                          |LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	481c      	ldr	r0, [pc, #112]	; (80011f4 <MX_GPIO_Init+0x158>)
 8001182:	f000 fcd7 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : HIGH_Pin */
  GPIO_InitStruct.Pin = HIGH_Pin;
 8001186:	2340      	movs	r3, #64	; 0x40
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HIGH_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	4816      	ldr	r0, [pc, #88]	; (80011f8 <MX_GPIO_Init+0x15c>)
 800119e:	f000 fcc9 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_GPIO_Init+0x164>)
 80011a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4810      	ldr	r0, [pc, #64]	; (80011f8 <MX_GPIO_Init+0x15c>)
 80011b6:	f000 fcbd 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80011ba:	2340      	movs	r3, #64	; 0x40
 80011bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <MX_GPIO_Init+0x160>)
 80011d2:	f000 fcaf 	bl	8001b34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2017      	movs	r0, #23
 80011dc:	f000 fc73 	bl	8001ac6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011e0:	2017      	movs	r0, #23
 80011e2:	f000 fc8c 	bl	8001afe <HAL_NVIC_EnableIRQ>

}
 80011e6:	bf00      	nop
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	10110000 	.word	0x10110000

08001204 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == Button_Pin) {
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	2b80      	cmp	r3, #128	; 0x80
 8001212:	d153      	bne.n	80012bc <HAL_GPIO_EXTI_Callback+0xb8>


			if (state == 1){
 8001214:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d13b      	bne.n	8001294 <HAL_GPIO_EXTI_Callback+0x90>

				if (data_mode == DATA_MODE_50kbps){
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d111      	bne.n	8001248 <HAL_GPIO_EXTI_Callback+0x44>
					data_mode = DATA_MODE_250kbps;
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001226:	2202      	movs	r2, #2
 8001228:	601a      	str	r2, [r3, #0]
					CC1200_250kbps_settings();
 800122a:	f7ff f94d 	bl	80004c8 <CC1200_250kbps_settings>
					HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001236:	f000 fe2f 	bl	8001e98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001240:	4822      	ldr	r0, [pc, #136]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001242:	f000 fe29 	bl	8001e98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);


			}
	}
}
 8001246:	e039      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0xb8>
				else if (data_mode == DATA_MODE_250kbps){
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d111      	bne.n	8001274 <HAL_GPIO_EXTI_Callback+0x70>
					data_mode = DATA_MODE_500kbps;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001252:	2203      	movs	r2, #3
 8001254:	601a      	str	r2, [r3, #0]
					CC1200_500kbps_settings();
 8001256:	f7ff fa27 	bl	80006a8 <CC1200_500kbps_settings>
					HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001262:	f000 fe19 	bl	8001e98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8001266:	2201      	movs	r2, #1
 8001268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800126c:	4817      	ldr	r0, [pc, #92]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 800126e:	f000 fe13 	bl	8001e98 <HAL_GPIO_WritePin>
}
 8001272:	e023      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0xb8>
					state = 2;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001276:	2202      	movs	r2, #2
 8001278:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800127a:	2200      	movs	r2, #0
 800127c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001282:	f000 fe09 	bl	8001e98 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800128c:	480f      	ldr	r0, [pc, #60]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 800128e:	f000 fe03 	bl	8001e98 <HAL_GPIO_WritePin>
}
 8001292:	e013      	b.n	80012bc <HAL_GPIO_EXTI_Callback+0xb8>
				state = 1;
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
				data_mode = DATA_MODE_50kbps;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_GPIO_EXTI_Callback+0xc4>)
 800129c:	2201      	movs	r2, #1
 800129e:	601a      	str	r2, [r3, #0]
				CC1200_50kbps_settings();
 80012a0:	f7ff fafa 	bl	8000898 <CC1200_50kbps_settings>
				HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 80012ac:	f000 fdf4 	bl	8001e98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_GPIO_EXTI_Callback+0xc8>)
 80012b8:	f000 fdee 	bl	8001e98 <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	40021000 	.word	0x40021000

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a43      	ldr	r2, [pc, #268]	; (800145c <HAL_CAN_MspInit+0x12c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d136      	bne.n	80013c0 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001352:	4b43      	ldr	r3, [pc, #268]	; (8001460 <HAL_CAN_MspInit+0x130>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a41      	ldr	r2, [pc, #260]	; (8001460 <HAL_CAN_MspInit+0x130>)
 800135a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800135c:	4b40      	ldr	r3, [pc, #256]	; (8001460 <HAL_CAN_MspInit+0x130>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10d      	bne.n	8001380 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
 8001368:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <HAL_CAN_MspInit+0x134>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	4a3d      	ldr	r2, [pc, #244]	; (8001464 <HAL_CAN_MspInit+0x134>)
 800136e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001372:	6413      	str	r3, [r2, #64]	; 0x40
 8001374:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_CAN_MspInit+0x134>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	61bb      	str	r3, [r7, #24]
 800137e:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	4b37      	ldr	r3, [pc, #220]	; (8001464 <HAL_CAN_MspInit+0x134>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a36      	ldr	r2, [pc, #216]	; (8001464 <HAL_CAN_MspInit+0x134>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b34      	ldr	r3, [pc, #208]	; (8001464 <HAL_CAN_MspInit+0x134>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800139c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013ae:	2309      	movs	r3, #9
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	482b      	ldr	r0, [pc, #172]	; (8001468 <HAL_CAN_MspInit+0x138>)
 80013ba:	f000 fbbb 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80013be:	e048      	b.n	8001452 <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a29      	ldr	r2, [pc, #164]	; (800146c <HAL_CAN_MspInit+0x13c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d143      	bne.n	8001452 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <HAL_CAN_MspInit+0x134>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <HAL_CAN_MspInit+0x134>)
 80013d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <HAL_CAN_MspInit+0x134>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80013e6:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_CAN_MspInit+0x130>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <HAL_CAN_MspInit+0x130>)
 80013ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_CAN_MspInit+0x130>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10d      	bne.n	8001414 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_CAN_MspInit+0x134>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_CAN_MspInit+0x134>)
 8001402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_CAN_MspInit+0x134>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_CAN_MspInit+0x134>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a11      	ldr	r2, [pc, #68]	; (8001464 <HAL_CAN_MspInit+0x134>)
 800141e:	f043 0302 	orr.w	r3, r3, #2
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_CAN_MspInit+0x134>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001430:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001442:	2309      	movs	r3, #9
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <HAL_CAN_MspInit+0x140>)
 800144e:	f000 fb71 	bl	8001b34 <HAL_GPIO_Init>
}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	; 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40006400 	.word	0x40006400
 8001460:	20000034 	.word	0x20000034
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40006800 	.word	0x40006800
 8001470:	40020400 	.word	0x40020400

08001474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_SPI_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12c      	bne.n	80014f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_SPI_MspInit+0x88>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80014ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d4:	2302      	movs	r3, #2
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014e0:	2306      	movs	r3, #6
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_SPI_MspInit+0x8c>)
 80014ec:	f000 fb22 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	; 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40003c00 	.word	0x40003c00
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020800 	.word	0x40020800

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <HardFault_Handler+0x4>

08001518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <MemManage_Handler+0x4>

0800151e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <UsageFault_Handler+0x4>

0800152a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f89c 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001564:	2080      	movs	r0, #128	; 0x80
 8001566:	f000 fcb1 	bl	8001ecc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <SystemInit+0x28>)
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <SystemInit+0x28>)
 800157c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001580:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SystemInit+0x28>)
 8001586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158a:	609a      	str	r2, [r3, #8]
#endif
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800159c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015a2:	e003      	b.n	80015ac <LoopCopyDataInit>

080015a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015aa:	3104      	adds	r1, #4

080015ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015ac:	480b      	ldr	r0, [pc, #44]	; (80015dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015ae:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015b4:	d3f6      	bcc.n	80015a4 <CopyDataInit>
  ldr  r2, =_sbss
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015b8:	e002      	b.n	80015c0 <LoopFillZerobss>

080015ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015bc:	f842 3b04 	str.w	r3, [r2], #4

080015c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015c4:	d3f9      	bcc.n	80015ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015c6:	f7ff ffd3 	bl	8001570 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f001 fdf3 	bl	80031b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ce:	f7ff fb99 	bl	8000d04 <main>
  bx  lr    
 80015d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015d8:	08003244 	.word	0x08003244
  ldr  r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015e0:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80015e4:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80015e8:	200000ec 	.word	0x200000ec

080015ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <HAL_Init+0x40>)
 80015fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_Init+0x40>)
 8001606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_Init+0x40>)
 8001612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001618:	2003      	movs	r0, #3
 800161a:	f000 fa49 	bl	8001ab0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 f808 	bl	8001634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fe5c 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023c00 	.word	0x40023c00

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x54>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_InitTick+0x58>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	4619      	mov	r1, r3
 8001646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164a:	fbb3 f3f1 	udiv	r3, r3, r1
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fa61 	bl	8001b1a <HAL_SYSTICK_Config>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e00e      	b.n	8001680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b0f      	cmp	r3, #15
 8001666:	d80a      	bhi.n	800167e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001668:	2200      	movs	r2, #0
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	f04f 30ff 	mov.w	r0, #4294967295
 8001670:	f000 fa29 	bl	8001ac6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <HAL_InitTick+0x5c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000000c 	.word	0x2000000c
 800168c:	20000014 	.word	0x20000014
 8001690:	20000010 	.word	0x20000010

08001694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x20>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_IncTick+0x24>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4413      	add	r3, r2
 80016a4:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <HAL_IncTick+0x24>)
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000014 	.word	0x20000014
 80016b8:	200000e8 	.word	0x200000e8

080016bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return uwTick;
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_GetTick+0x14>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	200000e8 	.word	0x200000e8

080016d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff ffee 	bl	80016bc <HAL_GetTick>
 80016e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ec:	d005      	beq.n	80016fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_Delay+0x40>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	461a      	mov	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016fa:	bf00      	nop
 80016fc:	f7ff ffde 	bl	80016bc <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d8f7      	bhi.n	80016fc <HAL_Delay+0x28>
  {
  }
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000014 	.word	0x20000014

08001718 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e0ed      	b.n	8001906 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fdfa 	bl	8001330 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f022 0202 	bic.w	r2, r2, #2
 800174a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800174c:	f7ff ffb6 	bl	80016bc <HAL_GetTick>
 8001750:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001752:	e012      	b.n	800177a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001754:	f7ff ffb2 	bl	80016bc <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b0a      	cmp	r3, #10
 8001760:	d90b      	bls.n	800177a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2205      	movs	r2, #5
 8001772:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0c5      	b.n	8001906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e5      	bne.n	8001754 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001798:	f7ff ff90 	bl	80016bc <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800179e:	e012      	b.n	80017c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a0:	f7ff ff8c 	bl	80016bc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d90b      	bls.n	80017c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2205      	movs	r2, #5
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e09f      	b.n	8001906 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0e5      	beq.n	80017a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7e1b      	ldrb	r3, [r3, #24]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d108      	bne.n	80017ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	e007      	b.n	80017fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	7e5b      	ldrb	r3, [r3, #25]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d108      	bne.n	8001818 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e007      	b.n	8001828 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001826:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e9b      	ldrb	r3, [r3, #26]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d108      	bne.n	8001842 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0220 	orr.w	r2, r2, #32
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e007      	b.n	8001852 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0220 	bic.w	r2, r2, #32
 8001850:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7edb      	ldrb	r3, [r3, #27]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0210 	bic.w	r2, r2, #16
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e007      	b.n	800187c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0210 	orr.w	r2, r2, #16
 800187a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7f1b      	ldrb	r3, [r3, #28]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d108      	bne.n	8001896 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0208 	orr.w	r2, r2, #8
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e007      	b.n	80018a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0208 	bic.w	r2, r2, #8
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7f5b      	ldrb	r3, [r3, #29]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d108      	bne.n	80018c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0204 	orr.w	r2, r2, #4
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e007      	b.n	80018d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	ea42 0103 	orr.w	r1, r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	; (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	; (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	; (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	; 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
	...

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a7c:	d301      	bcc.n	8001a82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e00f      	b.n	8001aa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <SysTick_Config+0x40>)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8a:	210f      	movs	r1, #15
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f7ff ff8e 	bl	80019b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Config+0x40>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9a:	4b04      	ldr	r3, [pc, #16]	; (8001aac <SysTick_Config+0x40>)
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff ff29 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b086      	sub	sp, #24
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad8:	f7ff ff3e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001adc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	6978      	ldr	r0, [r7, #20]
 8001ae4:	f7ff ff8e 	bl	8001a04 <NVIC_EncodePriority>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff5d 	bl	80019b0 <__NVIC_SetPriority>
}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff31 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffa2 	bl	8001a6c <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e16b      	b.n	8001e28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 815a 	bne.w	8001e22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d00b      	beq.n	8001b8e <HAL_GPIO_Init+0x5a>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b82:	2b11      	cmp	r3, #17
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b12      	cmp	r3, #18
 8001b8c:	d130      	bne.n	8001bf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	2203      	movs	r2, #3
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0201 	and.w	r2, r3, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0xfc>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b12      	cmp	r3, #18
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80b4 	beq.w	8001e22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b5f      	ldr	r3, [pc, #380]	; (8001e3c <HAL_GPIO_Init+0x308>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a5e      	ldr	r2, [pc, #376]	; (8001e3c <HAL_GPIO_Init+0x308>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <HAL_GPIO_Init+0x308>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <HAL_GPIO_Init+0x310>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d02b      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a50      	ldr	r2, [pc, #320]	; (8001e48 <HAL_GPIO_Init+0x314>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d025      	beq.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_GPIO_Init+0x318>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d01f      	beq.n	8001d52 <HAL_GPIO_Init+0x21e>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <HAL_GPIO_Init+0x31c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x216>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	; (8001e5c <HAL_GPIO_Init+0x328>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x20e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x20a>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00e      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d3e:	2308      	movs	r3, #8
 8001d40:	e00c      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00a      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x228>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	f002 0203 	and.w	r2, r2, #3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6c:	4934      	ldr	r1, [pc, #208]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dc8:	4a26      	ldr	r2, [pc, #152]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e1c:	4a11      	ldr	r2, [pc, #68]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3301      	adds	r3, #1
 8001e26:	61fb      	str	r3, [r7, #28]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	f67f ae90 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e30:	bf00      	nop
 8001e32:	3724      	adds	r7, #36	; 0x24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40021c00 	.word	0x40021c00
 8001e64:	40013c00 	.word	0x40013c00

08001e68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	887b      	ldrh	r3, [r7, #2]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	73fb      	strb	r3, [r7, #15]
 8001e84:	e001      	b.n	8001e8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	4013      	ands	r3, r2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f98a 	bl	8001204 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40013c00 	.word	0x40013c00

08001efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e25b      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d075      	beq.n	8002006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1a:	4ba3      	ldr	r3, [pc, #652]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4ba0      	ldr	r3, [pc, #640]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b9d      	ldr	r3, [pc, #628]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b99      	ldr	r3, [pc, #612]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d05b      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d157      	bne.n	8002004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e236      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0x74>
 8001f62:	4b91      	ldr	r3, [pc, #580]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a90      	ldr	r2, [pc, #576]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	e01d      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f78:	d10c      	bne.n	8001f94 <HAL_RCC_OscConfig+0x98>
 8001f7a:	4b8b      	ldr	r3, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a8a      	ldr	r2, [pc, #552]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a87      	ldr	r2, [pc, #540]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	e00b      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
 8001f94:	4b84      	ldr	r3, [pc, #528]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a83      	ldr	r2, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	4b81      	ldr	r3, [pc, #516]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a80      	ldr	r2, [pc, #512]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d013      	beq.n	8001fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fb82 	bl	80016bc <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fb7e 	bl	80016bc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	; 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1fb      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0xc0>
 8001fda:	e014      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fb6e 	bl	80016bc <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fb6a 	bl	80016bc <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e1e7      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xe8>
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002012:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00b      	beq.n	8002036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800201e:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002026:	2b08      	cmp	r3, #8
 8002028:	d11c      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	4b5c      	ldr	r3, [pc, #368]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d001      	beq.n	800204e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e1bb      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204e:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	4952      	ldr	r1, [pc, #328]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e03a      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d020      	beq.n	80020ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800206c:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_OscConfig+0x2b0>)
 800206e:	2201      	movs	r2, #1
 8002070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002072:	f7ff fb23 	bl	80016bc <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207a:	f7ff fb1f 	bl	80016bc <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e19c      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	4b46      	ldr	r3, [pc, #280]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002098:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4940      	ldr	r1, [pc, #256]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]
 80020ac:	e015      	b.n	80020da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ae:	4b3f      	ldr	r3, [pc, #252]	; (80021ac <HAL_RCC_OscConfig+0x2b0>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7ff fb02 	bl	80016bc <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020bc:	f7ff fafe 	bl	80016bc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e17b      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	4b36      	ldr	r3, [pc, #216]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d030      	beq.n	8002148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d016      	beq.n	800211c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ee:	4b30      	ldr	r3, [pc, #192]	; (80021b0 <HAL_RCC_OscConfig+0x2b4>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7ff fae2 	bl	80016bc <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fc:	f7ff fade 	bl	80016bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e15b      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0f0      	beq.n	80020fc <HAL_RCC_OscConfig+0x200>
 800211a:	e015      	b.n	8002148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_OscConfig+0x2b4>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7ff facb 	bl	80016bc <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212a:	f7ff fac7 	bl	80016bc <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e144      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800213e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a0 	beq.w	8002296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10f      	bne.n	8002186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_RCC_OscConfig+0x2ac>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	2301      	movs	r3, #1
 8002184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x2b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d121      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x2b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <HAL_RCC_OscConfig+0x2b8>)
 8002198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219e:	f7ff fa8d 	bl	80016bc <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a4:	e011      	b.n	80021ca <HAL_RCC_OscConfig+0x2ce>
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470000 	.word	0x42470000
 80021b0:	42470e80 	.word	0x42470e80
 80021b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7ff fa80 	bl	80016bc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0fd      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b81      	ldr	r3, [pc, #516]	; (80023d0 <HAL_RCC_OscConfig+0x4d4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x2f0>
 80021de:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a7c      	ldr	r2, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	e01c      	b.n	8002226 <HAL_RCC_OscConfig+0x32a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2b05      	cmp	r3, #5
 80021f2:	d10c      	bne.n	800220e <HAL_RCC_OscConfig+0x312>
 80021f4:	4b77      	ldr	r3, [pc, #476]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f8:	4a76      	ldr	r2, [pc, #472]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	f043 0304 	orr.w	r3, r3, #4
 80021fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002200:	4b74      	ldr	r3, [pc, #464]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a73      	ldr	r2, [pc, #460]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	e00b      	b.n	8002226 <HAL_RCC_OscConfig+0x32a>
 800220e:	4b71      	ldr	r3, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
 800221a:	4b6e      	ldr	r3, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a6d      	ldr	r2, [pc, #436]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002220:	f023 0304 	bic.w	r3, r3, #4
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d015      	beq.n	800225a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7ff fa45 	bl	80016bc <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fa41 	bl	80016bc <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0bc      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ee      	beq.n	8002236 <HAL_RCC_OscConfig+0x33a>
 8002258:	e014      	b.n	8002284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225a:	f7ff fa2f 	bl	80016bc <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002262:	f7ff fa2b 	bl	80016bc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002270:	4293      	cmp	r3, r2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0a6      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002278:	4b56      	ldr	r3, [pc, #344]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ee      	bne.n	8002262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d105      	bne.n	8002296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228a:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	4a51      	ldr	r2, [pc, #324]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8092 	beq.w	80023c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a0:	4b4c      	ldr	r3, [pc, #304]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d05c      	beq.n	8002366 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d141      	bne.n	8002338 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <HAL_RCC_OscConfig+0x4dc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff f9ff 	bl	80016bc <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff f9fb 	bl	80016bc <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e078      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d4:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69da      	ldr	r2, [r3, #28]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	019b      	lsls	r3, r3, #6
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	3b01      	subs	r3, #1
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	4933      	ldr	r1, [pc, #204]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230a:	4b33      	ldr	r3, [pc, #204]	; (80023d8 <HAL_RCC_OscConfig+0x4dc>)
 800230c:	2201      	movs	r2, #1
 800230e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff f9d4 	bl	80016bc <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7ff f9d0 	bl	80016bc <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e04d      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232a:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x41c>
 8002336:	e045      	b.n	80023c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_OscConfig+0x4dc>)
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff f9bd 	bl	80016bc <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002346:	f7ff f9b9 	bl	80016bc <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e036      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002358:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0x44a>
 8002364:	e02e      	b.n	80023c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e029      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_RCC_OscConfig+0x4d8>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	429a      	cmp	r2, r3
 8002384:	d11c      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d115      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800239a:	4013      	ands	r3, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d10d      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3718      	adds	r7, #24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40007000 	.word	0x40007000
 80023d4:	40023800 	.word	0x40023800
 80023d8:	42470060 	.word	0x42470060

080023dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cc      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023f0:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 030f 	and.w	r3, r3, #15
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d90c      	bls.n	8002418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b65      	ldr	r3, [pc, #404]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b8      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d020      	beq.n	8002466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800243a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	4a52      	ldr	r2, [pc, #328]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	494d      	ldr	r1, [pc, #308]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d044      	beq.n	80024fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d119      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e07f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d003      	beq.n	800249a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002496:	2b03      	cmp	r3, #3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800249a:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e067      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4934      	ldr	r1, [pc, #208]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024cc:	f7ff f8f6 	bl	80016bc <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d4:	f7ff f8f2 	bl	80016bc <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e04f      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 020c 	and.w	r2, r3, #12
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d1eb      	bne.n	80024d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fc:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 030f 	and.w	r3, r3, #15
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d20c      	bcs.n	8002524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_RCC_ClockConfig+0x1b8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e032      	b.n	800258a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0304 	and.w	r3, r3, #4
 800252c:	2b00      	cmp	r3, #0
 800252e:	d008      	beq.n	8002542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4916      	ldr	r1, [pc, #88]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	490e      	ldr	r1, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002562:	f000 f821 	bl	80025a8 <HAL_RCC_GetSysClockFreq>
 8002566:	4601      	mov	r1, r0
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	fa21 f303 	lsr.w	r3, r1, r3
 800257a:	4a09      	ldr	r2, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f856 	bl	8001634 <HAL_InitTick>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00
 8002598:	40023800 	.word	0x40023800
 800259c:	08003224 	.word	0x08003224
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	20000010 	.word	0x20000010

080025a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	2300      	movs	r3, #0
 80025b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025be:	4b50      	ldr	r3, [pc, #320]	; (8002700 <HAL_RCC_GetSysClockFreq+0x158>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b04      	cmp	r3, #4
 80025c8:	d007      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x32>
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d008      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x38>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 808d 	bne.w	80026ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d4:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80025d6:	60bb      	str	r3, [r7, #8]
       break;
 80025d8:	e08c      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025da:	4b4b      	ldr	r3, [pc, #300]	; (8002708 <HAL_RCC_GetSysClockFreq+0x160>)
 80025dc:	60bb      	str	r3, [r7, #8]
      break;
 80025de:	e089      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e0:	4b47      	ldr	r3, [pc, #284]	; (8002700 <HAL_RCC_GetSysClockFreq+0x158>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ea:	4b45      	ldr	r3, [pc, #276]	; (8002700 <HAL_RCC_GetSysClockFreq+0x158>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d023      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b42      	ldr	r3, [pc, #264]	; (8002700 <HAL_RCC_GetSysClockFreq+0x158>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	f04f 0400 	mov.w	r4, #0
 8002600:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	ea03 0501 	and.w	r5, r3, r1
 800260c:	ea04 0602 	and.w	r6, r4, r2
 8002610:	4a3d      	ldr	r2, [pc, #244]	; (8002708 <HAL_RCC_GetSysClockFreq+0x160>)
 8002612:	fb02 f106 	mul.w	r1, r2, r6
 8002616:	2200      	movs	r2, #0
 8002618:	fb02 f205 	mul.w	r2, r2, r5
 800261c:	440a      	add	r2, r1
 800261e:	493a      	ldr	r1, [pc, #232]	; (8002708 <HAL_RCC_GetSysClockFreq+0x160>)
 8002620:	fba5 0101 	umull	r0, r1, r5, r1
 8002624:	1853      	adds	r3, r2, r1
 8002626:	4619      	mov	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f04f 0400 	mov.w	r4, #0
 800262e:	461a      	mov	r2, r3
 8002630:	4623      	mov	r3, r4
 8002632:	f7fd fdc9 	bl	80001c8 <__aeabi_uldivmod>
 8002636:	4603      	mov	r3, r0
 8002638:	460c      	mov	r4, r1
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e049      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b30      	ldr	r3, [pc, #192]	; (8002700 <HAL_RCC_GetSysClockFreq+0x158>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	f04f 0400 	mov.w	r4, #0
 8002648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	ea03 0501 	and.w	r5, r3, r1
 8002654:	ea04 0602 	and.w	r6, r4, r2
 8002658:	4629      	mov	r1, r5
 800265a:	4632      	mov	r2, r6
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	0154      	lsls	r4, r2, #5
 8002666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800266a:	014b      	lsls	r3, r1, #5
 800266c:	4619      	mov	r1, r3
 800266e:	4622      	mov	r2, r4
 8002670:	1b49      	subs	r1, r1, r5
 8002672:	eb62 0206 	sbc.w	r2, r2, r6
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f04f 0400 	mov.w	r4, #0
 800267e:	0194      	lsls	r4, r2, #6
 8002680:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002684:	018b      	lsls	r3, r1, #6
 8002686:	1a5b      	subs	r3, r3, r1
 8002688:	eb64 0402 	sbc.w	r4, r4, r2
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	00e2      	lsls	r2, r4, #3
 8002696:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800269a:	00d9      	lsls	r1, r3, #3
 800269c:	460b      	mov	r3, r1
 800269e:	4614      	mov	r4, r2
 80026a0:	195b      	adds	r3, r3, r5
 80026a2:	eb44 0406 	adc.w	r4, r4, r6
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	02a2      	lsls	r2, r4, #10
 80026b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026b4:	0299      	lsls	r1, r3, #10
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	4621      	mov	r1, r4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	f7fd fd7e 	bl	80001c8 <__aeabi_uldivmod>
 80026cc:	4603      	mov	r3, r0
 80026ce:	460c      	mov	r4, r1
 80026d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <HAL_RCC_GetSysClockFreq+0x158>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0c1b      	lsrs	r3, r3, #16
 80026d8:	f003 0303 	and.w	r3, r3, #3
 80026dc:	3301      	adds	r3, #1
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	60bb      	str	r3, [r7, #8]
      break;
 80026ec:	e002      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80026f0:	60bb      	str	r3, [r7, #8]
      break;
 80026f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026f4:	68bb      	ldr	r3, [r7, #8]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400
 8002708:	017d7840 	.word	0x017d7840

0800270c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e056      	b.n	80027cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fe fe9b 	bl	8001474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002754:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	ea42 0103 	orr.w	r1, r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	0c1b      	lsrs	r3, r3, #16
 800279c:	f003 0104 	and.w	r1, r3, #4
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	603b      	str	r3, [r7, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_SPI_Transmit+0x22>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e11e      	b.n	8002a34 <HAL_SPI_Transmit+0x260>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027fe:	f7fe ff5d 	bl	80016bc <HAL_GetTick>
 8002802:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002804:	88fb      	ldrh	r3, [r7, #6]
 8002806:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d002      	beq.n	800281a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002818:	e103      	b.n	8002a22 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d002      	beq.n	8002826 <HAL_SPI_Transmit+0x52>
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d102      	bne.n	800282c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	77fb      	strb	r3, [r7, #31]
    goto error;
 800282a:	e0fa      	b.n	8002a22 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2203      	movs	r2, #3
 8002830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	88fa      	ldrh	r2, [r7, #6]
 8002844:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	88fa      	ldrh	r2, [r7, #6]
 800284a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002872:	d107      	bne.n	8002884 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002882:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d007      	beq.n	80028a2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028aa:	d14b      	bne.n	8002944 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_SPI_Transmit+0xe6>
 80028b4:	8afb      	ldrh	r3, [r7, #22]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d13e      	bne.n	8002938 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	1c9a      	adds	r2, r3, #2
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80028de:	e02b      	b.n	8002938 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d112      	bne.n	8002914 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	881a      	ldrh	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	1c9a      	adds	r2, r3, #2
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002908:	b29b      	uxth	r3, r3
 800290a:	3b01      	subs	r3, #1
 800290c:	b29a      	uxth	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	86da      	strh	r2, [r3, #54]	; 0x36
 8002912:	e011      	b.n	8002938 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002914:	f7fe fed2 	bl	80016bc <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d803      	bhi.n	800292c <HAL_SPI_Transmit+0x158>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d102      	bne.n	8002932 <HAL_SPI_Transmit+0x15e>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002936:	e074      	b.n	8002a22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1ce      	bne.n	80028e0 <HAL_SPI_Transmit+0x10c>
 8002942:	e04c      	b.n	80029de <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_SPI_Transmit+0x17e>
 800294c:	8afb      	ldrh	r3, [r7, #22]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d140      	bne.n	80029d4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	330c      	adds	r3, #12
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002978:	e02c      	b.n	80029d4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d113      	bne.n	80029b0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	7812      	ldrb	r2, [r2, #0]
 8002994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	86da      	strh	r2, [r3, #54]	; 0x36
 80029ae:	e011      	b.n	80029d4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029b0:	f7fe fe84 	bl	80016bc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d803      	bhi.n	80029c8 <HAL_SPI_Transmit+0x1f4>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c6:	d102      	bne.n	80029ce <HAL_SPI_Transmit+0x1fa>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029d2:	e026      	b.n	8002a22 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1cd      	bne.n	800297a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 fba4 	bl	8003130 <SPI_EndRxTxTransaction>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2220      	movs	r2, #32
 80029f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	77fb      	strb	r3, [r7, #31]
 8002a1e:	e000      	b.n	8002a22 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002a20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002a32:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a58:	d112      	bne.n	8002a80 <HAL_SPI_Receive+0x44>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10e      	bne.n	8002a80 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2204      	movs	r2, #4
 8002a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a6a:	88fa      	ldrh	r2, [r7, #6]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f8e9 	bl	8002c4e <HAL_SPI_TransmitReceive>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	e0e2      	b.n	8002c46 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_SPI_Receive+0x52>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0db      	b.n	8002c46 <HAL_SPI_Receive+0x20a>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a96:	f7fe fe11 	bl	80016bc <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d002      	beq.n	8002aae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aac:	e0c2      	b.n	8002c34 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d002      	beq.n	8002aba <HAL_SPI_Receive+0x7e>
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d102      	bne.n	8002ac0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002abe:	e0b9      	b.n	8002c34 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	88fa      	ldrh	r2, [r7, #6]
 8002ad8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	88fa      	ldrh	r2, [r7, #6]
 8002ade:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b06:	d107      	bne.n	8002b18 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d007      	beq.n	8002b36 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d162      	bne.n	8002c04 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b3e:	e02e      	b.n	8002b9e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d115      	bne.n	8002b7a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f103 020c 	add.w	r2, r3, #12
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	b2d2      	uxtb	r2, r2
 8002b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b78:	e011      	b.n	8002b9e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b7a:	f7fe fd9f 	bl	80016bc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d803      	bhi.n	8002b92 <HAL_SPI_Receive+0x156>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d102      	bne.n	8002b98 <HAL_SPI_Receive+0x15c>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b9c:	e04a      	b.n	8002c34 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1cb      	bne.n	8002b40 <HAL_SPI_Receive+0x104>
 8002ba8:	e031      	b.n	8002c0e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d113      	bne.n	8002be0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bca:	1c9a      	adds	r2, r3, #2
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bde:	e011      	b.n	8002c04 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be0:	f7fe fd6c 	bl	80016bc <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d803      	bhi.n	8002bf8 <HAL_SPI_Receive+0x1bc>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf6:	d102      	bne.n	8002bfe <HAL_SPI_Receive+0x1c2>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c02:	e017      	b.n	8002c34 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1cd      	bne.n	8002baa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	6839      	ldr	r1, [r7, #0]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fa27 	bl	8003066 <SPI_EndRxTransaction>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	75fb      	strb	r3, [r7, #23]
 8002c30:	e000      	b.n	8002c34 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002c32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b08c      	sub	sp, #48	; 0x30
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_SPI_TransmitReceive+0x26>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e18a      	b.n	8002f8a <HAL_SPI_TransmitReceive+0x33c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c7c:	f7fe fd1e 	bl	80016bc <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d00f      	beq.n	8002cbe <HAL_SPI_TransmitReceive+0x70>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca4:	d107      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d103      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x68>
 8002cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d003      	beq.n	8002cbe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cbc:	e15b      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x82>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x82>
 8002cca:	887b      	ldrh	r3, [r7, #2]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d103      	bne.n	8002cd8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002cd6:	e14e      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d003      	beq.n	8002cec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2205      	movs	r2, #5
 8002ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	887a      	ldrh	r2, [r7, #2]
 8002d02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	887a      	ldrh	r2, [r7, #2]
 8002d0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d007      	beq.n	8002d40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d48:	d178      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <HAL_SPI_TransmitReceive+0x10a>
 8002d52:	8b7b      	ldrh	r3, [r7, #26]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d166      	bne.n	8002e26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	881a      	ldrh	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	1c9a      	adds	r2, r3, #2
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d7c:	e053      	b.n	8002e26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x176>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_SPI_TransmitReceive+0x176>
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d113      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	881a      	ldrh	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	1c9a      	adds	r2, r3, #2
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d119      	bne.n	8002e06 <HAL_SPI_TransmitReceive+0x1b8>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d014      	beq.n	8002e06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	b292      	uxth	r2, r2
 8002de8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	1c9a      	adds	r2, r3, #2
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e02:	2301      	movs	r3, #1
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e06:	f7fe fc59 	bl	80016bc <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d807      	bhi.n	8002e26 <HAL_SPI_TransmitReceive+0x1d8>
 8002e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d003      	beq.n	8002e26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002e24:	e0a7      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1a6      	bne.n	8002d7e <HAL_SPI_TransmitReceive+0x130>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1a1      	bne.n	8002d7e <HAL_SPI_TransmitReceive+0x130>
 8002e3a:	e07c      	b.n	8002f36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_SPI_TransmitReceive+0x1fc>
 8002e44:	8b7b      	ldrh	r3, [r7, #26]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d16b      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	7812      	ldrb	r2, [r2, #0]
 8002e56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	1c5a      	adds	r2, r3, #1
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e70:	e057      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d11c      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x26c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d017      	beq.n	8002eba <HAL_SPI_TransmitReceive+0x26c>
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d114      	bne.n	8002eba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	7812      	ldrb	r2, [r2, #0]
 8002e9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d119      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x2ae>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d014      	beq.n	8002efc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002efc:	f7fe fbde 	bl	80016bc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d803      	bhi.n	8002f14 <HAL_SPI_TransmitReceive+0x2c6>
 8002f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d102      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x2cc>
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002f20:	e029      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1a2      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x224>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d19d      	bne.n	8002e72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f8f8 	bl	8003130 <SPI_EndRxTxTransaction>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002f52:	e010      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	e000      	b.n	8002f76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002f74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fa2:	e04c      	b.n	800303e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d048      	beq.n	800303e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002fac:	f7fe fb86 	bl	80016bc <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d902      	bls.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d13d      	bne.n	800303e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fda:	d111      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fe4:	d004      	beq.n	8002ff0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fee:	d107      	bne.n	8003000 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003008:	d10f      	bne.n	800302a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003028:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e00f      	b.n	800305e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4013      	ands	r3, r2
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	bf0c      	ite	eq
 800304e:	2301      	moveq	r3, #1
 8003050:	2300      	movne	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	429a      	cmp	r2, r3
 800305a:	d1a3      	bne.n	8002fa4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af02      	add	r7, sp, #8
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307a:	d111      	bne.n	80030a0 <SPI_EndRxTransaction+0x3a>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003084:	d004      	beq.n	8003090 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308e:	d107      	bne.n	80030a0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030a8:	d12a      	bne.n	8003100 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b2:	d012      	beq.n	80030da <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff ff67 	bl	8002f92 <SPI_WaitFlagStateUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d02d      	beq.n	8003126 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e026      	b.n	8003128 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2101      	movs	r1, #1
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f7ff ff54 	bl	8002f92 <SPI_WaitFlagStateUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01a      	beq.n	8003126 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e013      	b.n	8003128 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2200      	movs	r2, #0
 8003108:	2101      	movs	r1, #1
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff ff41 	bl	8002f92 <SPI_WaitFlagStateUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e000      	b.n	8003128 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <SPI_EndRxTxTransaction+0x7c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <SPI_EndRxTxTransaction+0x80>)
 8003142:	fba2 2303 	umull	r2, r3, r2, r3
 8003146:	0d5b      	lsrs	r3, r3, #21
 8003148:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800315a:	d112      	bne.n	8003182 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2200      	movs	r2, #0
 8003164:	2180      	movs	r1, #128	; 0x80
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff ff13 	bl	8002f92 <SPI_WaitFlagStateUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d016      	beq.n	80031a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003176:	f043 0220 	orr.w	r2, r3, #32
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e00f      	b.n	80031a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3b01      	subs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b80      	cmp	r3, #128	; 0x80
 800319a:	d0f2      	beq.n	8003182 <SPI_EndRxTxTransaction+0x52>
 800319c:	e000      	b.n	80031a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800319e:	bf00      	nop
  }

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000000c 	.word	0x2000000c
 80031b0:	165e9f81 	.word	0x165e9f81

080031b4 <__libc_init_array>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4e0d      	ldr	r6, [pc, #52]	; (80031ec <__libc_init_array+0x38>)
 80031b8:	4c0d      	ldr	r4, [pc, #52]	; (80031f0 <__libc_init_array+0x3c>)
 80031ba:	1ba4      	subs	r4, r4, r6
 80031bc:	10a4      	asrs	r4, r4, #2
 80031be:	2500      	movs	r5, #0
 80031c0:	42a5      	cmp	r5, r4
 80031c2:	d109      	bne.n	80031d8 <__libc_init_array+0x24>
 80031c4:	4e0b      	ldr	r6, [pc, #44]	; (80031f4 <__libc_init_array+0x40>)
 80031c6:	4c0c      	ldr	r4, [pc, #48]	; (80031f8 <__libc_init_array+0x44>)
 80031c8:	f000 f820 	bl	800320c <_init>
 80031cc:	1ba4      	subs	r4, r4, r6
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	2500      	movs	r5, #0
 80031d2:	42a5      	cmp	r5, r4
 80031d4:	d105      	bne.n	80031e2 <__libc_init_array+0x2e>
 80031d6:	bd70      	pop	{r4, r5, r6, pc}
 80031d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031dc:	4798      	blx	r3
 80031de:	3501      	adds	r5, #1
 80031e0:	e7ee      	b.n	80031c0 <__libc_init_array+0xc>
 80031e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031e6:	4798      	blx	r3
 80031e8:	3501      	adds	r5, #1
 80031ea:	e7f2      	b.n	80031d2 <__libc_init_array+0x1e>
 80031ec:	0800323c 	.word	0x0800323c
 80031f0:	0800323c 	.word	0x0800323c
 80031f4:	0800323c 	.word	0x0800323c
 80031f8:	08003240 	.word	0x08003240

080031fc <memset>:
 80031fc:	4402      	add	r2, r0
 80031fe:	4603      	mov	r3, r0
 8003200:	4293      	cmp	r3, r2
 8003202:	d100      	bne.n	8003206 <memset+0xa>
 8003204:	4770      	bx	lr
 8003206:	f803 1b01 	strb.w	r1, [r3], #1
 800320a:	e7f9      	b.n	8003200 <memset+0x4>

0800320c <_init>:
 800320c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320e:	bf00      	nop
 8003210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003212:	bc08      	pop	{r3}
 8003214:	469e      	mov	lr, r3
 8003216:	4770      	bx	lr

08003218 <_fini>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr
